#!/usr/bin/env python

from typing import Dict, Any
import os
import json
import argparse
import hither2 as hi

def main():
    parser = argparse.ArgumentParser(description='Host a compute resource', formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('command', help='init or start')

    args = parser.parse_args()

    command = args.command

    if command == 'init':
        slurm_config = {
            "use_slurm": False,
            "num_workers_per_batch": 4.,
            "num_cores_per_job": 2,
            "time_limit_per_batch": 7200,
            "max_simultaneous_batches": 1,
            "additional_srun_opts": []
        }
        x = {
            "compute_resource_id": "<compute-resource-id>",
            "database": "<database-config>",
            "kachery": "<kachery-config>",
            "job_handler": {
                "type": "slurm",
                "config": slurm_config
            }
        }
        with open('compute_resource.json', 'w') as f:
            json.dump(x, f, indent=4)
        print('Example configuration has been written to compute_resource.json. Edit that file and then run "hither2-compute-resource start".')
        return
    elif command == 'start':
        with open('compute_resource.json', 'r') as f:
            config = json.load(f)
        database = config['database']
        compute_resource_id = config['compute_resource_id']
        kachery = config['kachery']
        job_handler = config['job_handler']
        if type(database) == str:
            db = hi.Database.preset(database)
        else:
            db = hi.Database(**database)
        jc = hi.JobCache(database=db)

        if job_handler['type'] == 'slurm':
            slurm_working_dir = 'slurm-working-dir'
            if not os.path.exists(slurm_working_dir):
                os.mkdir(slurm_working_dir)
            jh = hi.SlurmJobHandler(
                working_dir=slurm_working_dir,
                **job_handler['config']
            )
        elif job_handler['type'] == 'parallel':
            jh = hi.ParallelJobHandler(
                num_workers=job_handler['config']['num_workers']
            )
        else:
            raise Exception(f'Unexpected job handler type: {job_handler["type"]}')

        cr = hi.ComputeResource(
            database=db,
            compute_resource_id=compute_resource_id,
            kachery=kachery,
            job_handler=jh,
            job_cache=jc
        )
        print(f'Starting compute resource: {compute_resource_id}')
        cr.run()
    else:
        print(f'Unexpected command: {command}')

if __name__ == "__main__":
    main()
