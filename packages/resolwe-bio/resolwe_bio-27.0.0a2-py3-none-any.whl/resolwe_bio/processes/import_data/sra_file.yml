# ==========
# Import-SRA
# ==========
---

- slug: import-sra
  name: SRA data
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/common:1.3.1
    resources:
      cores: 1
      memory: 1024
      network: true
  data_name: "{{ sra_accession }}"
  version: 0.2.0
  type: data:sra
  category: Import
  persistence: TEMP
  description: |
    Import single or paired-end reads from Sequence Read Archive (SRA) via an
    SRA accession number. SRA stores raw sequencing data and alignment
    information from high-throughput sequencing platforms.
  input:
    - name: sra_accession
      label: SRA accession
      type: basic:string
    - name: show_advanced
      label: Show advanced options
      type: basic:boolean
      default: false
    - name: advanced
      label: Advanced options
      hidden: "!show_advanced"
      group:
        - name: min_spot_id
          label: Minimum spot ID
          type: basic:integer
          required: false
        - name: max_spot_id
          label: Maximum spot ID
          type: basic:integer
          required: false
        - name: min_read_len
          label: Minimum read length
          type: basic:integer
          required: false
        - name: clip
          label: Clip adapter sequences
          type: basic:boolean
          default: false
        - name: aligned
          label: Dump only aligned sequences
          type: basic:boolean
          default: false
        - name: unaligned
          label: Dump only unaligned sequences
          type: basic:boolean
          default: false
  run:
    runtime: polyglot
    language: bash
    program: |
      numLines=$(fastq-dump -X 1 -Z --split-spot {{ sra_accession }} | wc -l)

      if [ $numLines -eq 4 ]
      then
        processName="import-sra-single"
      else
        processName="import-sra-paired"
      fi

      echo 'run {' \
        '"process": "'${processName}'",' \
        '"input": {' \
          '"sra_accession": "{{ sra_accession }}",' \
          '"advanced": {' \
            {% if advanced.min_spot_id %} '"min_spot_id": {{ advanced.min_spot_id }},' {% endif %} \
            {% if advanced.max_spot_id %} '"max_spot_id": {{ advanced.max_spot_id }},' {% endif %} \
            {% if advanced.min_read_len %} '"min_read_len": {{ advanced.min_read_len }},' {% endif %} \
            '"clip": {{ advanced.clip|lower }},' \
            '"aligned": {{ advanced.aligned|lower }},' \
            '"unaligned": {{ advanced.unaligned|lower }}' \
          '}' \
        '}' \
      '}'

- slug: import-sra-single
  name: SRA data (single-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/common:1.3.1
    resources:
      cores: 1
      memory: 1024
      network: true
  data_name: "{{ sra_accession }}"
  version: 0.2.0
  type: data:reads:fastq:single
  flow_collection: sample
  category: Import
  persistence: RAW
  description: |
    Import single-end reads from Sequence Read Archive (SRA) via an
    SRA accession number. SRA stores raw sequencing data and alignment
    information from high-throughput sequencing platforms.
  input:
    - name: sra_accession
      label: SRA accession
      type: basic:string
    - name: show_advanced
      label: Show advanced options
      type: basic:boolean
      default: false
    - name: advanced
      label: Advanced options
      hidden: "!show_advanced"
      group:
        - name: min_spot_id
          label: Minimum spot ID
          type: basic:integer
          required: false
        - name: max_spot_id
          label: Maximum spot ID
          type: basic:integer
          required: false
        - name: min_read_len
          label: Minimum read length
          type: basic:integer
          required: false
        - name: clip
          label: Clip adapter sequences
          type: basic:boolean
          default: false
        - name: aligned
          label: Dump only aligned sequences
          type: basic:boolean
          default: false
        - name: unaligned
          label: Dump only unaligned sequences
          type: basic:boolean
          default: false
  output:
    - name: fastq
      label: Reads file
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      fastq-dump \
        --gzip \
        {% if advanced.min_spot_id %} --minSpotId {{ advanced.min_spot_id }} {% endif %} \
        {% if advanced.max_spot_id %} --maxSpotId {{ advanced.max_spot_id }} {% endif %} \
        {% if advanced.min_read_len %} --minReadLen {{ advanced.min_read_len }} {% endif %} \
        {% if advanced.clip %} --clip {% endif %} \
        {% if advanced.aligned %} --aligned {% endif %} \
        {% if advanced.unaligned %} --unaligned {% endif %} \
        {{ sra_accession }}
      re-checkrc "Download of reads with fastq-dump failed."
      re-save-file-list fastq {{ sra_accession }}.fastq.gz

      echo "Postprocessing FastQC..."
      mkdir "fastqc" && fastqc {{ sra_accession }}.fastq.gz --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for report_dir in ./fastqc/*/
      do
        ENCODING=`parse_encoding_type.py ${report_dir}fastqc_data.txt`
        if [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 encoding in supported."
        fi
      done

      for fqc in `ls -v *_fastqc.zip`
      do
        FASTQC=${FASTQC}"$fqc "
        NAME=`basename $fqc _fastqc.zip`
        FASTQC_URL=${FASTQC_URL}"{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]} "
      done

      re-save-file-list fastqc_archive ${FASTQC}
      re-save-list fastqc_url ${FASTQC_URL}

- slug: import-sra-paired
  name: SRA data (paired-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/common:1.3.1
    resources:
      cores: 1
      memory: 1024
      network: true
  data_name: "{{ sra_accession }}"
  version: 0.2.0
  type: data:reads:fastq:paired
  flow_collection: sample
  category: Import
  persistence: RAW
  description: |
    Import paired-end reads from Sequence Read Archive (SRA) via an
    SRA accession number. SRA stores raw sequencing data and alignment
    information from high-throughput sequencing platforms.
  input:
    - name: sra_accession
      label: SRA accession
      type: basic:string
    - name: show_advanced
      label: Show advanced options
      type: basic:boolean
      default: false
    - name: advanced
      label: Advanced options
      hidden: "!show_advanced"
      group:
        - name: min_spot_id
          label: Minimum spot ID
          type: basic:integer
          required: false
        - name: max_spot_id
          label: Maximum spot ID
          type: basic:integer
          required: false
        - name: min_read_len
          label: Minimum read length
          type: basic:integer
          required: false
        - name: clip
          label: Clip adapter sequences
          type: basic:boolean
          default: false
        - name: aligned
          label: Dump only aligned sequences
          type: basic:boolean
          default: false
        - name: unaligned
          label: Dump only unaligned sequences
          type: basic:boolean
          default: false
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      fastq-dump \
        --split-files \
        --gzip \
        {% if advanced.min_spot_id %} --minSpotId {{ advanced.min_spot_id }} {% endif %} \
        {% if advanced.max_spot_id %} --maxSpotId {{ advanced.max_spot_id }} {% endif %} \
        {% if advanced.min_read_len %} --minReadLen {{ advanced.min_read_len }} {% endif %} \
        {% if advanced.clip %} --clip {% endif %} \
        {% if advanced.aligned %} --aligned {% endif %} \
        {% if advanced.unaligned %} --unaligned {% endif %} \
        {{ sra_accession }}
      re-checkrc "Download of reads with fastq-dump failed."
      re-save-file-list fastq {{ sra_accession }}_1.fastq.gz
      re-save-file-list fastq2 {{ sra_accession }}_2.fastq.gz

      echo "Postprocessing FastQC..."
      mkdir "fastqc" && fastqc {{ sra_accession }}_1.fastq.gz {{ sra_accession }}_2.fastq.gz --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for report_dir in ./fastqc/*/
      do
        ENCODING=`parse_encoding_type.py ${report_dir}fastqc_data.txt`
        if [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 encoding in supported."
        fi
      done

      re-save-file-list fastqc_archive {{ sra_accession }}_1_fastqc.zip
      re-save-file-list fastqc_archive2 {{ sra_accession }}_2_fastqc.zip
      re-save-list fastqc_url '{"file":"fastqc/'{{ sra_accession }}'_1_fastqc/fastqc_report.html","refs":["fastqc/'{{ sra_accession }}'_1_fastqc"]}'
      re-save-list fastqc_url2 '{"file":"fastqc/'{{ sra_accession }}'_2_fastqc/fastqc_report.html","refs":["fastqc/'{{ sra_accession }}'_2_fastqc"]}'
