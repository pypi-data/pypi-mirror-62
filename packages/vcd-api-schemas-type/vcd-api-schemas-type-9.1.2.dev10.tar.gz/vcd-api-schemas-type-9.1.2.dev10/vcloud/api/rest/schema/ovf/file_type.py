"""
 Copyright (c) 2020 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re


class FileType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'any': 'list[object]',
        'chunk_size': 'int',
        'compression': 'str',
        'href': 'str',
        'id': 'str',
        'size': 'int',
        'other_attributes': 'object'
    }

    attribute_map = {
        'any': 'any',
        'chunk_size': 'chunkSize',
        'compression': 'compression',
        'href': 'href',
        'id': 'id',
        'size': 'size',
        'other_attributes': 'otherAttributes'
    }

    def __init__(self, any=None,chunk_size=None,compression=None,href=None,id=None,size=None,other_attributes=None):
        self._any = None
        self._chunk_size = None
        self._compression = None
        self._href = None
        self._id = None
        self._size = None
        self._other_attributes = None

        if any is not None:
            self.any = any
        if chunk_size is not None:
            self.chunk_size = chunk_size
        if compression is not None:
            self.compression = compression
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if size is not None:
            self.size = size
        if other_attributes is not None:
            self.other_attributes = other_attributes

    @property
    def any(self):
        return self._any
    
    @any.setter
    def any(self, any):
        self._any = any

    @property
    def chunk_size(self):
        return self._chunk_size
    
    @chunk_size.setter
    def chunk_size(self, chunk_size):
        self._chunk_size = chunk_size

    @property
    def compression(self):
        return self._compression
    
    @compression.setter
    def compression(self, compression):
        self._compression = compression

    @property
    def href(self):
        return self._href
    
    @href.setter
    def href(self, href):
        self._href = href

    @property
    def id(self):
        return self._id
    
    @id.setter
    def id(self, id):
        self._id = id

    @property
    def size(self):
        return self._size
    
    @size.setter
    def size(self, size):
        self._size = size

    @property
    def other_attributes(self):
        return self._other_attributes
    
    @other_attributes.setter
    def other_attributes(self, other_attributes):
        self._other_attributes = other_attributes


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
