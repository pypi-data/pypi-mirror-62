# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Mykytea
else:
    import _Mykytea

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Mykytea.delete_SwigPyIterator

    def value(self):
        return _Mykytea.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Mykytea.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Mykytea.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Mykytea.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Mykytea.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Mykytea.SwigPyIterator_copy(self)

    def next(self):
        return _Mykytea.SwigPyIterator_next(self)

    def __next__(self):
        return _Mykytea.SwigPyIterator___next__(self)

    def previous(self):
        return _Mykytea.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Mykytea.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Mykytea.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Mykytea.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Mykytea.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Mykytea.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Mykytea.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Mykytea.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Mykytea:
_Mykytea.SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Mykytea.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Mykytea.StringVector___nonzero__(self)

    def __bool__(self):
        return _Mykytea.StringVector___bool__(self)

    def __len__(self):
        return _Mykytea.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _Mykytea.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Mykytea.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Mykytea.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Mykytea.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Mykytea.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Mykytea.StringVector___setitem__(self, *args)

    def pop(self):
        return _Mykytea.StringVector_pop(self)

    def append(self, x):
        return _Mykytea.StringVector_append(self, x)

    def empty(self):
        return _Mykytea.StringVector_empty(self)

    def size(self):
        return _Mykytea.StringVector_size(self)

    def swap(self, v):
        return _Mykytea.StringVector_swap(self, v)

    def begin(self):
        return _Mykytea.StringVector_begin(self)

    def end(self):
        return _Mykytea.StringVector_end(self)

    def rbegin(self):
        return _Mykytea.StringVector_rbegin(self)

    def rend(self):
        return _Mykytea.StringVector_rend(self)

    def clear(self):
        return _Mykytea.StringVector_clear(self)

    def get_allocator(self):
        return _Mykytea.StringVector_get_allocator(self)

    def pop_back(self):
        return _Mykytea.StringVector_pop_back(self)

    def erase(self, *args):
        return _Mykytea.StringVector_erase(self, *args)

    def __init__(self, *args):
        _Mykytea.StringVector_swiginit(self, _Mykytea.new_StringVector(*args))

    def push_back(self, x):
        return _Mykytea.StringVector_push_back(self, x)

    def front(self):
        return _Mykytea.StringVector_front(self)

    def back(self):
        return _Mykytea.StringVector_back(self)

    def assign(self, n, x):
        return _Mykytea.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _Mykytea.StringVector_resize(self, *args)

    def insert(self, *args):
        return _Mykytea.StringVector_insert(self, *args)

    def reserve(self, n):
        return _Mykytea.StringVector_reserve(self, n)

    def capacity(self):
        return _Mykytea.StringVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_StringVector

# Register StringVector in _Mykytea:
_Mykytea.StringVector_swigregister(StringVector)

class Pairsd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Mykytea.Pairsd_swiginit(self, _Mykytea.new_Pairsd(*args))
    first = property(_Mykytea.Pairsd_first_get, _Mykytea.Pairsd_first_set)
    second = property(_Mykytea.Pairsd_second_get, _Mykytea.Pairsd_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Mykytea.delete_Pairsd

# Register Pairsd in _Mykytea:
_Mykytea.Pairsd_swigregister(Pairsd)

class PairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Mykytea.PairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Mykytea.PairVector___nonzero__(self)

    def __bool__(self):
        return _Mykytea.PairVector___bool__(self)

    def __len__(self):
        return _Mykytea.PairVector___len__(self)

    def __getslice__(self, i, j):
        return _Mykytea.PairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Mykytea.PairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Mykytea.PairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Mykytea.PairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Mykytea.PairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Mykytea.PairVector___setitem__(self, *args)

    def pop(self):
        return _Mykytea.PairVector_pop(self)

    def append(self, x):
        return _Mykytea.PairVector_append(self, x)

    def empty(self):
        return _Mykytea.PairVector_empty(self)

    def size(self):
        return _Mykytea.PairVector_size(self)

    def swap(self, v):
        return _Mykytea.PairVector_swap(self, v)

    def begin(self):
        return _Mykytea.PairVector_begin(self)

    def end(self):
        return _Mykytea.PairVector_end(self)

    def rbegin(self):
        return _Mykytea.PairVector_rbegin(self)

    def rend(self):
        return _Mykytea.PairVector_rend(self)

    def clear(self):
        return _Mykytea.PairVector_clear(self)

    def get_allocator(self):
        return _Mykytea.PairVector_get_allocator(self)

    def pop_back(self):
        return _Mykytea.PairVector_pop_back(self)

    def erase(self, *args):
        return _Mykytea.PairVector_erase(self, *args)

    def __init__(self, *args):
        _Mykytea.PairVector_swiginit(self, _Mykytea.new_PairVector(*args))

    def push_back(self, x):
        return _Mykytea.PairVector_push_back(self, x)

    def front(self):
        return _Mykytea.PairVector_front(self)

    def back(self):
        return _Mykytea.PairVector_back(self)

    def assign(self, n, x):
        return _Mykytea.PairVector_assign(self, n, x)

    def resize(self, *args):
        return _Mykytea.PairVector_resize(self, *args)

    def insert(self, *args):
        return _Mykytea.PairVector_insert(self, *args)

    def reserve(self, n):
        return _Mykytea.PairVector_reserve(self, n)

    def capacity(self):
        return _Mykytea.PairVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_PairVector

# Register PairVector in _Mykytea:
_Mykytea.PairVector_swigregister(PairVector)

class PairVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Mykytea.PairVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Mykytea.PairVectorVector___nonzero__(self)

    def __bool__(self):
        return _Mykytea.PairVectorVector___bool__(self)

    def __len__(self):
        return _Mykytea.PairVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _Mykytea.PairVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Mykytea.PairVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Mykytea.PairVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Mykytea.PairVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Mykytea.PairVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Mykytea.PairVectorVector___setitem__(self, *args)

    def pop(self):
        return _Mykytea.PairVectorVector_pop(self)

    def append(self, x):
        return _Mykytea.PairVectorVector_append(self, x)

    def empty(self):
        return _Mykytea.PairVectorVector_empty(self)

    def size(self):
        return _Mykytea.PairVectorVector_size(self)

    def swap(self, v):
        return _Mykytea.PairVectorVector_swap(self, v)

    def begin(self):
        return _Mykytea.PairVectorVector_begin(self)

    def end(self):
        return _Mykytea.PairVectorVector_end(self)

    def rbegin(self):
        return _Mykytea.PairVectorVector_rbegin(self)

    def rend(self):
        return _Mykytea.PairVectorVector_rend(self)

    def clear(self):
        return _Mykytea.PairVectorVector_clear(self)

    def get_allocator(self):
        return _Mykytea.PairVectorVector_get_allocator(self)

    def pop_back(self):
        return _Mykytea.PairVectorVector_pop_back(self)

    def erase(self, *args):
        return _Mykytea.PairVectorVector_erase(self, *args)

    def __init__(self, *args):
        _Mykytea.PairVectorVector_swiginit(self, _Mykytea.new_PairVectorVector(*args))

    def push_back(self, x):
        return _Mykytea.PairVectorVector_push_back(self, x)

    def front(self):
        return _Mykytea.PairVectorVector_front(self)

    def back(self):
        return _Mykytea.PairVectorVector_back(self)

    def assign(self, n, x):
        return _Mykytea.PairVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _Mykytea.PairVectorVector_resize(self, *args)

    def insert(self, *args):
        return _Mykytea.PairVectorVector_insert(self, *args)

    def reserve(self, n):
        return _Mykytea.PairVectorVector_reserve(self, n)

    def capacity(self):
        return _Mykytea.PairVectorVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_PairVectorVector

# Register PairVectorVector in _Mykytea:
_Mykytea.PairVectorVector_swigregister(PairVectorVector)

class TagsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Mykytea.TagsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Mykytea.TagsVector___nonzero__(self)

    def __bool__(self):
        return _Mykytea.TagsVector___bool__(self)

    def __len__(self):
        return _Mykytea.TagsVector___len__(self)

    def __getslice__(self, i, j):
        return _Mykytea.TagsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Mykytea.TagsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Mykytea.TagsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Mykytea.TagsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Mykytea.TagsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Mykytea.TagsVector___setitem__(self, *args)

    def pop(self):
        return _Mykytea.TagsVector_pop(self)

    def append(self, x):
        return _Mykytea.TagsVector_append(self, x)

    def empty(self):
        return _Mykytea.TagsVector_empty(self)

    def size(self):
        return _Mykytea.TagsVector_size(self)

    def swap(self, v):
        return _Mykytea.TagsVector_swap(self, v)

    def begin(self):
        return _Mykytea.TagsVector_begin(self)

    def end(self):
        return _Mykytea.TagsVector_end(self)

    def rbegin(self):
        return _Mykytea.TagsVector_rbegin(self)

    def rend(self):
        return _Mykytea.TagsVector_rend(self)

    def clear(self):
        return _Mykytea.TagsVector_clear(self)

    def get_allocator(self):
        return _Mykytea.TagsVector_get_allocator(self)

    def pop_back(self):
        return _Mykytea.TagsVector_pop_back(self)

    def erase(self, *args):
        return _Mykytea.TagsVector_erase(self, *args)

    def __init__(self, *args):
        _Mykytea.TagsVector_swiginit(self, _Mykytea.new_TagsVector(*args))

    def push_back(self, x):
        return _Mykytea.TagsVector_push_back(self, x)

    def front(self):
        return _Mykytea.TagsVector_front(self)

    def back(self):
        return _Mykytea.TagsVector_back(self)

    def assign(self, n, x):
        return _Mykytea.TagsVector_assign(self, n, x)

    def resize(self, *args):
        return _Mykytea.TagsVector_resize(self, *args)

    def insert(self, *args):
        return _Mykytea.TagsVector_insert(self, *args)

    def reserve(self, n):
        return _Mykytea.TagsVector_reserve(self, n)

    def capacity(self):
        return _Mykytea.TagsVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_TagsVector

# Register TagsVector in _Mykytea:
_Mykytea.TagsVector_swigregister(TagsVector)

class Kytea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def readModel(self, fileName):
        return _Mykytea.Kytea_readModel(self, fileName)

    def writeModel(self, fileName):
        return _Mykytea.Kytea_writeModel(self, fileName)

    def calculateWS(self, sent):
        return _Mykytea.Kytea_calculateWS(self, sent)

    def calculateTags(self, sent, lev):
        return _Mykytea.Kytea_calculateTags(self, sent, lev)

    def calculateUnknownTag(self, str, lev):
        return _Mykytea.Kytea_calculateUnknownTag(self, str, lev)

    def getStringUtil(self):
        return _Mykytea.Kytea_getStringUtil(self)

    def getConfig(self):
        return _Mykytea.Kytea_getConfig(self)

    def trainAll(self):
        return _Mykytea.Kytea_trainAll(self)

    def analyze(self):
        return _Mykytea.Kytea_analyze(self)

    def init(self):
        return _Mykytea.Kytea_init(self)

    def __init__(self, *args):
        _Mykytea.Kytea_swiginit(self, _Mykytea.new_Kytea(*args))
    __swig_destroy__ = _Mykytea.delete_Kytea

    def getWSModel(self):
        return _Mykytea.Kytea_getWSModel(self)

    def setWSModel(self, model):
        return _Mykytea.Kytea_setWSModel(self, model)

    def checkEqual(self, rhs):
        return _Mykytea.Kytea_checkEqual(self, rhs)

# Register Kytea in _Mykytea:
_Mykytea.Kytea_swigregister(Kytea)


def __lt__(a, b):
    return _Mykytea.__lt__(a, b)
class KyteaWord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s, n):
        _Mykytea.KyteaWord_swiginit(self, _Mykytea.new_KyteaWord(s, n))
    surface = property(_Mykytea.KyteaWord_surface_get, _Mykytea.KyteaWord_surface_set)
    norm = property(_Mykytea.KyteaWord_norm_get, _Mykytea.KyteaWord_norm_set)
    tags = property(_Mykytea.KyteaWord_tags_get, _Mykytea.KyteaWord_tags_set)
    isCertain = property(_Mykytea.KyteaWord_isCertain_get, _Mykytea.KyteaWord_isCertain_set)
    unknown = property(_Mykytea.KyteaWord_unknown_get, _Mykytea.KyteaWord_unknown_set)

    def limitTags(self, lev, lim):
        return _Mykytea.KyteaWord_limitTags(self, lev, lim)

    def getNumTags(self):
        return _Mykytea.KyteaWord_getNumTags(self)

    def getTag(self, lev):
        return _Mykytea.KyteaWord_getTag(self, lev)

    def getTags(self, lev):
        return _Mykytea.KyteaWord_getTags(self, lev)

    def getTagSurf(self, lev):
        return _Mykytea.KyteaWord_getTagSurf(self, lev)

    def getTagConf(self, lev):
        return _Mykytea.KyteaWord_getTagConf(self, lev)

    def setTag(self, lev, tag):
        return _Mykytea.KyteaWord_setTag(self, lev, tag)

    def setTagConf(self, lev, conf):
        return _Mykytea.KyteaWord_setTagConf(self, lev, conf)

    def clearTags(self, lev):
        return _Mykytea.KyteaWord_clearTags(self, lev)

    def addTag(self, lev, tag):
        return _Mykytea.KyteaWord_addTag(self, lev, tag)

    def setUnknown(self, val):
        return _Mykytea.KyteaWord_setUnknown(self, val)

    def getUnknown(self):
        return _Mykytea.KyteaWord_getUnknown(self)

    def hasTag(self, lev):
        return _Mykytea.KyteaWord_hasTag(self, lev)
    __swig_destroy__ = _Mykytea.delete_KyteaWord

# Register KyteaWord in _Mykytea:
_Mykytea.KyteaWord_swigregister(KyteaWord)

class KyteaSentence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    surface = property(_Mykytea.KyteaSentence_surface_get, _Mykytea.KyteaSentence_surface_set)
    norm = property(_Mykytea.KyteaSentence_norm_get, _Mykytea.KyteaSentence_norm_set)
    wsConfs = property(_Mykytea.KyteaSentence_wsConfs_get, _Mykytea.KyteaSentence_wsConfs_set)
    words = property(_Mykytea.KyteaSentence_words_get, _Mykytea.KyteaSentence_words_set)

    def __init__(self, *args):
        _Mykytea.KyteaSentence_swiginit(self, _Mykytea.new_KyteaSentence(*args))

    def refreshWS(self, confidence):
        return _Mykytea.KyteaSentence_refreshWS(self, confidence)
    __swig_destroy__ = _Mykytea.delete_KyteaSentence

# Register KyteaSentence in _Mykytea:
_Mykytea.KyteaSentence_swigregister(KyteaSentence)

class Tags(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    surface = property(_Mykytea.Tags_surface_get, _Mykytea.Tags_surface_set)
    tag = property(_Mykytea.Tags_tag_get, _Mykytea.Tags_tag_set)

    def __init__(self):
        _Mykytea.Tags_swiginit(self, _Mykytea.new_Tags())
    __swig_destroy__ = _Mykytea.delete_Tags

# Register Tags in _Mykytea:
_Mykytea.Tags_swigregister(Tags)

class Mykytea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, str):
        _Mykytea.Mykytea_swiginit(self, _Mykytea.new_Mykytea(str))
    __swig_destroy__ = _Mykytea.delete_Mykytea

    def getWS(self, str):
        return _Mykytea.Mykytea_getWS(self, str)

    def getTags(self, str):
        return _Mykytea.Mykytea_getTags(self, str)

    def getAllTags(self, str):
        return _Mykytea.Mykytea_getAllTags(self, str)

    def getTagsToString(self, str):
        return _Mykytea.Mykytea_getTagsToString(self, str)

# Register Mykytea in _Mykytea:
_Mykytea.Mykytea_swigregister(Mykytea)



