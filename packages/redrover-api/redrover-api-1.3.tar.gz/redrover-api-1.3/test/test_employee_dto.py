# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import redrover_api
from redrover_api.models.employee_dto import EmployeeDto  # noqa: E501
from redrover_api.rest import ApiException

class TestEmployeeDto(unittest.TestCase):
    """EmployeeDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test EmployeeDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = redrover_api.models.employee_dto.EmployeeDto()  # noqa: E501
        if include_optional :
            return EmployeeDto(
                role = 0, 
                position = redrover_api.models.position.Position(
                    org_id = 56, 
                    id = 56, 
                    external_id = '0', 
                    position_type = redrover_api.models.locator[int32].Locator[Int32](
                        id = 56, 
                        external_id = '0', ), 
                    position_type_id = 56, 
                    contract = redrover_api.models.locator[int32].Locator[Int32](
                        id = 56, 
                        external_id = '0', ), 
                    contract_id = 56, 
                    title = '0', 
                    hours_per_full_work_day = 1.337, 
                    needs_replacement = 0, 
                    schedules = [
                        redrover_api.models.position_schedule.PositionSchedule(
                            items = [
                                redrover_api.models.position_schedule_item.PositionScheduleItem(
                                    location = redrover_api.models.locator[int32].Locator[Int32](
                                        id = 56, 
                                        external_id = '0', ), 
                                    location_id = 56, 
                                    bell_schedule = redrover_api.models.locator[int32].Locator[Int32](
                                        id = 56, 
                                        external_id = '0', ), 
                                    bell_schedule_id = 56, 
                                    start_period = redrover_api.models.locator[int32].Locator[Int32](
                                        id = 56, 
                                        external_id = '0', ), 
                                    start_period_id = 56, 
                                    end_period = redrover_api.models.locator[int32].Locator[Int32](
                                        id = 56, 
                                        external_id = '0', ), 
                                    end_period_id = 56, 
                                    start_time = '0', 
                                    end_time = '0', 
                                    next_start_time = '0', )
                                ], 
                            days_of_the_week = [
                                0
                                ], )
                        ], 
                    accounting_code_allocations = [
                        redrover_api.models.position_accounting_code.PositionAccountingCode(
                            accounting_code_id = 56, 
                            allocation = 1.337, )
                        ], 
                    replacement_criteria = redrover_api.models.replacement_criteria.ReplacementCriteria(
                        org_id = 56, 
                        must_have = [
                            redrover_api.models.locator[int32].Locator[Int32](
                                id = 56, 
                                external_id = '0', )
                            ], 
                        must_have_ids = [
                            56
                            ], 
                        should_have = [
                            redrover_api.models.locator[int32].Locator[Int32](
                                id = 56, 
                                external_id = '0', )
                            ], 
                        should_have_ids = [
                            56
                            ], 
                        should_not_have = [
                            redrover_api.models.locator[int32].Locator[Int32](
                                id = 56, 
                                external_id = '0', )
                            ], 
                        should_not_have_ids = [
                            56
                            ], 
                        must_not_have = [
                            redrover_api.models.locator[int32].Locator[Int32](
                                id = 56, 
                                external_id = '0', )
                            ], 
                        must_not_have_ids = [
                            56
                            ], ), ), 
                substitute_preferences = redrover_api.models.substitute_preferences.SubstitutePreferences(
                    favorite_substitutes = [
                        redrover_api.models.locator[int32].Locator[Int32](
                            id = 56, 
                            external_id = '0', )
                        ], 
                    favorite_substitute_ids = [
                        56
                        ], 
                    blocked_substitutes = [
                        redrover_api.models.locator[int32].Locator[Int32](
                            id = 56, 
                            external_id = '0', )
                        ], 
                    blocked_substitute_ids = [
                        56
                        ], 
                    auto_assigned_substitutes = [
                        redrover_api.models.locator[int32].Locator[Int32](
                            id = 56, 
                            external_id = '0', )
                        ], 
                    auto_assigned_substitute_ids = [
                        56
                        ], ), 
                time_off_balances = [
                    redrover_api.models.time_off_balance.TimeOffBalance(
                        absence_reason = redrover_api.models.locator[int32].Locator[Int32](
                            id = 56, 
                            external_id = '0', ), 
                        absence_reason_id = 56, 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        balance = 1.337, )
                    ], 
                org_id = 56, 
                row_version = 56, 
                id = 56, 
                external_id = '0', 
                first_name = '0', 
                middle_name = '0', 
                last_name = '0', 
                email = '0', 
                date_of_birth = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                address1 = '0', 
                address2 = '0', 
                city = '0', 
                postal_code = '0', 
                state = '0', 
                state_id = 0, 
                country = '0', 
                country_id = 0, 
                phone_number = '0', 
                active = True, 
                permission_set = redrover_api.models.locator[int32].Locator[Int32](
                    id = 56, 
                    external_id = '0', ), 
                permission_set_id = 56, 
                related_org_ids = [
                    56
                    ], 
                invite_immediately = True
            )
        else :
            return EmployeeDto(
        )

    def testEmployeeDto(self):
        """Test EmployeeDto"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
