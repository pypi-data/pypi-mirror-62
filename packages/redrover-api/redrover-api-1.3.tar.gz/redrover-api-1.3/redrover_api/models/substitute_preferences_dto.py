# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class SubstitutePreferencesDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'favorite_substitutes': 'list[LocatorInt32]',
        'favorite_substitute_ids': 'list[int]',
        'blocked_substitutes': 'list[LocatorInt32]',
        'blocked_substitute_ids': 'list[int]',
        'auto_assigned_substitutes': 'list[LocatorInt32]',
        'auto_assigned_substitute_ids': 'list[int]'
    }

    attribute_map = {
        'favorite_substitutes': 'favoriteSubstitutes',
        'favorite_substitute_ids': 'favoriteSubstituteIds',
        'blocked_substitutes': 'blockedSubstitutes',
        'blocked_substitute_ids': 'blockedSubstituteIds',
        'auto_assigned_substitutes': 'autoAssignedSubstitutes',
        'auto_assigned_substitute_ids': 'autoAssignedSubstituteIds'
    }

    def __init__(self, favorite_substitutes=None, favorite_substitute_ids=None, blocked_substitutes=None, blocked_substitute_ids=None, auto_assigned_substitutes=None, auto_assigned_substitute_ids=None, local_vars_configuration=None):  # noqa: E501
        """SubstitutePreferencesDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._favorite_substitutes = None
        self._favorite_substitute_ids = None
        self._blocked_substitutes = None
        self._blocked_substitute_ids = None
        self._auto_assigned_substitutes = None
        self._auto_assigned_substitute_ids = None
        self.discriminator = None

        if favorite_substitutes is not None:
            self.favorite_substitutes = favorite_substitutes
        if favorite_substitute_ids is not None:
            self.favorite_substitute_ids = favorite_substitute_ids
        if blocked_substitutes is not None:
            self.blocked_substitutes = blocked_substitutes
        if blocked_substitute_ids is not None:
            self.blocked_substitute_ids = blocked_substitute_ids
        if auto_assigned_substitutes is not None:
            self.auto_assigned_substitutes = auto_assigned_substitutes
        if auto_assigned_substitute_ids is not None:
            self.auto_assigned_substitute_ids = auto_assigned_substitute_ids

    @property
    def favorite_substitutes(self):
        """Gets the favorite_substitutes of this SubstitutePreferencesDto.  # noqa: E501


        :return: The favorite_substitutes of this SubstitutePreferencesDto.  # noqa: E501
        :rtype: list[LocatorInt32]
        """
        return self._favorite_substitutes

    @favorite_substitutes.setter
    def favorite_substitutes(self, favorite_substitutes):
        """Sets the favorite_substitutes of this SubstitutePreferencesDto.


        :param favorite_substitutes: The favorite_substitutes of this SubstitutePreferencesDto.  # noqa: E501
        :type: list[LocatorInt32]
        """

        self._favorite_substitutes = favorite_substitutes

    @property
    def favorite_substitute_ids(self):
        """Gets the favorite_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501


        :return: The favorite_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._favorite_substitute_ids

    @favorite_substitute_ids.setter
    def favorite_substitute_ids(self, favorite_substitute_ids):
        """Sets the favorite_substitute_ids of this SubstitutePreferencesDto.


        :param favorite_substitute_ids: The favorite_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501
        :type: list[int]
        """

        self._favorite_substitute_ids = favorite_substitute_ids

    @property
    def blocked_substitutes(self):
        """Gets the blocked_substitutes of this SubstitutePreferencesDto.  # noqa: E501


        :return: The blocked_substitutes of this SubstitutePreferencesDto.  # noqa: E501
        :rtype: list[LocatorInt32]
        """
        return self._blocked_substitutes

    @blocked_substitutes.setter
    def blocked_substitutes(self, blocked_substitutes):
        """Sets the blocked_substitutes of this SubstitutePreferencesDto.


        :param blocked_substitutes: The blocked_substitutes of this SubstitutePreferencesDto.  # noqa: E501
        :type: list[LocatorInt32]
        """

        self._blocked_substitutes = blocked_substitutes

    @property
    def blocked_substitute_ids(self):
        """Gets the blocked_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501


        :return: The blocked_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._blocked_substitute_ids

    @blocked_substitute_ids.setter
    def blocked_substitute_ids(self, blocked_substitute_ids):
        """Sets the blocked_substitute_ids of this SubstitutePreferencesDto.


        :param blocked_substitute_ids: The blocked_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501
        :type: list[int]
        """

        self._blocked_substitute_ids = blocked_substitute_ids

    @property
    def auto_assigned_substitutes(self):
        """Gets the auto_assigned_substitutes of this SubstitutePreferencesDto.  # noqa: E501


        :return: The auto_assigned_substitutes of this SubstitutePreferencesDto.  # noqa: E501
        :rtype: list[LocatorInt32]
        """
        return self._auto_assigned_substitutes

    @auto_assigned_substitutes.setter
    def auto_assigned_substitutes(self, auto_assigned_substitutes):
        """Sets the auto_assigned_substitutes of this SubstitutePreferencesDto.


        :param auto_assigned_substitutes: The auto_assigned_substitutes of this SubstitutePreferencesDto.  # noqa: E501
        :type: list[LocatorInt32]
        """

        self._auto_assigned_substitutes = auto_assigned_substitutes

    @property
    def auto_assigned_substitute_ids(self):
        """Gets the auto_assigned_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501


        :return: The auto_assigned_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._auto_assigned_substitute_ids

    @auto_assigned_substitute_ids.setter
    def auto_assigned_substitute_ids(self, auto_assigned_substitute_ids):
        """Sets the auto_assigned_substitute_ids of this SubstitutePreferencesDto.


        :param auto_assigned_substitute_ids: The auto_assigned_substitute_ids of this SubstitutePreferencesDto.  # noqa: E501
        :type: list[int]
        """

        self._auto_assigned_substitute_ids = auto_assigned_substitute_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubstitutePreferencesDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubstitutePreferencesDto):
            return True

        return self.to_dict() != other.to_dict()
