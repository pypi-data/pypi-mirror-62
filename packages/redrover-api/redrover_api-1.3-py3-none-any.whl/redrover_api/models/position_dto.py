# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PositionDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'org_id': 'int',
        'id': 'int',
        'external_id': 'str',
        'position_type': 'LocatorInt32',
        'position_type_id': 'int',
        'contract': 'LocatorInt32',
        'contract_id': 'int',
        'title': 'str',
        'hours_per_full_work_day': 'float',
        'needs_replacement': 'int',
        'schedules': 'list[PositionScheduleDto]',
        'accounting_code_allocations': 'list[PositionAccountingCodeDto]',
        'replacement_criteria': 'ReplacementCriteriaDto'
    }

    attribute_map = {
        'org_id': 'orgId',
        'id': 'id',
        'external_id': 'externalId',
        'position_type': 'positionType',
        'position_type_id': 'positionTypeId',
        'contract': 'contract',
        'contract_id': 'contractId',
        'title': 'title',
        'hours_per_full_work_day': 'hoursPerFullWorkDay',
        'needs_replacement': 'needsReplacement',
        'schedules': 'schedules',
        'accounting_code_allocations': 'accountingCodeAllocations',
        'replacement_criteria': 'replacementCriteria'
    }

    def __init__(self, org_id=None, id=None, external_id=None, position_type=None, position_type_id=None, contract=None, contract_id=None, title=None, hours_per_full_work_day=None, needs_replacement=None, schedules=None, accounting_code_allocations=None, replacement_criteria=None, local_vars_configuration=None):  # noqa: E501
        """PositionDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._org_id = None
        self._id = None
        self._external_id = None
        self._position_type = None
        self._position_type_id = None
        self._contract = None
        self._contract_id = None
        self._title = None
        self._hours_per_full_work_day = None
        self._needs_replacement = None
        self._schedules = None
        self._accounting_code_allocations = None
        self._replacement_criteria = None
        self.discriminator = None

        if org_id is not None:
            self.org_id = org_id
        if id is not None:
            self.id = id
        if external_id is not None:
            self.external_id = external_id
        if position_type is not None:
            self.position_type = position_type
        if position_type_id is not None:
            self.position_type_id = position_type_id
        if contract is not None:
            self.contract = contract
        if contract_id is not None:
            self.contract_id = contract_id
        if title is not None:
            self.title = title
        if hours_per_full_work_day is not None:
            self.hours_per_full_work_day = hours_per_full_work_day
        if needs_replacement is not None:
            self.needs_replacement = needs_replacement
        if schedules is not None:
            self.schedules = schedules
        if accounting_code_allocations is not None:
            self.accounting_code_allocations = accounting_code_allocations
        if replacement_criteria is not None:
            self.replacement_criteria = replacement_criteria

    @property
    def org_id(self):
        """Gets the org_id of this PositionDto.  # noqa: E501


        :return: The org_id of this PositionDto.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PositionDto.


        :param org_id: The org_id of this PositionDto.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def id(self):
        """Gets the id of this PositionDto.  # noqa: E501


        :return: The id of this PositionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PositionDto.


        :param id: The id of this PositionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this PositionDto.  # noqa: E501


        :return: The external_id of this PositionDto.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PositionDto.


        :param external_id: The external_id of this PositionDto.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def position_type(self):
        """Gets the position_type of this PositionDto.  # noqa: E501


        :return: The position_type of this PositionDto.  # noqa: E501
        :rtype: LocatorInt32
        """
        return self._position_type

    @position_type.setter
    def position_type(self, position_type):
        """Sets the position_type of this PositionDto.


        :param position_type: The position_type of this PositionDto.  # noqa: E501
        :type: LocatorInt32
        """

        self._position_type = position_type

    @property
    def position_type_id(self):
        """Gets the position_type_id of this PositionDto.  # noqa: E501


        :return: The position_type_id of this PositionDto.  # noqa: E501
        :rtype: int
        """
        return self._position_type_id

    @position_type_id.setter
    def position_type_id(self, position_type_id):
        """Sets the position_type_id of this PositionDto.


        :param position_type_id: The position_type_id of this PositionDto.  # noqa: E501
        :type: int
        """

        self._position_type_id = position_type_id

    @property
    def contract(self):
        """Gets the contract of this PositionDto.  # noqa: E501


        :return: The contract of this PositionDto.  # noqa: E501
        :rtype: LocatorInt32
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this PositionDto.


        :param contract: The contract of this PositionDto.  # noqa: E501
        :type: LocatorInt32
        """

        self._contract = contract

    @property
    def contract_id(self):
        """Gets the contract_id of this PositionDto.  # noqa: E501


        :return: The contract_id of this PositionDto.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this PositionDto.


        :param contract_id: The contract_id of this PositionDto.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def title(self):
        """Gets the title of this PositionDto.  # noqa: E501


        :return: The title of this PositionDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PositionDto.


        :param title: The title of this PositionDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def hours_per_full_work_day(self):
        """Gets the hours_per_full_work_day of this PositionDto.  # noqa: E501


        :return: The hours_per_full_work_day of this PositionDto.  # noqa: E501
        :rtype: float
        """
        return self._hours_per_full_work_day

    @hours_per_full_work_day.setter
    def hours_per_full_work_day(self, hours_per_full_work_day):
        """Sets the hours_per_full_work_day of this PositionDto.


        :param hours_per_full_work_day: The hours_per_full_work_day of this PositionDto.  # noqa: E501
        :type: float
        """

        self._hours_per_full_work_day = hours_per_full_work_day

    @property
    def needs_replacement(self):
        """Gets the needs_replacement of this PositionDto.  # noqa: E501


        :return: The needs_replacement of this PositionDto.  # noqa: E501
        :rtype: int
        """
        return self._needs_replacement

    @needs_replacement.setter
    def needs_replacement(self, needs_replacement):
        """Sets the needs_replacement of this PositionDto.


        :param needs_replacement: The needs_replacement of this PositionDto.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and needs_replacement not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `needs_replacement` ({0}), must be one of {1}"  # noqa: E501
                .format(needs_replacement, allowed_values)
            )

        self._needs_replacement = needs_replacement

    @property
    def schedules(self):
        """Gets the schedules of this PositionDto.  # noqa: E501


        :return: The schedules of this PositionDto.  # noqa: E501
        :rtype: list[PositionScheduleDto]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this PositionDto.


        :param schedules: The schedules of this PositionDto.  # noqa: E501
        :type: list[PositionScheduleDto]
        """

        self._schedules = schedules

    @property
    def accounting_code_allocations(self):
        """Gets the accounting_code_allocations of this PositionDto.  # noqa: E501


        :return: The accounting_code_allocations of this PositionDto.  # noqa: E501
        :rtype: list[PositionAccountingCodeDto]
        """
        return self._accounting_code_allocations

    @accounting_code_allocations.setter
    def accounting_code_allocations(self, accounting_code_allocations):
        """Sets the accounting_code_allocations of this PositionDto.


        :param accounting_code_allocations: The accounting_code_allocations of this PositionDto.  # noqa: E501
        :type: list[PositionAccountingCodeDto]
        """

        self._accounting_code_allocations = accounting_code_allocations

    @property
    def replacement_criteria(self):
        """Gets the replacement_criteria of this PositionDto.  # noqa: E501


        :return: The replacement_criteria of this PositionDto.  # noqa: E501
        :rtype: ReplacementCriteriaDto
        """
        return self._replacement_criteria

    @replacement_criteria.setter
    def replacement_criteria(self, replacement_criteria):
        """Sets the replacement_criteria of this PositionDto.


        :param replacement_criteria: The replacement_criteria of this PositionDto.  # noqa: E501
        :type: ReplacementCriteriaDto
        """

        self._replacement_criteria = replacement_criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionDto):
            return True

        return self.to_dict() != other.to_dict()
