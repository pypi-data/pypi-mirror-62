"""Multi fastqc pipeline

Author: Thomas Cokelaer
Affiliation: Institut Pasteur @ 2019

This pipeline is part of Sequana software (sequana.readthedocs.io)

snakemake -s fastqc.rules --forceall --stats stats.txt --cores 4


"""
import sequana
from sequana import snaketools as sm
from sequana import sequana_data

#sm.init("fastqc.rules", globals())

# This must be defined before the include
configfile: "config.yaml"
#__snakefile__ = srcdir(__snakefile__)

# Generic include of some dynamic modules
exec(open(sequana.modules["fastqc_dynamic"], "r").read())

# A convenient manager
manager = sm.PipelineManager("fastqc", config)

rule pipeline:
    input: "multiqc/multiqc_report.html"


# FASTQC on input data set
__fastqc_samples__input_fastq = manager.getrawdata()
__fastqc_samples__output_done = "samples/{sample}/{sample}.done"
__fastqc_samples__wkdir       = "samples/{sample}" # manager.getwkdir("fastqc_samples")
__fastqc_samples__log = "samples/%s/fastqc.log" % manager.sample
include: fastqc_dynamic("samples", manager)



comments = """<p><b>Number of samples:</b> {}    <br><b>Paired data:</b> {}<br><b>Browse files here:</b>
<a href="../tree.html">tree</a>        """.format(
    len(manager.samples.keys()) , manager.paired)

from sequana_pipelines.fastqc import version as v2
from sequana import version as v1
comments += """<br><b><a href="https://sequana.readthedocs.io">Sequana version: </a></b>{}""".format(v1)
comments += """<br><b><a href="https://github.com/sequana/sequana_fastqc">Sequana_fastqc version: </a></b>{}</p>""".format(v2)


# Multiqc rule
__multiqc2__input = expand(__fastqc_samples__output_done, sample=manager.samples)
__multiqc2__logs = "multiqc/multiqc.log"
__multiqc2__output = "multiqc/multiqc_report.html"

__multiqc2__indir = config['multiqc']['indir']
__multiqc2__outdir = "multiqc"
__multiqc2__config = "multiqc_config.yaml"
# do not specify fastqc itself alone, otherwise it fails (feb 2020)
__multiqc2__modules = ""

config['multiqc']['options'] = config["multiqc"]["options"].replace("-f", " ") + \
                               " --comment \"{}\" ".format(comments)

include: sm.modules["multiqc2"]


# Those rules takes a couple of seconds so no need for a cluster
localrules: multiqc2


onsuccess:
    print("Please open the report index.html or {}".format(__multiqc2__output))
    shell("ln -f -s {} index.html".format(__multiqc2__output))
    shell("rm -f ./samples/*/*.done")
    shell("rm -f ./samples/*/*.log")
    shell("chmod -R g+w .")


    from sequana.utils.tree import HTMLDirectory
    hh = HTMLDirectory(".", pattern="fastqc.html")
    with open("tree.html", "w") as fout:
        fout.write(hh.get_html())

    print("A directory browser is stored in the file tree.html (Note the dot).")
    print("You may want to delete the .snakemake directory, fastqc.rules and config.yaml files.")
    print("To do so, you can use the Makefile by typing 'Makefile clean'")

    from sequana.snaketools import OnSuccessCleaner
    sc = OnSuccessCleaner()
    toremove = " slurm*out fastqc.rules config.yaml stats.txt"
    sc.files_to_remove.append(toremove)
    sc.add_makefile()
    print("Once done, please clean up the directory using\n'make clean'")

    with open(__multiqc2__output, "r") as fin:
        with open(__multiqc2__output+"2", "w") as fout:
            line = fin.readline()
            while line:
                if """<a href="http://multiqc.info" target="_blank">""" in     line:
                    line = fin.readline() # read the image
                    line = fin.readline() # read the ending </a> tag
                else:
                    fout.write(line)
                line = fin.readline() # read the next line
    shell("mv {} {}".format(__multiqc2__output +"2", __multiqc2__output))




onerror:
    print("An error occurred. See message above.")
