docs = {
    'ABS': 'ABS\nObtain the absolute value of an integer',
    'ADD': 'ADD\nAdd two numerical values',
    'ADDRESS': 'ADDRESS\nPush the address of a contract',
    'AMOUNT': 'AMOUNT\nPush the amount of the current transaction',
    'AND': 'AND\nBoolean and bitwise AND',
    'APPLY': 'APPLY\nPartially apply a tuplified function from the stack',
    'BALANCE': 'BALANCE\nPush the current amount of mutez of the executing contract',
    'BLAKE2B': 'BLAKE2B\nCompute a Blake2B cryptographic hash',
    'CAR': 'CAR\nAccess the left part of a pair',
    'CAST': '',
    'CDR': 'CDR\nAccess the right part of a pair',
    'CHAIN_ID': 'CHAIN_ID\nPush the chain identifier',
    'CHECK_SIGNATURE': 'CHECK_SIGNATURE\nVerify ``signature`` of ``bytes`` by ``key``',
    'COMPARE': 'COMPARE\nCompare two values',
    'CONCAT': 'CONCAT\nConcatenate a string, byte sequence, string list or byte sequence list',
    'CONS': 'CONS\nPrepend an element to a list',
    'CONTRACT': 'CONTRACT ty\nCast an address to a typed contract',
    'CREATE_ACCOUNT': '\nPush an account creation operation',
    'CREATE_CONTRACT': 'CREATE_CONTRACT ty1 ty2 code\nPush a contract creation operation',
    'DIG': 'DIG n\nRetrieve the ``n``\\ th element of the stack',
    'DIP': 'DIP n code\nRun code protecting the top of the stack',
    'DROP': 'DROP n\nDrop the top ``n`` elements of the stack',
    'DUG': 'DUG n\nInsert the top element at depth ``n``',
    'DUP': 'DUP\nDuplicate the top of the stack',
    'EDIV': 'EDIV\nEuclidean division',
    'EMPTY_BIG_MAP': 'EMPTY_BIG_MAP kty vty\nBuild a new, empty ``big_map`` from ``kty`` to ``vty``',
    'EMPTY_MAP': 'EMPTY_MAP kty vty\nBuild a new, empty ``map`` from ``kty`` to ``vty``',
    'EMPTY_SET': 'EMPTY_SET cty\nBuild a new, empty set for elements of type ``cty``',
    'EQ': 'EQ\nCheck that the top of the stack EQuals zero',
    'EXEC': 'EXEC\nExecute a function from the stack',
    'EXPAND': '',
    'FAILWITH': 'FAILWITH\nExplicitly abort the current program',
    'GE': 'GE\nCheck that the top of the stack is Greater Than or Equal to zero',
    'GET': 'GET\nAccess an element in a ``map`` or ``big_map``',
    'GT': 'GT\nCheck that the top of the stack is Greater Than zero',
    'HASH_KEY': 'HASH_KEY\nCompute the Base58Check of a public key',
    'IF': 'IF code1 code2\nConditional branching',
    'IF_CONS': 'IF_CONS code1 code2\nInspect a list',
    'IF_LEFT': 'IF_LEFT code1 code2\nInspect a value of a union',
    'IF_NONE': 'IF_NONE code1 code2\nInspect an optional value',
    'IMPLICIT_ACCOUNT': 'IMPLICIT_ACCOUNT\nCreate an implicit account',
    'INT': 'INT\nConvert a natural number to an integer',
    'ISNAT': 'ISNAT\nConvert a non-negative integer to a natural number',
    'ITER': 'ITER code\nIterate over a ``set``, ``list`` or ``map``',
    'LAMBDA': 'LAMBDA ty1 ty2 code\nPush a lambda onto the stack',
    'LE': 'LE\nCheck that the top of the stack is Less Than or Equal to zero',
    'LEFT': 'LEFT ty2\nWrap a value in a union (left case)',
    'LOOP': 'LOOP code\nA generic loop',
    'LOOP_LEFT': 'LOOP_LEFT code\nLoop with accumulator',
    'LSL': 'LSL\nLogically left shift a natural number',
    'LSR': 'LSR\nLogically right shift a natural number',
    'LT': 'LT\nCheck that the top of the stack is Less Than zero',
    'MAP': 'MAP code\nApply the body expression to each element of a ``list`` or ``map``.',
    'MEM': 'MEM\nCheck for the presence of a binding for a key in a ``map``, ``set`` or ``big_map``',
    'MUL': 'MUL\nMultiply two numerical values',
    'NEG': 'NEG\nNegate a numerical value',
    'NEQ': 'NEQ\nCheck that the top of the stack does Not EQual zero',
    'NIL': 'NIL ty1\nPush an empty list',
    'NONE': 'NONE ty1\nPush the absent optional value',
    'NOOP': '{}\nEmpty instruction sequence',
    'NOT': 'NOT\nBoolean negation and bitwise complement',
    'NOW': 'NOW\nPush block timestamp',
    'OR': 'OR\nBoolean and bitwise OR',
    'PACK': 'PACK\nSerialize data',
    'PAIR': "PAIR\nBuild a pair from the stack's top two elements",
    'PUSH': 'PUSH ty1 x\nPush a constant value of a given type onto the stack',
    'RENAME': '',
    'RIGHT': 'RIGHT ty1\nWrap a value in a union (right case)',
    'SELF': 'SELF\nPush the current contract',
    'SENDER': 'SENDER\nPush the contract that initiated the current internal transaction',
    'SEQ': 'code1 ; code2\nInstruction sequence',
    'SET_DELEGATE': 'SET_DELEGATE\nPush a delegation operation',
    'SHA256': 'SHA256\nCompute a SHA-256 cryptographic hash',
    'SHA512': 'SHA512\nCompute a SHA-512 cryptographic hash',
    'SIZE': 'SIZE\nObtain size of a ``string``, ``list``, ``set``, ``map`` or byte sequence',
    'SLICE': 'SLICE\nObtain a substring or subsequence of a ``string`` respectively byte sequence ``bytes``',
    'SOME': 'SOME\nWrap an existing optional value',
    'SOURCE': 'SOURCE\nPush the contract that initiated the current transaction',
    'STEPS_TO_QUOTA': '\nPush the remaining steps before the contract execution must terminate',
    'SUB': 'SUB\nSubtract two numerical values',
    'SWAP': 'SWAP\nSwap the top two elements of the stack',
    'TOP': '',
    'TRANSFER_TOKENS': 'TRANSFER_TOKENS\nPush a transaction operation',
    'UNIT': 'UNIT\nPush the unit value onto the stack',
    'UNPACK': 'UNPACK ty1\nDeserialize data, if valid',
    'UPDATE': 'UPDATE\nAdd or remove an element in a ``map``, ``big_map`` or ``set``',
    'XOR': 'XOR\nBoolean and bitwise eXclusive OR',
    'address': 'address\nAddress of an untyped contract',
    'big_map': 'big_map kty vty\nA lazily deserialized map from ``kty`` to ``vty``',
    'bool': 'bool\nA boolean',
    'bytes': 'bytes\nA sequence of bytes',
    'chain_id': 'chain_id\nA chain identifier',
    'contract': "contract type\nAddress of a contract, where `type` is the contract's parameter type",
    'int': 'int\nAn arbitrary-precision integer',
    'key': 'key\nA public cryptography key',
    'key_hash': 'key_hash\nA hash of a public cryptography key',
    'lambda': 'lambda ty1 ty2\nA lambda with given parameter and return types',
    'list': 'list type\nA single, immutable, homogeneous linked list',
    'map': 'map kty vty\nAn immutable map from ``kty`` to ``vty``',
    'mutez': 'mutez\nA specific type for manipulating tokens',
    'nat': 'nat\nAn arbitrary-precision natural number',
    'operation': 'operation\nAn internal operation emitted by a contract',
    'option': 'option type\nAn optional value',
    'or': 'or ty1 ty2\nA union of two types',
    'pair': 'pair ty1 ty2\nA pair of values',
    'set': 'set cty\nAn immutable set of comparable values of type ``cty``',
    'signature': 'signature\nA cryptographic signature',
    'string': 'string\nA string of characters',
    'timestamp': 'timestamp\nA real-world date',
    'unit': 'unit\nThe type whose only value is ``Unit``'}
