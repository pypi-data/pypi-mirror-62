# CMake generated Testfile for 
# Source directory: /home/karban/Projects/agros2d-dealii/resources/python
# Build directory: /home/karban/Projects/agros2d-dealii/resources/python
# 
# This file includes the relevant testing commands required for 
# testing this directory and lists subdirectories to be tested as well.
add_test(tests.fields.electrostatic.TestElectrostaticPlanar "python3" "-m" "unittest" "tests.fields.electrostatic.TestElectrostaticPlanar")
set_tests_properties(tests.fields.electrostatic.TestElectrostaticPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.electrostatic.TestElectrostaticAxisymmetric "python3" "-m" "unittest" "tests.fields.electrostatic.TestElectrostaticAxisymmetric")
set_tests_properties(tests.fields.electrostatic.TestElectrostaticAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.current.TestCurrentPlanar "python3" "-m" "unittest" "tests.fields.current.TestCurrentPlanar")
set_tests_properties(tests.fields.current.TestCurrentPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.current.TestCurrentAxisymmetric "python3" "-m" "unittest" "tests.fields.current.TestCurrentAxisymmetric")
set_tests_properties(tests.fields.current.TestCurrentAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.elasticity.TestElasticityPlanar "python3" "-m" "unittest" "tests.fields.elasticity.TestElasticityPlanar")
set_tests_properties(tests.fields.elasticity.TestElasticityPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.elasticity.TestElasticityAxisymmetric "python3" "-m" "unittest" "tests.fields.elasticity.TestElasticityAxisymmetric")
set_tests_properties(tests.fields.elasticity.TestElasticityAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.flow.TestFlowPlanar "python3" "-m" "unittest" "tests.fields.flow.TestFlowPlanar")
set_tests_properties(tests.fields.flow.TestFlowPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.flow.TestFlowAxisymmetric "python3" "-m" "unittest" "tests.fields.flow.TestFlowAxisymmetric")
set_tests_properties(tests.fields.flow.TestFlowAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.acoustic.TestAcousticHarmonicPlanar "python3" "-m" "unittest" "tests.fields.acoustic.TestAcousticHarmonicPlanar")
set_tests_properties(tests.fields.acoustic.TestAcousticHarmonicPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.acoustic.TestAcousticHarmonicAxisymmetric "python3" "-m" "unittest" "tests.fields.acoustic.TestAcousticHarmonicAxisymmetric")
set_tests_properties(tests.fields.acoustic.TestAcousticHarmonicAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.heat.TestHeatPlanar "python3" "-m" "unittest" "tests.fields.heat.TestHeatPlanar")
set_tests_properties(tests.fields.heat.TestHeatPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.heat.TestHeatAxisymmetric "python3" "-m" "unittest" "tests.fields.heat.TestHeatAxisymmetric")
set_tests_properties(tests.fields.heat.TestHeatAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.heat.TestHeatNonlinPlanarNewton "python3" "-m" "unittest" "tests.fields.heat.TestHeatNonlinPlanarNewton")
set_tests_properties(tests.fields.heat.TestHeatNonlinPlanarNewton PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.heat.TestHeatNonlinPlanarPicard "python3" "-m" "unittest" "tests.fields.heat.TestHeatNonlinPlanarPicard")
set_tests_properties(tests.fields.heat.TestHeatNonlinPlanarPicard PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.heat.TestHeatTransientAxisymmetric "python3" "-m" "unittest" "tests.fields.heat.TestHeatTransientAxisymmetric")
set_tests_properties(tests.fields.heat.TestHeatTransientAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.magnetic_steady.TestMagneticPlanar "python3" "-m" "unittest" "tests.fields.magnetic_steady.TestMagneticPlanar")
set_tests_properties(tests.fields.magnetic_steady.TestMagneticPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.magnetic_steady.TestMagneticAxisymmetric "python3" "-m" "unittest" "tests.fields.magnetic_steady.TestMagneticAxisymmetric")
set_tests_properties(tests.fields.magnetic_steady.TestMagneticAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.magnetic_harmonic.TestMagneticHarmonicPlanar "python3" "-m" "unittest" "tests.fields.magnetic_harmonic.TestMagneticHarmonicPlanar")
set_tests_properties(tests.fields.magnetic_harmonic.TestMagneticHarmonicPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.magnetic_harmonic.TestMagneticHarmonicAxisymmetric "python3" "-m" "unittest" "tests.fields.magnetic_harmonic.TestMagneticHarmonicAxisymmetric")
set_tests_properties(tests.fields.magnetic_harmonic.TestMagneticHarmonicAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.magnetic_steady.TestMagneticNonlinPlanar "python3" "-m" "unittest" "tests.fields.magnetic_steady.TestMagneticNonlinPlanar")
set_tests_properties(tests.fields.magnetic_steady.TestMagneticNonlinPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.magnetic_steady.TestMagneticNonlinAxisymmetric "python3" "-m" "unittest" "tests.fields.magnetic_steady.TestMagneticNonlinAxisymmetric")
set_tests_properties(tests.fields.magnetic_steady.TestMagneticNonlinAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.rf_te.TestRFTEHarmonicPlanar "python3" "-m" "unittest" "tests.fields.rf_te.TestRFTEHarmonicPlanar")
set_tests_properties(tests.fields.rf_te.TestRFTEHarmonicPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.rf_te.TestRFTEHarmonicAxisymmetric "python3" "-m" "unittest" "tests.fields.rf_te.TestRFTEHarmonicAxisymmetric")
set_tests_properties(tests.fields.rf_te.TestRFTEHarmonicAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.rf_tm.TestRFTMHarmonicPlanar "python3" "-m" "unittest" "tests.fields.rf_tm.TestRFTMHarmonicPlanar")
set_tests_properties(tests.fields.rf_tm.TestRFTMHarmonicPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.rf_tm.TestRFTMHarmonicAxisymmetric "python3" "-m" "unittest" "tests.fields.rf_tm.TestRFTMHarmonicAxisymmetric")
set_tests_properties(tests.fields.rf_tm.TestRFTMHarmonicAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.math_coeff.TestMathCoeffPlanar "python3" "-m" "unittest" "tests.fields.math_coeff.TestMathCoeffPlanar")
set_tests_properties(tests.fields.math_coeff.TestMathCoeffPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.fields.math_coeff.TestMathCoeffAxisymmetric "python3" "-m" "unittest" "tests.fields.math_coeff.TestMathCoeffAxisymmetric")
set_tests_properties(tests.fields.math_coeff.TestMathCoeffAxisymmetric PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.adaptivity.adaptivity.TestAdaptivityElectrostatic "python3" "-m" "unittest" "tests.adaptivity.adaptivity.TestAdaptivityElectrostatic")
set_tests_properties(tests.adaptivity.adaptivity.TestAdaptivityElectrostatic PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.adaptivity.adaptivity.TestAdaptivityAcoustic "python3" "-m" "unittest" "tests.adaptivity.adaptivity.TestAdaptivityAcoustic")
set_tests_properties(tests.adaptivity.adaptivity.TestAdaptivityAcoustic PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.adaptivity.adaptivity.TestAdaptivityElasticityBracket "python3" "-m" "unittest" "tests.adaptivity.adaptivity.TestAdaptivityElasticityBracket")
set_tests_properties(tests.adaptivity.adaptivity.TestAdaptivityElasticityBracket PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.adaptivity.adaptivity.TestAdaptivityMagneticProfileConductor "python3" "-m" "unittest" "tests.adaptivity.adaptivity.TestAdaptivityMagneticProfileConductor")
set_tests_properties(tests.adaptivity.adaptivity.TestAdaptivityMagneticProfileConductor PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.adaptivity.adaptivity.TestAdaptivityHLenses "python3" "-m" "unittest" "tests.adaptivity.adaptivity.TestAdaptivityHLenses")
set_tests_properties(tests.adaptivity.adaptivity.TestAdaptivityHLenses PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.particle_tracing.particle_tracing.TestParticleTracingPlanar "python3" "-m" "unittest" "tests.particle_tracing.particle_tracing.TestParticleTracingPlanar")
set_tests_properties(tests.particle_tracing.particle_tracing.TestParticleTracingPlanar PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic1WeakWeak "python3" "-m" "unittest" "tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic1WeakWeak")
set_tests_properties(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic1WeakWeak PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic2Weak "python3" "-m" "unittest" "tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic2Weak")
set_tests_properties(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic2Weak PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic3WeakWeak "python3" "-m" "unittest" "tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic3WeakWeak")
set_tests_properties(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic3WeakWeak PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic4Weak "python3" "-m" "unittest" "tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic4Weak")
set_tests_properties(tests.coupled_problems.basic_coupled_problems.TestCoupledProblemsBasic4Weak PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.coupled_problems.unrealistic_coupled_problems.TestCoupledProblemsManyDomainsWeakWeak "python3" "-m" "unittest" "tests.coupled_problems.unrealistic_coupled_problems.TestCoupledProblemsManyDomainsWeakWeak")
set_tests_properties(tests.coupled_problems.unrealistic_coupled_problems.TestCoupledProblemsManyDomainsWeakWeak PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.core.matrix_solvers.TestMatrixSolversInternal "python3" "-m" "unittest" "tests.core.matrix_solvers.TestMatrixSolversInternal")
set_tests_properties(tests.core.matrix_solvers.TestMatrixSolversInternal PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.optilab.studies.TestNSGA2Sphere "python3" "-m" "unittest" "tests.optilab.studies.TestNSGA2Sphere")
set_tests_properties(tests.optilab.studies.TestNSGA2Sphere PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.optilab.studies.TestNSGA3Sphere "python3" "-m" "unittest" "tests.optilab.studies.TestNSGA3Sphere")
set_tests_properties(tests.optilab.studies.TestNSGA3Sphere PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.optilab.studies.TestLimboSphere "python3" "-m" "unittest" "tests.optilab.studies.TestLimboSphere")
set_tests_properties(tests.optilab.studies.TestLimboSphere PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.optilab.studies.TestBayesOptBooth "python3" "-m" "unittest" "tests.optilab.studies.TestBayesOptBooth")
set_tests_properties(tests.optilab.studies.TestBayesOptBooth PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.optilab.studies.TestNLoptBooth "python3" "-m" "unittest" "tests.optilab.studies.TestNLoptBooth")
set_tests_properties(tests.optilab.studies.TestNLoptBooth PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestField "python3" "-m" "unittest" "tests.script.field.TestField")
set_tests_properties(tests.script.field.TestField PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldAdaptivity "python3" "-m" "unittest" "tests.script.field.TestFieldAdaptivity")
set_tests_properties(tests.script.field.TestFieldAdaptivity PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldAdaptivityInfo "python3" "-m" "unittest" "tests.script.field.TestFieldAdaptivityInfo")
set_tests_properties(tests.script.field.TestFieldAdaptivityInfo PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldBoundaries "python3" "-m" "unittest" "tests.script.field.TestFieldBoundaries")
set_tests_properties(tests.script.field.TestFieldBoundaries PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldIntegrals "python3" "-m" "unittest" "tests.script.field.TestFieldIntegrals")
set_tests_properties(tests.script.field.TestFieldIntegrals PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldLocalValues "python3" "-m" "unittest" "tests.script.field.TestFieldLocalValues")
set_tests_properties(tests.script.field.TestFieldLocalValues PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldMaterials "python3" "-m" "unittest" "tests.script.field.TestFieldMaterials")
set_tests_properties(tests.script.field.TestFieldMaterials PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldMatrixSolver "python3" "-m" "unittest" "tests.script.field.TestFieldMatrixSolver")
set_tests_properties(tests.script.field.TestFieldMatrixSolver PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldNewtonSolver "python3" "-m" "unittest" "tests.script.field.TestFieldNewtonSolver")
set_tests_properties(tests.script.field.TestFieldNewtonSolver PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.field.TestFieldSolverInfo "python3" "-m" "unittest" "tests.script.field.TestFieldSolverInfo")
set_tests_properties(tests.script.field.TestFieldSolverInfo PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.geometry.TestGeometry "python3" "-m" "unittest" "tests.script.geometry.TestGeometry")
set_tests_properties(tests.script.geometry.TestGeometry PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.geometry.TestGeometryTransformations "python3" "-m" "unittest" "tests.script.geometry.TestGeometryTransformations")
set_tests_properties(tests.script.geometry.TestGeometryTransformations PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.problem.TestProblem "python3" "-m" "unittest" "tests.script.problem.TestProblem")
set_tests_properties(tests.script.problem.TestProblem PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.problem.TestProblemSolution "python3" "-m" "unittest" "tests.script.problem.TestProblemSolution")
set_tests_properties(tests.script.problem.TestProblemSolution PROPERTIES  WORKING_DIRECTORY ".")
add_test(tests.script.problem.TestProblemTime "python3" "-m" "unittest" "tests.script.problem.TestProblemTime")
set_tests_properties(tests.script.problem.TestProblemTime PROPERTIES  WORKING_DIRECTORY ".")
