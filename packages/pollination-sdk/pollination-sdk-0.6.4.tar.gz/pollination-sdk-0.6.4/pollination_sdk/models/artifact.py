# coding: utf-8

"""
    Pollination Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.3.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class Artifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'location': 'str',
        'source_path': 'str',
        'path': 'str',
        'description': 'str',
        'headers': 'dict(str, str)',
        'verb': 'str'
    }

    attribute_map = {
        'name': 'name',
        'location': 'location',
        'source_path': 'source_path',
        'path': 'path',
        'description': 'description',
        'headers': 'headers',
        'verb': 'verb'
    }

    def __init__(self, name=None, location=None, source_path=None, path=None, description=None, headers=None, verb=None, local_vars_configuration=None):  # noqa: E501
        """Artifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._location = None
        self._source_path = None
        self._path = None
        self._description = None
        self._headers = None
        self._verb = None
        self.discriminator = None

        self.name = name
        if location is not None:
            self.location = location
        if source_path is not None:
            self.source_path = source_path
        if path is not None:
            self.path = path
        if description is not None:
            self.description = description
        if headers is not None:
            self.headers = headers
        if verb is not None:
            self.verb = verb

    @property
    def name(self):
        """Gets the name of this Artifact.  # noqa: E501

        Name of the artifact. Must be unique within a task's inputs / outputs.  # noqa: E501

        :return: The name of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.

        Name of the artifact. Must be unique within a task's inputs / outputs.  # noqa: E501

        :param name: The name of this Artifact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this Artifact.  # noqa: E501

        Name of the artifact_location to source this artifact from.  # noqa: E501

        :return: The location of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Artifact.

        Name of the artifact_location to source this artifact from.  # noqa: E501

        :param location: The location of this Artifact.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def source_path(self):
        """Gets the source_path of this Artifact.  # noqa: E501

        Path to the artifact in a url or S3 bucket.  # noqa: E501

        :return: The source_path of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this Artifact.

        Path to the artifact in a url or S3 bucket.  # noqa: E501

        :param source_path: The source_path of this Artifact.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def path(self):
        """Gets the path of this Artifact.  # noqa: E501

        Path to the artifact relative to the run-folder artifact location.  # noqa: E501

        :return: The path of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Artifact.

        Path to the artifact relative to the run-folder artifact location.  # noqa: E501

        :param path: The path of this Artifact.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def description(self):
        """Gets the description of this Artifact.  # noqa: E501

        Optional description for input parameter.  # noqa: E501

        :return: The description of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Artifact.

        Optional description for input parameter.  # noqa: E501

        :param description: The description of this Artifact.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def headers(self):
        """Gets the headers of this Artifact.  # noqa: E501

        An object with Key Value pairs of HTTP headers. For artifacts from URL location only.  # noqa: E501

        :return: The headers of this Artifact.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Artifact.

        An object with Key Value pairs of HTTP headers. For artifacts from URL location only.  # noqa: E501

        :param headers: The headers of this Artifact.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def verb(self):
        """Gets the verb of this Artifact.  # noqa: E501

        The HTTP verb to use when making the request. For artifacts from URL location only.  # noqa: E501

        :return: The verb of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this Artifact.

        The HTTP verb to use when making the request. For artifacts from URL location only.  # noqa: E501

        :param verb: The verb of this Artifact.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST", "PUT", "PATCH", "DELETE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and verb not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `verb` ({0}), must be one of {1}"  # noqa: E501
                .format(verb, allowed_values)
            )

        self._verb = verb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Artifact):
            return True

        return self.to_dict() != other.to_dict()
