# coding: utf-8

"""
    Amun API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from amun.swagger_client.configuration import Configuration


class InspectionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inspection_id': 'str',
        'parameters': 'object',
        'workflow_id': 'str',
        'workflow_target': 'str'
    }

    attribute_map = {
        'inspection_id': 'inspection_id',
        'parameters': 'parameters',
        'workflow_id': 'workflow_id',
        'workflow_target': 'workflow_target'
    }

    def __init__(self, inspection_id=None, parameters=None, workflow_id=None, workflow_target=None, local_vars_configuration=None):  # noqa: E501
        """InspectionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._inspection_id = None
        self._parameters = None
        self._workflow_id = None
        self._workflow_target = None
        self.discriminator = None

        self.inspection_id = inspection_id
        self.parameters = parameters
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if workflow_target is not None:
            self.workflow_target = workflow_target

    @property
    def inspection_id(self):
        """Gets the inspection_id of this InspectionResponse.  # noqa: E501

        An id of the submitted inspection for checking its status and its results.  # noqa: E501

        :return: The inspection_id of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_id

    @inspection_id.setter
    def inspection_id(self, inspection_id):
        """Sets the inspection_id of this InspectionResponse.

        An id of the submitted inspection for checking its status and its results.  # noqa: E501

        :param inspection_id: The inspection_id of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and inspection_id is None:  # noqa: E501
            raise ValueError("Invalid value for `inspection_id`, must not be `None`")  # noqa: E501

        self._inspection_id = inspection_id

    @property
    def parameters(self):
        """Gets the parameters of this InspectionResponse.  # noqa: E501

        Parameters echoed back to user (with default parameters if omitted).  # noqa: E501

        :return: The parameters of this InspectionResponse.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InspectionResponse.

        Parameters echoed back to user (with default parameters if omitted).  # noqa: E501

        :param parameters: The parameters of this InspectionResponse.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def workflow_id(self):
        """Gets the workflow_id of this InspectionResponse.  # noqa: E501

        An id of the submitted Workflow for checking its status and its results.  # noqa: E501

        :return: The workflow_id of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this InspectionResponse.

        An id of the submitted Workflow for checking its status and its results.  # noqa: E501

        :param workflow_id: The workflow_id of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def workflow_target(self):
        """Gets the workflow_target of this InspectionResponse.  # noqa: E501


        :return: The workflow_target of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._workflow_target

    @workflow_target.setter
    def workflow_target(self, workflow_target):
        """Sets the workflow_target of this InspectionResponse.


        :param workflow_target: The workflow_target of this InspectionResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["inspection-build", "inspection-run-result"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and workflow_target not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `workflow_target` ({0}), must be one of {1}"  # noqa: E501
                .format(workflow_target, allowed_values)
            )

        self._workflow_target = workflow_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InspectionResponse):
            return True

        return self.to_dict() != other.to_dict()
