automatontools.browserServer
=======================
Present the browserServer utility for Selenium automaton.

The browserServer is an object which purpose is to serve a selenium web driver.
The object comes with a set of methods.

The constructor will set default attributes. At this stage the browserServer won't be usable.

Create a browserServer
-----------------------
    >>> from eaiautomatontools.browserServer import BrowserServer

    >>> myBrowser = BrowserServer()

Without settings the server is not usable
    >>> myBrowser.serve()
    Traceback (most recent call last):
    ...
    ValueError: Browser type not defined. Could be one of '['chrome', 'firefox', '32', '64', 'ie', 'edge', 'safari']'

Setting the browser settings
-----------------------
There is two ways to set the browserServer.
1- Give the data as a dictionary
2- Give each value separately

The expected dictionary is {"type": <browser>, "version": <version>}
Setting with a tuple doesn't work and raise a TypeError exception
    >>> myBrowser.set_browser_type(browser_type=("chrome","32"))
    Traceback (most recent call last):
    ...
    TypeError: name and version cannot be None or browser_type cannot be None or not a dictionary

Setting with a dictionary without the type and version keys raises a KeyError exception
    >>> myBrowser.set_browser_type(browser_type={"browser":"chrome","version":"32"})
    Traceback (most recent call last):
    ...
    KeyError: 'browser is defined by his name and his version (32, 64bits)'

Setting with a dictionary with valid keys but wrong value raises a KeyError exception
    >>> myBrowser.set_browser_type(browser_type={"name":"chroma","version":"32"})
    Traceback (most recent call last):
    ...
    KeyError: 'browser is defined by his name and his version (32, 64bits)'

BEWARE browser should be one of chrome, firefox, ie, edge and safari (case sensitive)!!!
    >>> myBrowser.set_browser_type(browser_type={"name":"Chrome","version":"32"})
    Traceback (most recent call last):
    ...
    KeyError: 'browser is defined by his name and his version (32, 64bits)'

    >>> myBrowser.set_browser_type(browser_type={"name":"chrome","version":"32"})
    0

Alternatively you can set the browser type using the two attributes name and version with the same constrains i.e
the name is one of chrome, firefox, ie, edge and safari (case sensitive) and version is either 32 or 64.
    >>> myBrowser.set_browser_type(name="chrome", version="32")
    0

At this moment you can serve a selenium web driver

Serve a web driver
---------------------------
    >>> myBrowser.serve()
    0

Get the web driver
---------------------------
    >>> mydriver = myBrowser.get()

    >>> type(mydriver)
    <class 'selenium.webdriver.chrome.webdriver.WebDriver'>

Close a web driver
----------------------------
When closing you discard the web driver. However you can re-serve a new driver at any time.
    >>> myBrowser.close()
    0

    >>> mydriver = myBrowser.get()

    >>> type(mydriver)
    <class 'NoneType'>

    >>> myBrowser.serve()
    0

    >>> mydriver = myBrowser.get()

    >>> type(mydriver)
    <class 'selenium.webdriver.chrome.webdriver.WebDriver'>

Go to an URL
----------------------------
From the browserServer object you can do one basic thing navigate to a specific URL.
    >>> myBrowser.go_to(url="http://google.com")
    0

Teardown
------------------------------
    >>> myBrowser.close()
    0

    >>> myBrowser = None

