automatontools.alerts.intercept_alert
=======================
Present the alert utilities for Selenium automaton.
The intercept_alert method catches an alert popup (alert, confirm or prompt) and interact with it.
We can either accept/dismiss the alert, check the alert message, input a text in a prompt.

After using this method the alert is closed.

Background
------------------------
Launch a test web server serving controlled web pages on localhost port 8081

Use the python resources server.

    >>> from automatontools.resources.server import TestServer

    >>> myserver = TestServer()

    >>> myserver.start()

Instantiate a web driver using the eaiautomatontools.browserServer

    >>> from automatontools.browserServer import BrowserServer

    >>> myWebDriver = BrowserServer()

Use a default browser such as Chrome in 32 bit version

    >>> myWebDriver.set_browser_type(name="chrome", version="32")
    0

Serve the web driver
    >>> myWebDriver.serve()
    0

Open the form test page
    >>> myWebDriver.go_to("http://127.0.0.1:8081")
    0

Import the click tool
    >>> from eaiautomatontools.actions import click_element

Import the element_text tool
    >>> from eaiautomatontools.information import element_text

Import the alerts tools
    >>> from eaiautomatontools.alerts import intercept_alert


Nominal case: give a web driver, give a valid fields
------------------------------------
a - Alerts - javascript window.alert(message) command
Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_alert"})
    0

Accept the alert without any check
    >>> intercept_alert(driver=myWebDriver.get())
    0

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_alert"})
    0

Accept the alert if the message is correct
    >>> intercept_alert(driver=myWebDriver.get(), messages=["A message from an alert.\nAnd a second line.",])
    0

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_alert"})
    0

Dismiss the alert
    >>> intercept_alert(driver=myWebDriver.get(), accept=False )
    0

b - Confirms - javascript window.confirm(message) command
Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_confirm"})
    0

Accept the alert without any check
    >>> intercept_alert(driver=myWebDriver.get())
    0

The page displays "Confirmed"
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    'Confirmed'

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_confirm"})
    0

Accept the alert if the message is correct
    >>> intercept_alert(driver=myWebDriver.get(), messages=["A message from an alert.\nAnd a second line.",])
    0

The page displays "Confirmed"
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    'Confirmed'

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_confirm"})
    0

Dismiss the alert
    >>> intercept_alert(driver=myWebDriver.get(), accept=False )
    0

The page displays "Cancelled"
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    'Cancelled'

c - Prompt - javascript window.prompt(message,default) command
Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_prompt"})
    0

Accept the alert without any check
    >>> intercept_alert(driver=myWebDriver.get())
    0

The page displays the prompt default message
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    'A default message'

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_prompt"})
    0

Dismiss the alert without any check
    >>> intercept_alert(driver=myWebDriver.get(), accept=False)
    0

The page displays no message
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    ''

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_prompt"})
    0

Accept the alert checking its content
    >>> intercept_alert(driver=myWebDriver.get(), messages=["A message from an alert.\nAnd a second line.",])
    0

The page displays the prompt default message
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    'A default message'


Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_prompt"})
    0

Dismiss the alert checking its content
    >>> intercept_alert(driver=myWebDriver.get(), messages=["A message from an alert.\nAnd a second line.",], accept=False)
    0

The page displays no message
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    ''

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_prompt"})
    0

Enter "My prompt is rich." in the alert and accept the alert
    >>> intercept_alert(driver=myWebDriver.get(), value="My prompt is rich.")
    0

The page displays the entered message
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    'My prompt is rich.'

Open the alert pop up
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_prompt"})
    0

Enter "My prompt is rich." in the alert and dismiss the alert
    >>> intercept_alert(driver=myWebDriver.get(), value="My prompt is rich.", accept=False)
    0

The page displays no message
    >>> element_text(driver=myWebDriver.get(), field={"type":"id","value":"prompt_return"})
    ''

Assertions
------------------------------------
1- The web driver is mandatory
    >>> intercept_alert(value="My prompt is rich.", accept=False)
    Traceback (most recent call last):
    ...
    AssertionError: Driver is expected.

2- The messages must be a string list
    >>> intercept_alert(driver=myWebDriver.get(), messages="toto")
    Traceback (most recent call last):
    ...
    AssertionError: Messages should be a list or None

3- The accept is a boolean
    >>> intercept_alert(driver=myWebDriver.get(), accept="True")
    Traceback (most recent call last):
    ...
    AssertionError: Accept is boolean True or False

4- Value is a string
    >>> intercept_alert(driver=myWebDriver.get(), value=True)
    Traceback (most recent call last):
    ...
    AssertionError: Value is None or a string

Exceptions
-------------------------------------
    >>> click_element(driver=myWebDriver.get(), field={"type":"id", "value":"button_alert"})
    0

a - We raise an Exception if the alert is not one of the listed message.
    >>> intercept_alert(driver=myWebDriver.get(), messages=["toto",])
    Traceback (most recent call last):
    ...
    Exception: Message not found

b -  We raise an ElementNotSelectableException if we try to enter a value in an alert which isn't a prompt.
    >>> intercept_alert(driver=myWebDriver.get(), value="toto" )
    Traceback (most recent call last):
    ...
    selenium.common.exceptions.ElementNotSelectableException: Message: Can't fill the alert popup with 'toto' as there is no input field.
    <BLANKLINE>

    >>> intercept_alert(driver=myWebDriver.get())
    0

c - There is no alert to interact with.
    >>> intercept_alert(driver=myWebDriver.get())
    Traceback (most recent call last):
    ...
    selenium.common.exceptions.NoAlertPresentException: Message: Can't interact with an alert as there is no displayed alert
    <BLANKLINE>

Teardown
------------------------------
    >>> myWebDriver.close()
    0

    >>> myWebDriver = None

    >>> myserver.stop()

    >>> myserver = None
