# coding: utf-8

"""
    3Di API

    3Di simulation API (latest version: 3.0)   Framework release: 0.0.33   3Di core release: 2.0.4  deployed on:  03:28PM (UTC) on February 03, 2020  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OrganisationRole(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'user_name': 'str',
        'role_name': 'str',
        'organisation_unique_id': 'str',
        'organisation_name': 'str'
    }

    attribute_map = {
        'url': 'url',
        'user_name': 'user_name',
        'role_name': 'role_name',
        'organisation_unique_id': 'organisation_unique_id',
        'organisation_name': 'organisation_name'
    }

    def __init__(self, url=None, user_name=None, role_name=None, organisation_unique_id=None, organisation_name=None, local_vars_configuration=None):  # noqa: E501
        """OrganisationRole - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._url = None
        self._user_name = None
        self._role_name = None
        self._organisation_unique_id = None
        self._organisation_name = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if user_name is not None:
            self.user_name = user_name
        if role_name is not None:
            self.role_name = role_name
        if organisation_unique_id is not None:
            self.organisation_unique_id = organisation_unique_id
        if organisation_name is not None:
            self.organisation_name = organisation_name

    @property
    def url(self):
        """Gets the url of this OrganisationRole.  # noqa: E501


        :return: The url of this OrganisationRole.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrganisationRole.


        :param url: The url of this OrganisationRole.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_name(self):
        """Gets the user_name of this OrganisationRole.  # noqa: E501


        :return: The user_name of this OrganisationRole.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this OrganisationRole.


        :param user_name: The user_name of this OrganisationRole.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def role_name(self):
        """Gets the role_name of this OrganisationRole.  # noqa: E501


        :return: The role_name of this OrganisationRole.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this OrganisationRole.


        :param role_name: The role_name of this OrganisationRole.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def organisation_unique_id(self):
        """Gets the organisation_unique_id of this OrganisationRole.  # noqa: E501


        :return: The organisation_unique_id of this OrganisationRole.  # noqa: E501
        :rtype: str
        """
        return self._organisation_unique_id

    @organisation_unique_id.setter
    def organisation_unique_id(self, organisation_unique_id):
        """Sets the organisation_unique_id of this OrganisationRole.


        :param organisation_unique_id: The organisation_unique_id of this OrganisationRole.  # noqa: E501
        :type: str
        """

        self._organisation_unique_id = organisation_unique_id

    @property
    def organisation_name(self):
        """Gets the organisation_name of this OrganisationRole.  # noqa: E501


        :return: The organisation_name of this OrganisationRole.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this OrganisationRole.


        :param organisation_name: The organisation_name of this OrganisationRole.  # noqa: E501
        :type: str
        """

        self._organisation_name = organisation_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationRole):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganisationRole):
            return True

        return self.to_dict() != other.to_dict()
