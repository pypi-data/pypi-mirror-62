# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['flirror', 'flirror.crawler']

package_data = \
{'': ['*'],
 'flirror': ['static/*',
             'static/css/*',
             'static/font/*',
             'static/scss/*',
             'templates/*',
             'templates/modules/*']}

install_requires = \
['Flask-Assets>=2.0,<3.0',
 'Pillow>=7.0.0,<8.0.0',
 'alpha_vantage>=2.1.3,<3.0.0',
 'arrow>=0.15.5,<0.16.0',
 'click>=7.0,<8.0',
 'feedparser>=5.2.1,<6.0.0',
 'flask>=1.1.1,<2.0.0',
 'google-api-python-client>=1.7.11,<2.0.0',
 'google-auth-httplib2>=0.0.3,<0.0.4',
 'google-auth-oauthlib>=0.4.1,<0.5.0',
 'pony>=0.7.11,<0.8.0',
 'pyScss>=1.3.5,<2.0.0',
 'pyowm>=2.10.0,<3.0.0',
 'qrcode>=6.1,<7.0',
 'schedule>=0.6.0,<0.7.0']

entry_points = \
{'console_scripts': ['flirror-crawler = flirror.crawler.main:main',
                     'flirror-web = flirror:run_web']}

setup_kwargs = {
    'name': 'flirror',
    'version': '1.0.0',
    'description': 'A smartmirror based on Flask',
    'long_description': '# Flirror - A smartmirror based on Flask\n\nFlirror is a modular smartmirror application developed in Python. It consists of\na simple webserver based on [Flask](https://palletsprojects.com/p/flask/) which\nholds the UI and a command line application that retrieves information from\ndifferent APIs (e.g. OpenWeather, Google Calendar, ...). Currently, there is\nonly a small set of available [modules](#available-modules), but I\'m planning to\nadd some more (see [planned features and ideas](#planned-features-and-ideas)).\n\nDespite the number of commits, this project is still in an early phase, so I\'m\nhappy about any contribution!\n\n---\n\n*Contents:*\n**[Motivation](#motivation)** |\n**[Architecture](#architecture)** |\n**[Usage](#usage)** |\n**[Available Modules](#available-modules)** |\n**[Deploy on Raspberry](#deploy-flirror-on-a-raspberry-pi)** |\n**[Planned features and ideas](#planned-features-and-ideas)** |\n\n---\n\n## Motivation\n\nI mainly started this project because I wanted to build a smartmirror using a\nRaspberry Pi. I searched for existing projects and found a few, but none of them\nreally suited my needs. There are a few smaller ones developed in Python, but\nmost of them don\'t seem to be actively maintaned anymore. A very public one I\nfound is for sure\n[MagicMirror<sup>2</sup>](https://github.com/MichMich/MagicMirror). I think,\nthis is a really awesome project - taking a look at all the customizable parts,\ncontributions and custom modules that were developed in the meantime. I\'m just\nnot much of a JavaScript developer and don\'t like the idea of having everything\nin a single application.\n\nBut I got inspired by the features it provides and decided to develop my own\nsmartmirror in Python. Maybe someone else in the Python community is also\ninterested in a project like this.\n\n## Architecture\n\nFlirror mainly consists of two components - a webserver based on Flask and a\ncommand line application, the so called "crawler" that retrieves data from\ndifferent APIs/backends (whatever you want to call it).\n\n### flirror-web\n\nThe webserver is mainly used to show the information that is retrieved by the\ncrawlers. Currently, it doesn\'t allow any "interaction" from a user side. But\nmaybe something like this will come in the future.\n\n### flirror-crawler\n\nThe crawler application can simply be invoked from the command line and is used\nto crawl the various backends / APIs for the actual data that is displayed by\nflirror-web. The crawler application supports two different modes: ``periodic``\nand ``immediate`` (default). The periodic mode will crawl all available APIs in\ncustomizable intervals, while the immediate mode can be used as a one-shot\ncommand to retrieve the data directly from all available backends.\n\n### SQLite database\n\nTo bring both components together I decided for a very simple approach, using a\nlocal SQLite databse. I mainly made this choice, because we are only storing\nsimple key value pairs and SQLite comes\n[out of the box](https://docs.python.org/3/library/sqlite3.html) with python.\n\n## Usage\n\nBoth applications - **flirror-web** and **flirror-crawler** - read their\nconfiguration from the file path given via the `FLIRROR_SETTINGS` environment\nvariable, e.g.\n\n```shell\n$ export FLIRROR_SETTINGS=$(pwd)/settings.cfg\n```\n\nA basic configuration file must at least contain the path to a `DATABASE_FILE`\nand a list of `MODULES` with at least one module configured.\n\nEach entry in the `MODULES` list accepts the following parameters:\n\n| Parameter | Description\n|-----------|------------\n| `id` | **Required** The ID to identify this module inside the application.\n| `type` | **Required** The name of the module to use for this tile. A list of available modules can be found [here](#available-modules)\n| `config` | **Required** The configuration for the specific module. Some modules come up with a default configuration, but usually this is needed to for each module. For more details on how to configure the specific module, take a look at the module\'s configuration part in the [modules](#available-modules) section.\n| `crawler` | Crawler specific settings. This can be used to speficy e.g.the crawling interval for a specific module. For more details see the crawler config section.\n| `display` | Configure the `position` and reloading `time` of a module\n\nAn example configuration with at least one module with the minimum required\nparameters might look like the following:\n\n``` python\nMODULES = [\n    {\n        "id": "weather-tile",\n        "type": "weather",\n        "config": {\n            "city": "My hometown",\n            "api_key": "<your-openweathermap-api-key>",\n            "language": "en",\n            "temp_unit": "celsius",\n        },\n        "display": {\n            "position": 0,\n        },\n    }\n]\n```\n\nFor more detailed configuration examples, please take a look at the\n`settings.example.cfg` file.\n\nEach module entry defined in this configuration file will be shown as a single\ntile in **flirror-web** and will be crawled independently in **flirror-crawler**.\n\n### Start flirror-web\n\nTo start flirror-web, simply run the following command:\n\n```shell\n$ flirror-web\n```\n\nwhich will start a [gunicorn](https://gunicorn.org/) server serving the flirror\napplication on `http://127.0.0.1`. The script accepts arbitrary parameters, so\nyou could further configure the gunicorn command that is executed in the end, by\ne.g. specifying the number workers or changing the address. For a list of\navailable command line arguments, please refer to gunicorn\'s [documentation](https://docs.gunicorn.org/en/stable/run.html#commonly-used-arguments).\n\nIf you don\'t want to use gunicorn, you could take a look at Flask\'s\n[uWSGI](https://flask.palletsprojects.com/en/1.1.x/deploying/uwsgi/) guide.\n\n### Start the crawler\n\nTo start the crawler simply run one of the following commands\n\n```shell\n# Periodic mode\n$ flirror-crawler crawl --periodic\n\n# Immediate mode\n$ flirror-crawler crawl\n```\n\nto run the crawler either in periodic or immediate mode. In both cases flirror\nwill look up all modules specified in the configuration file and try to retrieve\nthe data for each one by invoking the respective crawler.\n\n## Available Modules\n\nThe following modules are available in flirror by default:\n\n* Clock\n* Weather\n* Calendar\n* News\n* Stocks\n\n### Clock\n\nThe clock module displays a clock either in digital or analog format. This is a\npure JavaScript/CSS module, as it wouldn\'t make much sense to use a Python\nbackend to retrieve the current time.\n\n#### Configuration\n\n| Option | Description\n|--------|------------\n| `mode` | Must be one of `analog` or `digital` to display the clock in the selected format. **Default:** `digital`\n\n### Weather\n\nThe weather module displays the current weather information together with a\nforecast for the next six days. The weather information is retrieved from\n[OpenWeather](https://openweathermap.org/), so an OpenWeather API key is\nnecessary to access those information. Information on how to get a free API key\ncan be found in their [How to start](https://openweathermap.org/appid) section.\n\n#### Configuration\n\n| Option | Description\n|--------|------------\n| `api_key` | **Required** Your personal OpenWeather API key\n| `language` | **Required** The language in which the results are returned from the API (and thus displayd in flirror). For a list of available language codes, please refer to the [OpenWeather multilangual support](https://openweathermap.org/current#multi).\n| `city` | **Required** The city to retrieve the weather information for.\n| `temp_unit` | **Required** The unit in which the results are returned from the API (and thus displayed in flirror).\n\n### Calendar\n\nThe calendar modules displays upcoming events from a Google calendar. Currently,\nFlirror only supports the [OAuth 2.0 for TV and Limited-Input Device Applications](https://developers.google.com/identity/protocols/OAuth2ForDevices).\n\n#### Configuration\n\n| Option | Description\n|--------|------------\n| `calendars` | **Required** A list of google calendars to retrieve the events from. If you don\'t want to mix up multiple calendars in one tile, you can configure multiple calendar modules with one calendar each. Your default google calendar is usually named after your gmail address.\n| `max_items` | The maximum number of events to show. **Default:** 5\n\n### Stocks\n\nThe stocks module displays current stock values either in table format or as a\ntime series. The information is retrieved from\n[Alpha Vantage](https://www.alphavantage.co/), so an Alpha Vantage API keys is\nnecessary to access those information. Information on how to get a free API key\ncan be found in their [Getting started guide](https://medium.com/alpha-vantage/get-started-with-alpha-vantage-data-619a70c7f33a).\n\n#### Configuration\n\n| Option | Description |\n|--------|-------------|\n| `api_key` | **Required** Your personal Alpha Vantage API key\n| `symbols` | **Required** The list of equities you want to retrieve. Each element must be in the format `("<symbol>", "<display_name>")`\n| `mode` | One of `table` or `series` to display the stocks information in the selected format. **DEfault:** `table`\n\n### News\n\nThe news module displays entries from a RSS feed. Flirror uses the\n[feedparser](https://pypi.org/project/feedparser/) package to crawl the\nnewsfeeds. Please take a look at feedparser\'s\n[documentation](https://pythonhosted.org/feedparser/introduction.html) to get an\noverview about available formats which can be parsed.\n\n#### Configuration\n| Option | Description |\n|--------|-------------|\n| `name` | **Required** The title to display over the news entries\n| `url` | **Required** The url pointing to the RSS feed\n\n## Deploy flirror on a Raspberry Pi\n\n### Requirements\n\n* [Docker](https://www.docker.com/)\n* [docker-compose](https://docs.docker.com/compose/)\n\n#### Install docker\n\nTo install docker on raspbian OS, you can simply run the following command:\n\n```shell\n$ curl -sSL https://get.docker.com | sh\n```\n\nThis will download the installation script and directly execute it via shell.\nRunning the script may take some time. Afterwards, you might want to add your\nuser (pi) to the docker group, so you can run docker without sudo:\n\n```shell\n$ sudo usermod -aG docker pi\n```\n\nAfterwards log out and back or reboot the Raspberry Pi via\n\n```shell\n$ sudo reboot -h\n```\n\n#### Install docker-compose\n\nThere are various ways to install docker-compose. Please see the\n[docker-compose installation guide](https://docs.docker.com/compose/install/)\nfor more detailed information.\n\nI personally installed docker-compose via\n[pipx](https://pipxproject.github.io/pipx/).\nUsing this variant requires the `python-dev` and `libffi-dev` packages to be\ninstalled on the system.\n\n```shell\n$ sudo apt install python-dev libffi-dev\n$ python3 -m pip install --user pipx\n$ python3 -m pipx ensurepath\n$ pipx install docker-compose\n```\n\n### Start flirror\n\nBoth components, `flirror-web` and `flirror-crawler` can be started via the\n`docker-compose.yaml` file within this repository. Thus, you can simply start\nboth services by running\n\n```shell\n$ docker-compose up web crawler\n```\n\nwithin the root of this repository. This will start the web UI and the crawler\napplication in periodic mode.\n\nWith both services running we still need to open some browser to see the actual\nflirror UI. This can be done by executing the `helpers/start_gui.sh` helper\nscript. Apart from starting chromium in full screen mode pointing to the running\nflirror-web instance inside the docker container, this script will also ensure\nthat some necessary environment variables like `DISPLAY` are set and that the\nscreen saver and energy saving mode of the X server are disabled - so the\ndisplay doesn\'t go into sleep mode after a few minutes.\n\n### Optional configuration\n\nTo hide the mouse cursor, install unclutter via\n\n```shell\n$ sudo apt install unclutter\n```\n\nand add the following line to `/home/pi/.config/lxsession/LXDE-pi/autostart`\n\n```shell\n@unclutter -display :0 -noevents -grab\n```\n\n## Planned features and ideas\n\n* A plugin mechamisn to allow custom modules to be included in flirror\n* Provide webhooks to allow interacting with flirror from the outside (and maybe event between modules)\n* Provide some notification mechanism\n',
    'author': 'Felix Edel',
    'author_email': 'felixfelix.schmidt@googlemail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/felixedel/flirror',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
