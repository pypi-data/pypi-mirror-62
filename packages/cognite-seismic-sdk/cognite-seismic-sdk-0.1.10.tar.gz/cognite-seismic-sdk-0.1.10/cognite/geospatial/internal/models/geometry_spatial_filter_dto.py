# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial.internal.configuration import Configuration


class GeometrySpatialFilterDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filter_type': 'str',
        'geometry': 'GeometryDTO',
        'geometric_setting': 'str'
    }

    attribute_map = {
        'filter_type': 'filter_type',
        'geometry': 'geometry',
        'geometric_setting': 'geometricSetting'
    }

    discriminator_value_class_map = {
        'CompletelyWithinSpatialFilter': 'CompletelyWithinSpatialFilterDTO',
        'IntersectionFilter': 'IntersectionFilterDTO',
        'WithinDistanceFilter': 'WithinDistanceFilterDTO',
        'WithinSpatialFilter': 'WithinSpatialFilterDTO'
    }

    def __init__(self, filter_type=None, geometry=None, geometric_setting='2d', local_vars_configuration=None):  # noqa: E501
        """GeometrySpatialFilterDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filter_type = None
        self._geometry = None
        self._geometric_setting = None
        self.discriminator = 'filter_type'

        self.filter_type = filter_type
        self.geometry = geometry
        if geometric_setting is not None:
            self.geometric_setting = geometric_setting

    @property
    def filter_type(self):
        """Gets the filter_type of this GeometrySpatialFilterDTO.  # noqa: E501


        :return: The filter_type of this GeometrySpatialFilterDTO.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this GeometrySpatialFilterDTO.


        :param filter_type: The filter_type of this GeometrySpatialFilterDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filter_type is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_type`, must not be `None`")  # noqa: E501

        self._filter_type = filter_type

    @property
    def geometry(self):
        """Gets the geometry of this GeometrySpatialFilterDTO.  # noqa: E501


        :return: The geometry of this GeometrySpatialFilterDTO.  # noqa: E501
        :rtype: GeometryDTO
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this GeometrySpatialFilterDTO.


        :param geometry: The geometry of this GeometrySpatialFilterDTO.  # noqa: E501
        :type: GeometryDTO
        """
        if self.local_vars_configuration.client_side_validation and geometry is None:  # noqa: E501
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def geometric_setting(self):
        """Gets the geometric_setting of this GeometrySpatialFilterDTO.  # noqa: E501

        The geometric setting to check spatial relation between geometries  # noqa: E501

        :return: The geometric_setting of this GeometrySpatialFilterDTO.  # noqa: E501
        :rtype: str
        """
        return self._geometric_setting

    @geometric_setting.setter
    def geometric_setting(self, geometric_setting):
        """Sets the geometric_setting of this GeometrySpatialFilterDTO.

        The geometric setting to check spatial relation between geometries  # noqa: E501

        :param geometric_setting: The geometric_setting of this GeometrySpatialFilterDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["2d", "3d"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and geometric_setting not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `geometric_setting` ({0}), must be one of {1}"  # noqa: E501
                .format(geometric_setting, allowed_values)
            )

        self._geometric_setting = geometric_setting

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeometrySpatialFilterDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeometrySpatialFilterDTO):
            return True

        return self.to_dict() != other.to_dict()
