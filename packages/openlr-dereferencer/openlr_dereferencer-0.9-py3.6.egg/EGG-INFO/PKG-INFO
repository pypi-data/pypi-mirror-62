Metadata-Version: 2.1
Name: openlr-dereferencer
Version: 0.9
Summary: OpenLR location dereferencer
Home-page: https://github.com/tomtom-international/openlr-python-dereferencer
Author: Jan Ole Zabel
Author-email: janole.zabel@tomtom.com
License: Apache 2.0
Description: # openlr_dereferencer
        This is a Python package for decoding openLR location references on target maps.
        ## Dependencies
        - Python ≥ 3.6
        - geographiclib (PyPi package)
        - openlr (PyPi package)
        - For unittests, SQlite with spatialite extension is required
        ## State
        - ☑ Example map format
        - ☑ Routing
        - ☑ Candidate route rating
        - ☑ Backtracking to get correct routes
        - ☑ Decoding line locations
        - ☐ Decoding 'point along line' locations
        - ☐ Decoding 'POI with access point' locations
        ## Structure
        It is divided into the following submodules:
        ### maps
        Contains an abstract map class, which you may want to implement for your target map.
        
        `maps.wgs84` provides methods for reckoning with WGS84 coordinates.
        ### example_sqlite_map
        Implements the abstract map class for the example map format used in the unittests and examples
        ### decoding
        The actual logic for dereferencing references on a map.
        
        This includes finding candidate lines and scoring them, and assembling a dereferenced location.
        ### tests
        Contains the unit tests.
        
        For running all of them, call `python3 -m unittest openlr_dereferencer.tests`.
        
        
        ## Example usage
        
        First, you may construct a line location reference from an openLR line location string:
        ```py
        from openlr import binary_decode
        reference = binary_decode("CwmG8yVjzCq0Dfzr/gErRRs=")
        ```
        
        Now, implement the `MapReader` interface for your map and decode the reference on an instance:
        
        ```py
        from openlr_dereferencer import decode
        real_location = decode(reference, mapreader)
        # (100 is the search radius here)
        
        real_location.lines
        real_location.coordinates()
        ```
        
        ## Configuration
        ### Candidates
        The configuration value `openlr_dereferencer.SEARCH_RADIUS` determines how far from the LRP candidates are searched.
        The unit is meters, the default 100.
        ### Scores
        Every candidate line gets a score from `0` (bad) to `1` (perfect).
        
        There are four scoring weight parameters:
         - GEO_WEIGHT = 0.25
         - FRC_WEIGHT = 0.25
         - FOW_WEIGHT = 0.25
         - BEAR_WEIGHT = 0.25
        
        They determine how much influence a single aspect has on an overall candidate's score.
         
        You may just change them before decoding:
        ```py
        from openlr_dereferencer.decoding import scoring
        
        scoring.GEO_WEIGHT = 0.66
        scoring.FRC_WEIGHT = 0.17
        scoring.FOW_WEIGHT = 0.17
        scoring.BEAR_WEIGHT = 0
        ```
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=3.6
Description-Content-Type: text/markdown
