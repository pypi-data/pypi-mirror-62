# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['no_emp_dim', 'maybe_unsqueeze', 'show_array', 'TSeries', 'get_ucr', 'load_df_ucr', 'get_x', 'get_y']

# Cell
from .imports import *

# Cell
import pandas as pd
from fastcore.all import *
from scipy.io import arff

# Cell
def no_emp_dim(x):
    if len(x.shape)==1 :
        x = x[None,:]
    return np.vstack(x)

# Cell
def maybe_unsqueeze(x):
    x = tensor(x)
    return x.unsqueeze(0) if len(x.shape)==1 else x

# Cell
def show_array(array, ax=None, figsize=None, title=None, ctx=None, tx=None, **kwargs):
    "Show an array on `ax`."
    # Handle pytorch axis order
    if hasattrs(array, ('data','cpu','permute')):
        array = array.data.cpu()
    elif not isinstance(array,np.ndarray):
        array=array(array)
    arrays = no_emp_dim(array)
    ax = ifnone(ax,ctx)
    if figsize is None: figsize = (5,5)
    if ax is None: _,ax = plt.subplots(figsize=figsize)
    tx = ifnone(tx,np.arange(arrays[0].shape[0]))
    label = kwargs.pop('label', 'x')
    for a, c in zip(arrays, ['b', 'c', 'm', 'y', 'k',]):
        ax.plot(tx, a, '-'+c,label=label, **kwargs)
    if title is not None: ax.set_title(title)
    ax.legend()
    return ax

# Cell
class TSeries(TensorBase):
    "Basic Timeseries wrapper"
    @classmethod
    def create(cls, x):
        return cls(maybe_unsqueeze(x))

    @property
    def channels(self): return self.shape[0]

    @property
    def len(self): return self.shape[-1]

    def __repr__(self):
        return f'TSeries(ch={self.channels}, len={self.len})'

    def show(self, ctx=None, **kwargs):
        return show_array(self, ctx=ctx, **kwargs)

# Cell
URLs.UCR = 'http://www.timeseriesclassification.com/Downloads/Archives/Univariate2018_arff.zip'

# Cell
def get_ucr():
    "zipped file has different name as .zip"
    ucr_path_2018 = untar_data(URLs.UCR)
    return ucr_path_2018.parent/ucr_path_2018.name.replace('2018', '')

# Cell
# "this functions are based on https://github.com/mb4310/Time-Series"
def load_df_ucr(path, task):
    "Loads arff files from UCR"
    try:
        print(f'Loading files from: {path}/{task}')
        dfs = []
        for file in ['TRAIN', 'TEST']:
            filename = f'{task}/{task}_{file}.arff'
            data = arff.loadarff(str(path/filename))
            dfs.append(pd.DataFrame(data[0]))
        return dfs
    except:
        print(f'Error loading files: {path}/{task}')

# Cell
def get_x(row):
    return row.values[:-1].astype('float32')
def get_y(row):
    return int(row.values[-1])