# -*- coding: utf-8 -*-
# Generated by Django 1.11.18 on 2019-02-18 02:46
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
from aristotle_mdr.utils.migrations import (
    classproperty,
    StewardMigration
)


def move_indicator_to_new(apps, schema_migration, rel_model, attr_name):
    Indicator = apps.get_model('comet', 'indicator')

    for index, (indicator, de) in enumerate(Indicator.objects.all().values_list('id', '%s__id'%(attr_name))):
        rel_model.objects.get_or_create(
            order = index,
            indicator_id=indicator,
            data_element_id=de,
        )

def migrate_numerators(apps, schema_migration):
    rel_model = apps.get_model('comet', 'IndicatorNumeratorDefinition')
    move_indicator_to_new(apps, schema_migration, rel_model, attr_name="numerators")


def migrate_denominators(apps, schema_migration):
    rel_model = apps.get_model('comet', 'IndicatorDenominatorDefinition')
    move_indicator_to_new(apps, schema_migration, rel_model, attr_name="denominators")


def migrate_disaggregators(apps, schema_migration):
    rel_model = apps.get_model('comet', 'IndicatorDisaggregationDefinition')
    move_indicator_to_new(apps, schema_migration, rel_model, attr_name="disaggregators")


def migrate_indicatorsets(apps, schema_migration):
    IndicatorSet = apps.get_model('comet', 'IndicatorSet')
    IndicatorInclusion = apps.get_model('comet', 'IndicatorInclusion')

    for index, (indicatorset, indicator) in enumerate(IndicatorSet.objects.all().values_list('id', 'indicators__id')):
        IndicatorInclusion.objects.get_or_create(
            order = index,
            indicator_id=indicator,
            indicator_set_id=indicatorset,
        )


class Migration(StewardMigration):

    dependencies = [
        ('comet', '0006_auto_20190212_0935'),
    ]

    @classproperty
    def operations(cls):
        return [
            migrations.RunPython(cls.fetch_stewardship_org_uuid, migrations.RunPython.noop),
            migrations.RunPython(migrate_numerators, migrations.RunPython.noop),
            migrations.RunPython(migrate_denominators, migrations.RunPython.noop),
            migrations.RunPython(migrate_disaggregators, migrations.RunPython.noop),
            migrations.RunPython(migrate_indicatorsets, migrations.RunPython.noop),
            migrations.RunPython(cls.migrate_indicatortypes, migrations.RunPython.noop),
            migrations.RunPython(cls.migrate_indicatorsettypes, migrations.RunPython.noop),
        ]

    @classmethod
    def migrate_indicatortypes(cls, apps, schema_migration):
        Indicator = apps.get_model('comet', 'indicator')
        IndicatorTypeOld = apps.get_model('comet', 'IndicatorTypeOld')
        IndicatorType = apps.get_model('comet', 'IndicatorType')
    
        for it in IndicatorTypeOld.objects.all():
            IndicatorType.objects.get_or_create(
                pk = it.pk,
                name = it.name,
                definition = it.definition,
                uuid = it.uuid,
                stewardship_organisation_id = cls.so_uuid
            )
            it.statuses.all().delete()

        for ind in Indicator.objects.all():
            ind.indicator_type_id = ind.indicatorType_id
            ind.save()

    @classmethod
    def migrate_indicatorsettypes(cls, apps, schema_migration):
        IndicatorSet = apps.get_model('comet', 'IndicatorSet')
        IndicatorSetTypeOld = apps.get_model('comet', 'IndicatorSetTypeOld')
        IndicatorSetType = apps.get_model('comet', 'IndicatorSetType')
    
        for ist in IndicatorSetTypeOld.objects.all():
            IndicatorSetType.objects.get_or_create(
                pk = ist.pk,
                name = ist.name,
                definition = ist.definition,
                uuid = ist.uuid,
                stewardship_organisation_id = cls.so_uuid
            )

        for ind in IndicatorSet.objects.all():
            ind.indicator_set_type_id = ind.indicatorSetType_id
            ind.save()
