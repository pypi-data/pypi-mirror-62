{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-conditional-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","HaEntityPicker","_LitElement","[object Object]","args","super","_initialize","this","property","type","Boolean","attribute","Array","memoizeOne","hass","includeDomains","excludeDomains","entityFilter","includeDeviceClasses","states","entityIds","Object","keys","filter","eid","computeDomain","sort","map","key","stateObj","entity_id","attributes","device_class","changedProps","_get","_getPrototypeOf","prototype","call","has","_opened","_hass","_getStates","html","_value","allowCustomEntity","root","_owner","model","firstElementChild","innerHTML","querySelector","item","textContent","computeStateName","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","_clearValue","length","ev","stopPropagation","_setValue","detail","newValue","setTimeout","fireEvent","css","LitElement","customElements","define","conditionStruct","entity","state","state_not","cardConfigStruct","card","conditions","optional","HuiConditionalCardEditor","_decorate","customElement","F","kind","decorators","config","_config","_cardTab","_selectTab","_handleReplaceCard","_handleCardChanged","lovelace","cond","idx","_this$hass","_changeCondition","_addCondition","parseInt","target","selected","push","configValue","splice","index","condition","static"],"mappings":"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","file":"chunk.efc98c101d8003654397.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (includeDeviceClasses) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class))\n        );\n      }\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult {\n    const states = this._getStates(\n      this._hass,\n      this.includeDomains,\n      this.excludeDomains,\n      this.entityFilter,\n      this.includeDeviceClasses\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  aria-label=${this.hass!.localize(\n                    \"ui.components.entity.entity-picker.clear\"\n                  )}\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  @click=${this._clearValue}\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  aria-label=${this.hass!.localize(\n                    \"ui.components.entity.entity-picker.show_entities\"\n                  )}\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    this._setValue(\"\");\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  CSSResult,\n  css,\n} from \"lit-element\";\nimport \"@polymer/paper-tabs\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { StackCardConfig } from \"../../cards/types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\n\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-switch\";\n\nconst conditionStruct = struct({\n  entity: \"string\",\n  state: \"string?\",\n  state_not: \"string?\",\n});\nconst cardConfigStruct = struct({\n  type: \"string\",\n  card: \"any\",\n  conditions: struct.optional([conditionStruct]),\n});\n\n@customElement(\"hui-conditional-card-editor\")\nexport class HuiConditionalCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n  @property() public lovelace?: LovelaceConfig;\n  @property() private _config?: StackCardConfig;\n  @property() private _cardTab: boolean = false;\n\n  public setConfig(config: StackCardConfig): void {\n    this._config = cardConfigStruct(config);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <paper-tabs\n        .selected=${this._cardTab ? \"1\" : \"0\"}\n        @iron-select=${this._selectTab}\n      >\n        <paper-tab\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.conditions\"\n          )}</paper-tab\n        >\n        <paper-tab\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.card\"\n          )}</paper-tab\n        >\n      </paper-tabs>\n      ${this._cardTab\n        ? html`\n            <div class=\"card\">\n              ${this._config.card.type\n                ? html`\n                    <div class=\"card-options\">\n                      <mwc-button @click=${this._handleReplaceCard}\n                        >${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.change_type\"\n                        )}</mwc-button\n                      >\n                    </div>\n                    <hui-card-editor\n                      .hass=${this.hass}\n                      .value=${this._config.card}\n                      @config-changed=${this._handleCardChanged}\n                    ></hui-card-editor>\n                  `\n                : html`\n                    <hui-card-picker\n                      .hass=${this.hass}\n                      .lovelace=${this.lovelace}\n                      @config-changed=${this._handleCardChanged}\n                    ></hui-card-picker>\n                  `}\n            </div>\n          `\n        : html`\n            <div class=\"conditions\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.card.conditional.condition_explanation\"\n              )}\n              ${this._config.conditions.map((cond, idx) => {\n                return html`\n                  <div class=\"condition\">\n                    <div class=\"entity\">\n                      <ha-entity-picker\n                        .hass=${this.hass}\n                        .value=${cond.entity}\n                        .index=${idx}\n                        .configValue=${\"entity\"}\n                        @change=${this._changeCondition}\n                        allow-custom-entity\n                      ></ha-entity-picker>\n                    </div>\n                    <div class=\"state\">\n                      <paper-dropdown-menu>\n                        <paper-listbox\n                          .selected=${cond.state_not !== undefined ? 1 : 0}\n                          slot=\"dropdown-content\"\n                          .index=${idx}\n                          .configValue=${\"invert\"}\n                          @selected-item-changed=${this._changeCondition}\n                        >\n                          <paper-item\n                            >${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.card.conditional.state_equal\"\n                            )}</paper-item\n                          >\n                          <paper-item\n                            >${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.card.conditional.state_not_equal\"\n                            )}</paper-item\n                          >\n                        </paper-listbox>\n                      </paper-dropdown-menu>\n                      <paper-input\n                        .label=\"${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.generic.state\"\n                        )} (${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.current_state\"\n                        )}: '${this.hass?.states[cond.entity].state}')\"\n                        .value=${cond.state_not !== undefined\n                          ? cond.state_not\n                          : cond.state}\n                        .index=${idx}\n                        .configValue=${\"state\"}\n                        @value-changed=${this._changeCondition}\n                      ></paper-input>\n                    </div>\n                  </div>\n                `;\n              })}\n              <div class=\"condition\">\n                <ha-entity-picker\n                  .hass=${this.hass}\n                  @change=${this._addCondition}\n                ></ha-entity-picker>\n              </div>\n            </div>\n          `}\n    `;\n  }\n\n  private _selectTab(ev: Event): void {\n    this._cardTab = parseInt((ev.target! as any).selected!, 10) === 1;\n  }\n\n  private _handleCardChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._config.card = ev.detail.config;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n  private _handleReplaceCard(): void {\n    if (!this._config) {\n      return;\n    }\n    this._config.card = {};\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _addCondition(ev: Event): void {\n    const target = ev.target! as any;\n    if (target.value === \"\" || !this._config) {\n      return;\n    }\n    this._config.conditions.push({\n      entity: target.value,\n      state: \"\",\n    });\n    target.value = \"\";\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n  private _changeCondition(ev: Event): void {\n    const target = ev.target as any;\n    if (!this._config || !target) {\n      return;\n    }\n    if (target.configValue === \"entity\" && target.value === \"\") {\n      this._config.conditions.splice(target.index, 1);\n    } else {\n      const condition = this._config.conditions[target.index];\n      if (target.configValue === \"entity\") {\n        condition.entity = target.value;\n      } else if (target.configValue === \"state\") {\n        if (condition.state_not !== undefined) {\n          condition.state_not = target.value;\n        } else {\n          condition.state = target.value;\n        }\n      } else if (target.configValue === \"invert\") {\n        if (target.selected === 1) {\n          if (condition.state) {\n            condition.state_not = condition.state;\n            delete condition.state;\n          }\n        } else {\n          if (condition.state_not) {\n            condition.state = condition.state_not;\n            delete condition.state_not;\n          }\n        }\n      }\n      this._config.conditions[target.index] = condition;\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-tabs {\n        --paper-tabs-selection-bar-color: var(--primary-color);\n        --paper-tab-ink: var(--primary-color);\n        border-bottom: 1px solid var(--divider-color);\n      }\n      .conditions {\n        margin-top: 8px;\n      }\n      .condition {\n        margin-top: 8px;\n        border: 1px solid var(--divider-color);\n        padding: 12px;\n      }\n      .condition .state {\n        display: flex;\n        align-items: flex-end;\n      }\n      .condition .state paper-dropdown-menu {\n        margin-right: 16px;\n      }\n      .condition .state paper-input {\n        flex-grow: 1;\n      }\n\n      .card {\n        margin-top: 8px;\n        border: 1px solid var(--divider-color);\n        padding: 12px;\n      }\n      @media (max-width: 450px) {\n        .card,\n        .condition {\n          margin: 8px -12px 0;\n        }\n      }\n      .card .card-options {\n        display: flex;\n        justify-content: flex-end;\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-conditional-card-editor\": HuiConditionalCardEditor;\n  }\n}\n"],"sourceRoot":""}