{"version":3,"sources":["webpack:///./src/data/input_text.ts","webpack:///./src/panels/lovelace/entity-rows/hui-input-text-entity-row.ts"],"names":["__webpack_require__","d","__webpack_exports__","setValue","hass","entity","value","callService","split","entity_id","customElement","property","config","Error","this","_config","changedProps","hasConfigOrEntityChanged","html","_templateObject","stateObj","states","_templateObject3","state","attributes","min","max","pattern","mode","_selectedValueChanged","_templateObject2","localize","shadowRoot","querySelector","ev","element","_inputEl","target","blur","LitElement"],"mappings":"wFAEAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAO,IAAMA,EAAW,SAACC,EAAqBC,EAAgBC,GAAtC,OACtBF,EAAKG,YAAYF,EAAOG,MAAM,IAAK,GAAG,GAAI,YAAa,CACrDF,QACAG,UAAWJ,+4QCadK,YAAc,8oBAEZC,kEAEAA,gFAED,SAAiBC,GACf,IAAKA,EACH,MAAM,IAAIC,MAAM,uBAElBC,KAAKC,QAAUH,4CAGjB,SAAuBI,GACrB,OAAOC,YAAyBH,KAAME,uCAGxC,WACE,IAAKF,KAAKC,UAAYD,KAAKV,KACzB,OAAOc,YAAPC,KAGF,IAAMC,EAAWN,KAAKV,KAAKiB,OAAOP,KAAKC,QAAQV,QAE/C,OAAKe,EAYEF,YAAPI,IACmCR,KAAKV,KAAkBU,KAAKC,QAG/CK,EAASG,MACLH,EAASI,WAAWC,IACpBL,EAASI,WAAWE,IACjBN,EAASI,WAAWG,QACzBP,EAASI,WAAWG,QACvBP,EAASI,WAAWI,KAClBd,KAAKe,uBArBbX,YAAPY,IAEOhB,KAAKV,KAAK2B,SACX,6CACA,SACAjB,KAAKC,QAAQV,4CAuBvB,WACE,OAAOS,KAAKkB,WAAYC,cAAc,kEAGxC,SAA8BC,GAC5B,IAAMC,EAAUrB,KAAKsB,SACfhB,EAAWN,KAAKV,KAAMiB,OAAOP,KAAKC,QAASV,QAE7C8B,EAAQ7B,QAAUc,EAASG,OAC7BpB,YAASW,KAAKV,KAAOgB,EAASX,UAAW0B,EAAQ7B,OAGnD4B,EAAGG,OAAOC,YAhEsBC","file":"chunk.d3b530474d62855c7ff9.js","sourcesContent":["import { HomeAssistant } from \"../types\";\n\nexport const setValue = (hass: HomeAssistant, entity: string, value: string) =>\n  hass.callService(entity.split(\".\", 1)[0], \"set_value\", {\n    value,\n    entity_id: entity,\n  });\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\n\nimport \"../components/hui-generic-entity-row\";\nimport \"../components/hui-warning\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceRow, EntityConfig } from \"./types\";\nimport { setValue } from \"../../../data/input_text\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\n\n@customElement(\"hui-input-text-entity-row\")\nclass HuiInputTextEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntityConfig;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Configuration error\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=\"${this.hass}\" .config=\"${this._config}\">\n        <paper-input\n          no-label-float\n          .value=\"${stateObj.state}\"\n          .minlength=\"${stateObj.attributes.min}\"\n          .maxlength=\"${stateObj.attributes.max}\"\n          .autoValidate=\"${stateObj.attributes.pattern}\"\n          .pattern=\"${stateObj.attributes.pattern}\"\n          .type=\"${stateObj.attributes.mode}\"\n          @change=\"${this._selectedValueChanged}\"\n          placeholder=\"(empty value)\"\n        ></paper-input>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private get _inputEl(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\"paper-input\") as PaperInputElement;\n  }\n\n  private _selectedValueChanged(ev): void {\n    const element = this._inputEl;\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    if (element.value !== stateObj.state) {\n      setValue(this.hass!, stateObj.entity_id, element.value!);\n    }\n\n    ev.target.blur();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-text-entity-row\": HuiInputTextEntityRow;\n  }\n}\n"],"sourceRoot":""}