{"version":3,"sources":["webpack:///./src/cast/dev_const.ts","webpack:///./src/cast/receiver_messages.ts","webpack:///./src/cast/const.ts","webpack:///./src/panels/lovelace/special-rows/hui-cast-row.ts"],"names":["__webpack_require__","d","__webpack_exports__","CAST_DEV_APP_ID","CAST_DEV_HASS_URL","castSendAuth","castSendShowLovelaceView","ensureConnectedCastSession","_const__WEBPACK_IMPORTED_MODULE_0__","_dev_const__WEBPACK_IMPORTED_MODULE_1__","cast","auth","sendMessage","type","refreshToken","data","refresh_token","clientId","hassUrl","CAST_DEV","viewPath","castConnectedToOurHass","Promise","resolve","unsub","addEventListener","CAST_APP_ID","CAST_NS","_dev_const__WEBPACK_IMPORTED_MODULE_0__","__DEV__","customElement","HuiCastRow","_LitElement","[object Object]","args","super","_initialize","this","property","config","undefined","view","Error","_config","Object","assign","icon","name","html","active","_castManager","status","lovelacePath","_noHTTPS","castState","_sendLovelace","classMap","inactive","Boolean","changedProps","_get","_getPrototypeOf","prototype","call","location","protocol","hostname","e","then","bind","getCastManager","hass","mgr","requestUpdate","hide_if_unavailable","style","display","async","css","LitElement"],"mappings":"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","file":"chunk.9c88b9e36423edae047c.js","sourcesContent":["// Replace this with your own unpublished cast app that points at your local dev\nexport const CAST_DEV_APP_ID = \"5FE44367\";\n\n// Chromecast SDK will only load on localhost and HTTPS\n// So during local development we have to send our dev IP address,\n// but then run the UI on localhost.\nexport const CAST_DEV_HASS_URL = \"http://192.168.1.234:8123\";\n","// Nessages to be processed inside the Cast Receiver app\n\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { CastManager } from \"./cast_manager\";\n\nimport { BaseCastMessage } from \"./types\";\nimport { CAST_DEV } from \"./const\";\nimport { CAST_DEV_HASS_URL } from \"./dev_const\";\n\nexport interface GetStatusMessage extends BaseCastMessage {\n  type: \"get_status\";\n}\n\nexport interface ConnectMessage extends BaseCastMessage {\n  type: \"connect\";\n  refreshToken: string;\n  clientId: string | null;\n  hassUrl: string;\n}\n\nexport interface ShowLovelaceViewMessage extends BaseCastMessage {\n  type: \"show_lovelace_view\";\n  viewPath: string | number | null;\n}\n\nexport interface ShowDemoMessage extends BaseCastMessage {\n  type: \"show_demo\";\n}\n\nexport type HassMessage =\n  | ShowDemoMessage\n  | GetStatusMessage\n  | ConnectMessage\n  | ShowLovelaceViewMessage;\n\nexport const castSendAuth = (cast: CastManager, auth: Auth) =>\n  cast.sendMessage({\n    type: \"connect\",\n    refreshToken: auth.data.refresh_token,\n    clientId: auth.data.clientId,\n    hassUrl: CAST_DEV ? CAST_DEV_HASS_URL : auth.data.hassUrl,\n  });\n\nexport const castSendShowLovelaceView = (\n  cast: CastManager,\n  viewPath: ShowLovelaceViewMessage[\"viewPath\"]\n) =>\n  cast.sendMessage({\n    type: \"show_lovelace_view\",\n    viewPath,\n  });\n\nexport const castSendShowDemo = (cast: CastManager) =>\n  cast.sendMessage({\n    type: \"show_demo\",\n  });\n\nexport const ensureConnectedCastSession = (cast: CastManager, auth: Auth) => {\n  if (cast.castConnectedToOurHass) {\n    return;\n  }\n\n  return new Promise((resolve) => {\n    const unsub = cast.addEventListener(\"connection-changed\", () => {\n      if (cast.castConnectedToOurHass) {\n        unsub();\n        resolve();\n      }\n    });\n\n    castSendAuth(cast, auth);\n  });\n};\n","import { CAST_DEV_APP_ID } from \"./dev_const\";\n\n// Guard dev mode with `__dev__` so it can only ever be enabled in dev mode.\nexport const CAST_DEV = __DEV__ && true;\n\nexport const CAST_APP_ID = CAST_DEV ? CAST_DEV_APP_ID : \"B12CE3CA\";\nexport const CAST_NS = \"urn:x-cast:com.nabucasa.hast\";\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\nimport { LovelaceRow, CastConfig } from \"../entity-rows/types\";\nimport { HomeAssistant } from \"../../../types\";\n\nimport \"../../../components/ha-icon\";\nimport { CastManager } from \"../../../cast/cast_manager\";\nimport {\n  ensureConnectedCastSession,\n  castSendShowLovelaceView,\n} from \"../../../cast/receiver_messages\";\n\n@customElement(\"hui-cast-row\")\nclass HuiCastRow extends LitElement implements LovelaceRow {\n  public hass!: HomeAssistant;\n\n  @property() private _config?: CastConfig;\n\n  @property() private _castManager?: CastManager | null;\n\n  @property() private _noHTTPS = false;\n\n  public setConfig(config: CastConfig): void {\n    if (!config || config.view === undefined || config.view === null) {\n      throw new Error(\"Invalid Configuration: 'view' required\");\n    }\n\n    this._config = {\n      icon: \"hass:television\",\n      name: \"Home Assistant Cast\",\n      ...config,\n    };\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n\n    const active =\n      this._castManager &&\n      this._castManager.status &&\n      this._config.view === this._castManager.status.lovelacePath;\n\n    return html`\n      <ha-icon .icon=\"${this._config.icon}\"></ha-icon>\n      <div class=\"flex\">\n        <div class=\"name\">${this._config.name}</div>\n        ${this._noHTTPS\n          ? html`\n              Cast requires HTTPS\n            `\n          : this._castManager === undefined\n          ? html``\n          : this._castManager === null\n          ? html`\n              Cast API unavailable\n            `\n          : this._castManager.castState === \"NO_DEVICES_AVAILABLE\"\n          ? html`\n              No devices found\n            `\n          : html`\n              <div class=\"controls\">\n                <google-cast-launcher></google-cast-launcher>\n                <mwc-button\n                  @click=${this._sendLovelace}\n                  class=${classMap({ inactive: !Boolean(active) })}\n                  .unelevated=${active}\n                  .disabled=${!this._castManager.status}\n                >\n                  SHOW\n                </mwc-button>\n              </div>\n            `}\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (location.protocol === \"http:\" && location.hostname !== \"localhost\") {\n      this._noHTTPS = true;\n    }\n    import(\"../../../cast/cast_manager\").then(({ getCastManager }) =>\n      getCastManager(this.hass.auth).then(\n        (mgr) => {\n          this._castManager = mgr;\n          mgr.addEventListener(\"connection-changed\", () => {\n            this.requestUpdate();\n          });\n          mgr.addEventListener(\"state-changed\", () => {\n            this.requestUpdate();\n          });\n        },\n        () => {\n          this._castManager = null;\n        }\n      )\n    );\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (this._config && this._config.hide_if_unavailable) {\n      this.style.display =\n        !this._castManager ||\n        this._castManager.castState === \"NO_DEVICES_AVAILABLE\"\n          ? \"none\"\n          : \"\";\n    }\n  }\n\n  private async _sendLovelace() {\n    await ensureConnectedCastSession(this._castManager!, this.hass.auth);\n    castSendShowLovelaceView(this._castManager!, this._config!.view);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-icon {\n        padding: 8px;\n        color: var(--paper-item-icon-color);\n      }\n      .flex {\n        flex: 1;\n        margin-left: 16px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .name {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .controls {\n        display: flex;\n        align-items: center;\n      }\n      google-cast-launcher {\n        margin-right: 0.57em;\n        cursor: pointer;\n        display: inline-block;\n        height: 24px;\n        width: 24px;\n      }\n      .inactive {\n        padding: 0 4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-cast-row\": HuiCastRow;\n  }\n}\n"],"sourceRoot":""}