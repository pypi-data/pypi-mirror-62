{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack:///./src/components/ha-icon-input.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-light-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","this","kind","decorators","property","key","themes","concat","Object","keys","hass","sort","html","label","localize","_changed","map","theme","static","css","ev","target","fireEvent","LitElement","attribute","type","Boolean","placeholder","_valueChanged","disabled","errorMessage","detail","bubbles","composed","cardConfigStruct","name","entity","HuiLightCardEditor","config","_config","configElementStyle","_entity","_name","_icon","stateIcon","states","_theme","configValue","assign"],"mappings":"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","file":"chunk.3029346ecfc8d7957c46.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"theme-changed\": undefined;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"theme-changed\": HASSDomEvent<undefined>;\n  }\n}\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n  @property() public label?: string;\n  @property() public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    const themes = [\"Backend-selected\", \"default\"].concat(\n      Object.keys(this.hass!.themes.themes).sort()\n    );\n\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n          this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.theme\") +\n            \" (\" +\n            this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            ) +\n            \")\"}\n        dynamic-align\n        @value-changed=\"${this._changed}\"\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=\"${this.value}\"\n          attr-for-selected=\"theme\"\n        >\n          ${themes.map((theme) => {\n            return html`\n              <paper-item theme=\"${theme}\">${theme}</paper-item>\n            `;\n          })}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value;\n    fireEvent(this, \"theme-changed\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import {\n  html,\n  css,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\n\nimport \"@polymer/paper-input/paper-input\";\nimport \"./ha-icon\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-icon-input\")\nexport class HaIconInput extends LitElement {\n  @property() public value?: string;\n  @property() public label?: string;\n  @property() public placeholder?: string;\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .value=${this.value}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        @value-changed=${this._valueChanged}\n        .disabled=${this.disabled}\n        auto-validate\n        .errorMessage=${this.errorMessage}\n        pattern=\"^\\\\S+:\\\\S+$\"\n      >\n        ${this.value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this.value || this.placeholder} slot=\"suffix\">\n              </ha-icon>\n            `\n          : \"\"}\n      </paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this.value = ev.detail.value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: ev.detail.value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      ha-icon {\n        position: relative;\n        bottom: 4px;\n      }\n    `;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/hui-theme-select-editor\";\n\nimport \"../../../../components/ha-icon-input\";\nimport \"../../components/hui-entity-editor\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { LightCardConfig } from \"../../cards/types\";\nimport { stateIcon } from \"../../../../common/entity/state_icon\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  name: \"string?\",\n  entity: \"string?\",\n  theme: \"string?\",\n  icon: \"string?\",\n});\n\n@customElement(\"hui-light-card-editor\")\nexport class HuiLightCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: LightCardConfig;\n\n  public setConfig(config: LightCardConfig): void {\n    this._config = cardConfigStruct(config);\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"default\";\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _icon(): string {\n    return this._config!.icon || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=${this.hass}\n          .value=\"${this._entity}\"\n          .configValue=${\"entity\"}\n          include-domains='[\"light\"]'\n          @change=\"${this._valueChanged}\"\n          allow-custom-entity\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.name\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=\"${this._name}\"\n            .configValue=\"${\"name\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n          <ha-icon-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.icon\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=\"${this._icon}\"\n            .placeholder=${this._icon ||\n              stateIcon(this.hass.states[this._entity])}\n            .configValue=\"${\"icon\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></ha-icon-input>\n        </div>\n\n        <hui-theme-select-editor\n          .hass=${this.hass}\n          .value=\"${this._theme}\"\n          .configValue=\"${\"theme\"}\"\n          @theme-changed=\"${this._valueChanged}\"\n        ></hui-theme-select-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-light-card-editor\": HuiLightCardEditor;\n  }\n}\n"],"sourceRoot":""}