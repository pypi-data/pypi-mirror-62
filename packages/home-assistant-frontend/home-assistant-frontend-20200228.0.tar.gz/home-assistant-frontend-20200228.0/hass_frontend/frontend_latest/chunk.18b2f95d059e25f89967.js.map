{"version":3,"sources":["webpack:///./src/panels/config/entities/entity-registry-basic-editor.ts","webpack:///./src/panels/config/entities/editor-tabs/settings/entity-settings-helper-tab.ts"],"names":["_decorate","customElement","_initialize","_LitElement","HaEntityRegistryBasicEditor","[object Object]","args","super","this","F","d","kind","decorators","property","key","value","async","_submitting","params","new_entity_id","_entityId","trim","_disabledBy","disabled_by","updateEntityRegistryEntry","hass","_origEntityId","err","changedProperties","_get","_getPrototypeOf","prototype","call","has","entry","entity_id","html","invalidDomainUpdate","computeDomain","_entityIdChanged","localize","_disabledByChanged","ev","detail","target","checked","static","css","LitElement","HELPERS","input_boolean","fetch","fetchInputBoolean","update","updateInputBoolean","delete","deleteInputBoolean","input_text","fetchInputText","updateInputText","deleteInputText","input_number","fetchInputNumber","updateInputNumber","deleteInputNumber","input_datetime","fetchInputDateTime","updateInputDateTime","deleteInputDateTime","input_select","fetchInputSelect","updateInputSelect","deleteInputSelect","EntityRegistrySettingsHelper","entity_settings_helper_tab_decorate","query","entity_settings_helper_tab_get","entity_settings_helper_tab_getPrototypeOf","_componentLoaded","isComponentLoaded","platform","_error","undefined","_item","_getItem","dialogElement","_valueChanged","dynamicElement","item","_confirmDeleteItem","_updateItem","name","items","find","id","unique_id","updateComplete","fireEvent","_this$_registryEditor","_registryEditor","updateEntry","message","showConfirmationDialog","text"],"mappings":"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","file":"chunk.18b2f95d059e25f89967.js","sourcesContent":["import {\n  html,\n  css,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\n\nimport \"@polymer/paper-input/paper-input\";\nimport \"../../../components/ha-switch\";\nimport {\n  ExtEntityRegistryEntry,\n  EntityRegistryEntryUpdateParams,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { HomeAssistant } from \"../../../types\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../components/ha-switch\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\n\n@customElement(\"ha-registry-basic-editor\")\nexport class HaEntityRegistryBasicEditor extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public entry!: ExtEntityRegistryEntry;\n  @property() private _origEntityId!: string;\n  @property() private _entityId!: string;\n  @property() private _disabledBy!: string | null;\n  @property() private _submitting?: boolean;\n\n  public async updateEntry(): Promise<void> {\n    this._submitting = true;\n    const params: Partial<EntityRegistryEntryUpdateParams> = {\n      new_entity_id: this._entityId.trim(),\n    };\n    if (this._disabledBy === null || this._disabledBy === \"user\") {\n      params.disabled_by = this._disabledBy;\n    }\n    try {\n      await updateEntityRegistryEntry(this.hass!, this._origEntityId, params);\n    } catch (err) {\n      throw err;\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (!changedProperties.has(\"entry\")) {\n      return;\n    }\n    if (this.entry) {\n      this._origEntityId = this.entry.entity_id;\n      this._entityId = this.entry.entity_id;\n      this._disabledBy = this.entry.disabled_by;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      !this.entry ||\n      this.entry.entity_id !== this._origEntityId\n    ) {\n      return html``;\n    }\n    const invalidDomainUpdate =\n      computeDomain(this._entityId.trim()) !==\n      computeDomain(this.entry.entity_id);\n\n    return html`\n      <paper-input\n        .value=${this._entityId}\n        @value-changed=${this._entityIdChanged}\n        .label=${this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.entity_id\"\n        )}\n        error-message=\"Domain needs to stay the same\"\n        .invalid=${invalidDomainUpdate}\n        .disabled=${this._submitting}\n      ></paper-input>\n      <div class=\"row\">\n        <ha-switch\n          .checked=${!this._disabledBy}\n          @change=${this._disabledByChanged}\n        >\n          <div>\n            <div>\n              ${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.enabled_label\"\n              )}\n            </div>\n            <div class=\"secondary\">\n              ${this._disabledBy && this._disabledBy !== \"user\"\n                ? this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.enabled_cause\",\n                    \"cause\",\n                    this.hass.localize(\n                      `config_entry.disabled_by.${this._disabledBy}`\n                    )\n                  )\n                : \"\"}\n              ${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.enabled_description\"\n              )}\n              <br />${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.note\"\n              )}\n            </div>\n          </div>\n        </ha-switch>\n      </div>\n    `;\n  }\n\n  private _entityIdChanged(ev: PolymerChangedEvent<string>): void {\n    this._entityId = ev.detail.value;\n  }\n\n  private _disabledByChanged(ev: Event): void {\n    this._disabledBy = (ev.target as HaSwitch).checked ? null : \"user\";\n  }\n\n  static get styles() {\n    return css`\n      .row {\n        margin-top: 8px;\n        color: var(--primary-text-color);\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport { dynamicElement } from \"../../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { HaPaperDialog } from \"../../../../../components/dialog/ha-paper-dialog\";\nimport { ExtEntityRegistryEntry } from \"../../../../../data/entity_registry\";\nimport {\n  deleteInputBoolean,\n  fetchInputBoolean,\n  updateInputBoolean,\n} from \"../../../../../data/input_boolean\";\nimport {\n  deleteInputDateTime,\n  fetchInputDateTime,\n  updateInputDateTime,\n} from \"../../../../../data/input_datetime\";\nimport {\n  deleteInputNumber,\n  fetchInputNumber,\n  updateInputNumber,\n} from \"../../../../../data/input_number\";\nimport {\n  deleteInputSelect,\n  fetchInputSelect,\n  updateInputSelect,\n} from \"../../../../../data/input_select\";\nimport {\n  deleteInputText,\n  fetchInputText,\n  updateInputText,\n} from \"../../../../../data/input_text\";\nimport { showConfirmationDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../helpers/forms/ha-input_boolean-form\";\nimport \"../../../helpers/forms/ha-input_text-form\";\nimport \"../../../helpers/forms/ha-input_datetime-form\";\nimport \"../../../helpers/forms/ha-input_select-form\";\nimport \"../../../helpers/forms/ha-input_number-form\";\nimport { Helper } from \"../../../helpers/const\";\nimport \"../../entity-registry-basic-editor\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaEntityRegistryBasicEditor } from \"../../entity-registry-basic-editor\";\n\nconst HELPERS = {\n  input_boolean: {\n    fetch: fetchInputBoolean,\n    update: updateInputBoolean,\n    delete: deleteInputBoolean,\n  },\n  input_text: {\n    fetch: fetchInputText,\n    update: updateInputText,\n    delete: deleteInputText,\n  },\n  input_number: {\n    fetch: fetchInputNumber,\n    update: updateInputNumber,\n    delete: deleteInputNumber,\n  },\n  input_datetime: {\n    fetch: fetchInputDateTime,\n    update: updateInputDateTime,\n    delete: deleteInputDateTime,\n  },\n  input_select: {\n    fetch: fetchInputSelect,\n    update: updateInputSelect,\n    delete: deleteInputSelect,\n  },\n};\n\n@customElement(\"entity-settings-helper-tab\")\nexport class EntityRegistrySettingsHelper extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public entry!: ExtEntityRegistryEntry;\n  @property() public dialogElement!: HaPaperDialog;\n  @property() private _error?: string;\n  @property() private _item?: Helper | null;\n  @property() private _submitting?: boolean;\n  @property() private _componentLoaded?: boolean;\n  @query(\"ha-registry-basic-editor\")\n  private _registryEditor?: HaEntityRegistryBasicEditor;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._componentLoaded = isComponentLoaded(this.hass, this.entry.platform);\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"entry\")) {\n      this._error = undefined;\n      this._item = undefined;\n      this._getItem();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._item === undefined) {\n      return html``;\n    }\n    if (!this._componentLoaded) {\n      return html`\n        <paper-dialog-scrollable .dialogElement=${this.dialogElement}>\n          The ${this.entry.platform} component is not loaded, please add it your\n          configuration. Either by adding 'default_config:' or\n          '${this.entry.platform}:'.\n        </paper-dialog-scrollable>\n      `;\n    }\n    if (this._item === null) {\n      return html`\n        <paper-dialog-scrollable .dialogElement=${this.dialogElement}>\n          This entity can not be edited from the UI. Only entities setup from\n          the UI are editable.\n        </paper-dialog-scrollable>\n      `;\n    }\n    return html`\n      <paper-dialog-scrollable .dialogElement=${this.dialogElement}>\n        ${this._error\n          ? html`\n              <div class=\"error\">${this._error}</div>\n            `\n          : \"\"}\n        <div class=\"form\">\n          <div @value-changed=${this._valueChanged}>\n            ${dynamicElement(`ha-${this.entry.platform}-form`, {\n              hass: this.hass,\n              item: this._item,\n              entry: this.entry,\n            })}\n          </div>\n          <ha-registry-basic-editor\n            .hass=${this.hass}\n            .entry=${this.entry}\n          ></ha-registry-basic-editor>\n        </div>\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <mwc-button\n          class=\"warning\"\n          @click=${this._confirmDeleteItem}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.delete\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._updateItem}\n          .disabled=${this._submitting || !this._item.name}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.update\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._error = undefined;\n    this._item = ev.detail.value;\n  }\n\n  private async _getItem() {\n    const items = await HELPERS[this.entry.platform].fetch(this.hass!);\n    this._item = items.find((item) => item.id === this.entry.unique_id) || null;\n    await this.updateComplete;\n    fireEvent(this.dialogElement as HTMLElement, \"iron-resize\");\n  }\n\n  private async _updateItem(): Promise<void> {\n    if (!this._item) {\n      return;\n    }\n    this._submitting = true;\n    try {\n      await HELPERS[this.entry.platform].update(\n        this.hass!,\n        this._item.id,\n        this._item\n      );\n      await this._registryEditor?.updateEntry();\n      fireEvent(this, \"close-dialog\");\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _confirmDeleteItem(): Promise<void> {\n    if (!this._item) {\n      return;\n    }\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.confirm_delete\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      await HELPERS[this.entry.platform].delete(this.hass!, this._item.id);\n      fireEvent(this, \"close-dialog\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: block;\n        padding: 0 !important;\n      }\n      .form {\n        padding-bottom: 24px;\n      }\n      .buttons {\n        display: flex;\n        justify-content: space-between;\n        padding: 8px;\n        margin-bottom: -20px;\n      }\n      mwc-button.warning {\n        --mdc-theme-primary: var(--google-red-500);\n      }\n      .error {\n        color: var(--google-red-500);\n      }\n      .row {\n        margin-top: 8px;\n        color: var(--primary-text-color);\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-platform-helper-tab\": EntityRegistrySettingsHelper;\n  }\n}\n"],"sourceRoot":""}