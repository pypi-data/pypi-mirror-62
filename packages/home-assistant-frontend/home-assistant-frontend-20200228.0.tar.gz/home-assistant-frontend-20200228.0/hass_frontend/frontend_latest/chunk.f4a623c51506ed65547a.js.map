{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-resizable-behavior/iron-resizable-behavior.js","webpack:///./node_modules/@polymer/paper-toast/paper-toast.js","webpack:///./src/components/ha-toast.ts","webpack:///./src/managers/notification-manager.ts","webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js"],"names":["__webpack_require__","d","__webpack_exports__","IronResizableBehavior","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_utils_settings_js__WEBPACK_IMPORTED_MODULE_2__","ORPHANS","Set","properties","_parentResizable","type","Object","observer","_notifyingDescendant","Boolean","value","listeners","iron-request-resize-notifications","created","this","_interestedResizables","_boundNotifyResize","notifyResize","bind","_boundOnDescendantIronResize","_onDescendantIronResize","attached","_requestResizeNotifications","detached","stopResizeNotificationsFor","delete","window","removeEventListener","isAttached","forEach","resizable","resizerShouldNotify","_notifyDescendant","_fireResize","assignParentResizable","parentResizable","indexOf","push","_subscribeIronResize","target","index","splice","_unsubscribeIronResize","addEventListener","element","event","stopPropagation","useShadow","fire","node","bubbles","_onIronRequestResizeNotifications","dom","rootTarget","_parentResizableChanged","descendant","document","readyState","readystatechanged","_findParent","orphan","cancelable","add","currentToast","Polymer","_template","html","is","behaviors","IronOverlayBehavior","fitInto","horizontalAlign","String","verticalAlign","duration","Number","text","noCancelOnOutsideClick","noAutoFocus","transitionend","visible","Base","_warn","opened","_canAutoClose","Infinity","_autoClose","IronA11yAnnouncer","requestAvailability","show","property","open","hide","close","__onTransitionEnd","e","propertyName","_finishRenderOpened","_finishRenderClosed","_openedChanged","cancelAsync","async","IronOverlayBehaviorImpl","apply","arguments","_renderOpened","classList","_renderClosed","remove","_onFitIntoChanged","positionTarget","PaperToast","customElements","get","define","[object Object]","args","super","_defineProperty","connectedCallback","_resizeListener","ev","toggle","matches","_mediaq","matchMedia","addListener","disconnectedCallback","removeListener","NotificationManager","_LitElement","_initialize","query","message","action","dismissable","toast","_toast","updateComplete","setAttribute","computeRTL","hass","_action","undefined","_noCancelOnOutsideClick","buttonClicked","css","LitElement","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_2__","mode","_text","instance","body","_onIronAnnounce","announce","detail","createElement","appendChild"],"mappings":";uFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAA,OAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,IAgBIM,EAAU,IAAIC,IAoBX,MAAMJ,EAAwB,CACnCK,WAAY,CAIVC,iBAAkB,CAChBC,KAAMC,OACNC,SAAU,2BAOZC,qBAAsB,CACpBH,KAAMI,QACNC,OAAO,IAIXC,UAAW,CACTC,oCAAqC,qCAGvCC,QAAS,WAGPC,KAAKC,sBAAwB,GAC7BD,KAAKE,mBAAqBF,KAAKG,aAAaC,KAAKJ,MACjDA,KAAKK,6BAA+BL,KAAKM,wBAAwBF,KAAKJ,OAGxEO,SAAU,WACRP,KAAKQ,+BAGPC,SAAU,WACJT,KAAKV,iBACPU,KAAKV,iBAAiBoB,2BAA2BV,OAEjDb,EAAQwB,OAAOX,MACfY,OAAOC,oBAAoB,SAAUb,KAAKE,qBAG5CF,KAAKV,iBAAmB,MAO1Ba,aAAc,WACPH,KAAKc,aAIVd,KAAKC,sBAAsBc,QAAQ,SAASC,GACtChB,KAAKiB,oBAAoBD,IAC3BhB,KAAKkB,kBAAkBF,IAExBhB,MAEHA,KAAKmB,gBAOPC,sBAAuB,SAASC,GAC1BrB,KAAKV,kBACPU,KAAKV,iBAAiBoB,2BAA2BV,MAGnDA,KAAKV,iBAAmB+B,EAEpBA,IACyD,IAAzDA,EAAgBpB,sBAAsBqB,QAAQtB,QAChDqB,EAAgBpB,sBAAsBsB,KAAKvB,MAC3CqB,EAAgBG,qBAAqBxB,QAQzCU,2BAA4B,SAASe,GACnC,IAAIC,EAAQ1B,KAAKC,sBAAsBqB,QAAQG,GAE3CC,GAAS,IACX1B,KAAKC,sBAAsB0B,OAAOD,EAAO,GACzC1B,KAAK4B,uBAAuBH,KAYhCD,qBAAsB,SAASC,GAC7BA,EAAOI,iBAAiB,cAAe7B,KAAKK,+BAY9CuB,uBAAwB,SAASH,GAC/BA,EAAOZ,oBACH,cAAeb,KAAKK,+BAY1BY,oBAAqB,SAASa,GAC5B,OAAO,GAGTxB,wBAAyB,SAASyB,GAC5B/B,KAAKN,qBACPqC,EAAMC,kBAKHC,KACHjC,KAAKmB,eAITA,YAAa,WACXnB,KAAKkC,KAAK,cAAe,KAAM,CAACC,KAAMnC,KAAMoC,SAAS,KAGvDC,kCAAmC,SAASN,GAC1C,IAAIN,EAAsCa,YAAIP,GAAOQ,WACjDd,IAAWzB,OAIfyB,EAAOL,sBAAsBpB,MAC7BA,KAAKkB,kBAAkBO,GAEvBM,EAAMC,oBAGRQ,wBAAyB,SAASnB,GAC5BA,GACFT,OAAOC,oBAAoB,SAAUb,KAAKE,qBAI9CgB,kBAAmB,SAASuB,GAIrBzC,KAAKc,aAIVd,KAAKN,sBAAuB,EAC5B+C,EAAWtC,eACXH,KAAKN,sBAAuB,IAG9Bc,4BAA6B,WAC3B,GAAKR,KAAKc,WAIV,GAA4B,YAAxB4B,SAASC,WAA0B,CACrC,IAAInC,EACAR,KAAKQ,4BAA4BJ,KAAKJ,MAC1C0C,SAASb,iBACL,mBAAoB,SAASe,IAC3BF,SAAS7B,oBAAoB,mBAAoB+B,GACjDpC,WAGNR,KAAK6C,cAEA7C,KAAKV,iBAeRU,KAAKV,iBAAiBW,sBACjBc,QAAQ,SAASC,GACZA,IAAchB,MAChBgB,EAAU6B,eAEX7C,OAjBPb,EAAQ4B,QAAQ,SAAS+B,GACnBA,IAAW9C,MACb8C,EAAOD,eAER7C,MAEHY,OAAOiB,iBAAiB,SAAU7B,KAAKE,oBACvCF,KAAKG,iBAeX0C,YAAa,WACX7C,KAAKoB,sBAAsB,MAC3BpB,KAAKkC,KACD,oCACA,KACA,CAACC,KAAMnC,KAAMoC,SAAS,EAAMW,YAAY,IAEvC/C,KAAKV,iBAGRH,EAAQwB,OAAOX,MAFfb,EAAQ6D,IAAIhD,iHC1PdiD,EAAe,6HAuDnBC,YAAQ,CACNC,UAAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8CXC,GAAI,cACJC,UAAW,CAACC,KAEZlE,WAAY,CAKVmE,QAAS,CAACjE,KAAMC,OAAQI,MAAOgB,OAAQnB,SAAU,qBAOjDgE,gBAAiB,CAAClE,KAAMmE,OAAQ9D,MAAO,QAOvC+D,cAAe,CAACpE,KAAMmE,OAAQ9D,MAAO,UAOrCgE,SAAU,CAACrE,KAAMsE,OAAQjE,MAAO,KAKhCkE,KAAM,CAACvE,KAAMmE,OAAQ9D,MAAO,IAM5BmE,uBAAwB,CAACxE,KAAMI,QAASC,OAAO,GAO/CoE,YAAa,CAACzE,KAAMI,QAASC,OAAO,IAGtCC,UAAW,CAACoE,cAAiB,qBAO7BC,cAEE,OADAC,IAAKC,MAAM,iDACJpE,KAAKqE,QAOdC,oBACE,OAAOtE,KAAK4D,SAAW,GAAK5D,KAAK4D,WAAaW,KAGhDxE,QAAS,WACPC,KAAKwE,WAAa,KAClBC,IAAkBC,uBASpBC,KAAM,SAAStF,GAIb,IAAK,IAAIuF,IAHgB,iBAAdvF,IACTA,EAAa,CAACyE,KAAMzE,IAEDA,EACW,IAA1BuF,EAAStD,QAAQ,KACnB6C,IAAKC,MACD,iBAAmBQ,EAAW,iCACzBA,KAAY5E,KACrBA,KAAK4E,GAAYvF,EAAWuF,GAE5BT,IAAKC,MAAM,iBAAmBQ,EAAW,mBAG7C5E,KAAK6E,QAMPC,KAAM,WACJ9E,KAAK+E,SAOPC,kBAAmB,SAASC,GAKtBA,GAAKA,EAAExD,SAAWzB,MAA2B,YAAnBiF,EAAEC,eAC1BlF,KAAKqE,OACPrE,KAAKmF,sBAELnF,KAAKoF,wBASXC,eAAgB,WACU,OAApBrF,KAAKwE,aACPxE,KAAKsF,YAAYtF,KAAKwE,YACtBxE,KAAKwE,WAAa,MAEhBxE,KAAKqE,QACHpB,GAAgBA,IAAiBjD,MACnCiD,EAAa8B,QAEf9B,EAAejD,KACfA,KAAKkC,KAAK,gBAAiB,CAAC4B,KAAM9D,KAAK8D,OACnC9D,KAAKsE,gBACPtE,KAAKwE,WAAaxE,KAAKuF,MAAMvF,KAAK+E,MAAO/E,KAAK4D,YAEvCX,IAAiBjD,OAC1BiD,EAAe,MAEjBuC,IAAwBH,eAAeI,MAAMzF,KAAM0F,YAMrDC,cAAe,WACb3F,KAAK4F,UAAU5C,IAAI,qBAMrB6C,cAAe,WACb7F,KAAK4F,UAAUE,OAAO,qBAMxBC,kBAAmB,SAASvC,GAC1BxD,KAAKgG,eAAiBxC,KCzR1B,MAAMyC,EAAaC,eAAeC,IAAI,otCA8BtCD,eAAeE,OAAO,WA5Bf,cAAsBH,EAAWI,eAAAC,GAAAC,SAAAD,GAAAE,EAAAxG,KAAA,0BAAAwG,EAAAxG,KAAA,kBAI/ByG,oBACLF,MAAME,oBAEDzG,KAAK0G,kBACR1G,KAAK0G,gBAAmBC,IACtB3G,KAAK4F,UAAUgB,OAAO,aAAcD,EAAGE,UACzC7G,KAAK8G,QAAUlG,OAAOmG,WAAW,sBAEnC/G,KAAK8G,QAASE,YAAYhH,KAAK0G,iBAC/B1G,KAAK0G,gBAAgB1G,KAAK8G,SAGrBG,uBACLV,MAAMU,uBACNjH,KAAK8G,QAASI,eAAelH,KAAK0G,wBCMhCS,22LAAN,cAAAC,EAA6Cf,eAAAC,GAAAC,SAAAD,GAAAe,EAAArH,qCAC1C4E,kEAEAA,qEACAA,wDAAsD,6BAEtD0C,YAAM,8EAEP/B,gBAAwBgC,QACtBA,EADsBC,OAEtBA,EAFsB5D,SAGtBA,EAHsB6D,YAItBA,IAEA,IAAIC,EAAQ1H,KAAK2H,OAEZD,UACG1H,KAAK4H,eACXF,EAAQ1H,KAAK2H,QAEfD,EAAMG,aAAa,MAAOC,YAAW9H,KAAK+H,MAAQ,MAAQ,OAC1D/H,KAAKgI,QAAUR,QAAUS,EACzBjI,KAAKkI,6BACaD,IAAhBR,IAAqCA,EACvCC,EAAM5C,OACN4C,EAAM/C,KAAK,CACTb,KAAMyD,EACN3D,cAAuBqE,IAAbrE,EAAyB,IAAOA,wCAI9C,WACE,OAAOR;0CAC+BpD,KAAKkI;UACrClI,KAAKgI,QACH5E;;yBAEapD,KAAKgI,QAAQlE;yBACb9D,KAAKmI;;cAGlB;;iDAKV,WACEnI,KAAK2H,OAAO7C,OACR9E,KAAKgI,SACPhI,KAAKgI,QAAQR,oDAIjB,WACE,OAAOY;;;;;;;;;WAtDuBC,KAmElCnC,eAAeE,OAAO,uBAAwBe,oCChG9CtI,EAAAC,EAAAC,EAAA,sBAAA0F,IAAA5F,EAAA,OAAAyJ,EAAAzJ,EAAA,GAAA0J,EAAA1J,EAAA,GAgDO,MAAM4F,EAAoBvB,YAAQ,CACvCC,UAAWC;;;;;;;;;EAWXC,GAAI,sBAEJhE,WAAY,CAOVmJ,KAAM,CAACjJ,KAAMmE,OAAQ9D,MAAO,UAE5B6I,MAAO,CAAClJ,KAAMmE,OAAQ9D,MAAO,KAG/BG,QAAS,WACF0E,EAAkBiE,WACrBjE,EAAkBiE,SAAW1I,MAG/B0C,SAASiG,KAAK9G,iBACV,gBAAiB7B,KAAK4I,gBAAgBxI,KAAKJ,QAQjD6I,SAAU,SAAS/E,GACjB9D,KAAKyI,MAAQ,GACbzI,KAAKuF,MAAM,WACTvF,KAAKyI,MAAQ3E,GACZ,MAGL8E,gBAAiB,SAAS7G,GACpBA,EAAM+G,QAAU/G,EAAM+G,OAAOhF,MAC/B9D,KAAK6I,SAAS9G,EAAM+G,OAAOhF,SAKjCW,EAAkBiE,SAAW,KAE7BjE,EAAkBC,oBAAsB,WACjCD,EAAkBiE,WACrBjE,EAAkBiE,SAAWhG,SAASqG,cAAc,wBAGtDrG,SAASiG,KAAKK,YAAYvE,EAAkBiE","file":"chunk.f4a623c51506ed65547a.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {useShadow} from '@polymer/polymer/lib/utils/settings.js';\n\n// Contains all connected resizables that do not have a parent.\nvar ORPHANS = new Set();\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that\n *control the size or hidden state of their children) and \"resizables\" (elements\n *that need to be notified when they are resized or un-hidden by their parents\n *in order to take action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior`\n *behavior to their element definition and listen for the `iron-resize` event on\n *themselves. This event will be fired when they become showing after having\n *been hidden, when they are resized explicitly by another resizable, or when\n *the window has been resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior\n * @demo demo/index.html\n **/\nexport const IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged',\n    },\n\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false,\n    }\n  },\n\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n\n  created: function() {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);\n  },\n\n  attached: function() {\n    this._requestResizeNotifications();\n  },\n\n  detached: function() {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      ORPHANS.delete(this);\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n\n    this._parentResizable = null;\n  },\n\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._interestedResizables.forEach(function(resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n\n    this._fireResize();\n  },\n\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function(parentResizable) {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    }\n\n    this._parentResizable = parentResizable;\n\n    if (parentResizable &&\n        parentResizable._interestedResizables.indexOf(this) === -1) {\n      parentResizable._interestedResizables.push(this);\n      parentResizable._subscribeIronResize(this);\n    }\n  },\n\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function(target) {\n    var index = this._interestedResizables.indexOf(target);\n\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this._unsubscribeIronResize(target);\n    }\n  },\n\n  /**\n   * Subscribe this element to listen to iron-resize events on the given target.\n   *\n   * Preferred over target.listen because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _subscribeIronResize: function(target) {\n    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * Unsubscribe this element from listening to to iron-resize events on the\n   * given target.\n   *\n   * Preferred over target.unlisten because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _unsubscribeIronResize: function(target) {\n    target.removeEventListener(\n        'iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function(element) {\n    return true;\n  },\n\n  _onDescendantIronResize: function(event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // no need to use this during shadow dom because of event retargeting\n    if (!useShadow) {\n      this._fireResize();\n    }\n  },\n\n  _fireResize: function() {\n    this.fire('iron-resize', null, {node: this, bubbles: false});\n  },\n\n  _onIronRequestResizeNotifications: function(event) {\n    var target = /** @type {!EventTarget} */ (dom(event).rootTarget);\n    if (target === this) {\n      return;\n    }\n\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n\n    event.stopPropagation();\n  },\n\n  _parentResizableChanged: function(parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n\n  _notifyDescendant: function(descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n\n  _requestResizeNotifications: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications =\n          this._requestResizeNotifications.bind(this);\n      document.addEventListener(\n          'readystatechange', function readystatechanged() {\n            document.removeEventListener('readystatechange', readystatechanged);\n            _requestResizeNotifications();\n          });\n    } else {\n      this._findParent();\n\n      if (!this._parentResizable) {\n        // If this resizable is an orphan, tell other orphans to try to find\n        // their parent again, in case it's this resizable.\n        ORPHANS.forEach(function(orphan) {\n          if (orphan !== this) {\n            orphan._findParent();\n          }\n        }, this);\n\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      } else {\n        // If this resizable has a parent, tell other child resizables of\n        // that parent to try finding their parent again, in case it's this\n        // resizable.\n        this._parentResizable._interestedResizables\n            .forEach(function(resizable) {\n              if (resizable !== this) {\n                resizable._findParent();\n              }\n            }, this);\n      }\n    }\n  },\n\n  _findParent: function() {\n    this.assignParentResizable(null);\n    this.fire(\n        'iron-request-resize-notifications',\n        null,\n        {node: this, bubbles: true, cancelable: true});\n\n    if (!this._parentResizable) {\n      ORPHANS.add(this);\n    } else {\n      ORPHANS.delete(this);\n    }\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronOverlayBehavior, IronOverlayBehaviorImpl} from '@polymer/iron-overlay-behavior/iron-overlay-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n// Keeps track of the toast currently opened.\nvar currentToast = null;\n\n/**\nMaterial design: [Snackbars &\ntoasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    <paper-toast text=\"Hello world!\" opened></paper-toast>\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    <paper-button on-click=\"openToast\">Open Toast</paper-button>\n    <paper-toast id=\"toast\" text=\"Hello world!\"></paper-toast>\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on\nscreen:\n\nExample:\n\n    <paper-toast text=\"Terms and conditions\" opened duration=\"0\">\n      <a href=\"#\">Show more</a>\n    </paper-toast>\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.\n\n@group Paper Elements\n@element paper-toast\n@demo demo/index.html\n@hero hero.svg\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        position: fixed;\n        background-color: var(--paper-toast-background-color, #323232);\n        color: var(--paper-toast-color, #f1f1f1);\n        min-height: 48px;\n        min-width: 288px;\n        padding: 16px 24px;\n        box-sizing: border-box;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n        border-radius: 2px;\n        margin: 12px;\n        font-size: 14px;\n        cursor: default;\n        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        opacity: 0;\n        -webkit-transform: translateY(100px);\n        transform: translateY(100px);\n        @apply --paper-font-common-base;\n      }\n\n      :host(.capsule) {\n        border-radius: 24px;\n      }\n\n      :host(.fit-bottom) {\n        width: 100%;\n        min-width: 0;\n        border-radius: 0;\n        margin: 0;\n      }\n\n      :host(.paper-toast-open) {\n        opacity: 1;\n        -webkit-transform: translateY(0px);\n        transform: translateY(0px);\n      }\n    </style>\n\n    <span id=\"label\">{{text}}</span>\n    <slot></slot>\n`,\n\n  is: 'paper-toast',\n  behaviors: [IronOverlayBehavior],\n\n  properties: {\n    /**\n     * The element to fit `this` into.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    fitInto: {type: Object, value: window, observer: '_onFitIntoChanged'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * horizontally relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    horizontalAlign: {type: String, value: 'left'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * vertically relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    verticalAlign: {type: String, value: 'bottom'},\n\n    /**\n     * The duration in milliseconds to show the toast.\n     * Set to `0`, a negative number, or `Infinity`, to disable the\n     * toast auto-closing.\n     */\n    duration: {type: Number, value: 3000},\n\n    /**\n     * The text to display in the toast.\n     */\n    text: {type: String, value: ''},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to false to enable closing of the toast by clicking outside it.\n     */\n    noCancelOnOutsideClick: {type: Boolean, value: true},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to true to disable auto-focusing the toast or child nodes with\n     * the `autofocus` attribute` when the overlay is opened.\n     */\n    noAutoFocus: {type: Boolean, value: true}\n  },\n\n  listeners: {'transitionend': '__onTransitionEnd'},\n\n  /**\n   * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.\n   * @property visible\n   * @deprecated\n   */\n  get visible() {\n    Base._warn('`visible` is deprecated, use `opened` instead');\n    return this.opened;\n  },\n\n  /**\n   * Read-only. Can auto-close if duration is a positive finite number.\n   * @property _canAutoClose\n   */\n  get _canAutoClose() {\n    return this.duration > 0 && this.duration !== Infinity;\n  },\n\n  created: function() {\n    this._autoClose = null;\n    IronA11yAnnouncer.requestAvailability();\n  },\n\n  /**\n   * Show the toast. Without arguments, this is the same as `open()` from\n   * `IronOverlayBehavior`.\n   * @param {(Object|string)=} properties Properties to be set before opening the toast.\n   * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`\n   */\n  show: function(properties) {\n    if (typeof properties == 'string') {\n      properties = {text: properties};\n    }\n    for (var property in properties) {\n      if (property.indexOf('_') === 0) {\n        Base._warn(\n            'The property \"' + property + '\" is private and was not set.');\n      } else if (property in this) {\n        this[property] = properties[property];\n      } else {\n        Base._warn('The property \"' + property + '\" is not valid.');\n      }\n    }\n    this.open();\n  },\n\n  /**\n   * Hide the toast. Same as `close()` from `IronOverlayBehavior`.\n   */\n  hide: function() {\n    this.close();\n  },\n\n  /**\n   * Called on transitions of the toast, indicating a finished animation\n   * @private\n   */\n  __onTransitionEnd: function(e) {\n    // there are different transitions that are happening when opening and\n    // closing the toast. The last one so far is for `opacity`.\n    // This marks the end of the transition, so we check for this to determine\n    // if this is the correct event.\n    if (e && e.target === this && e.propertyName === 'opacity') {\n      if (this.opened) {\n        this._finishRenderOpened();\n      } else {\n        this._finishRenderClosed();\n      }\n    }\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   * Called when the value of `opened` changes.\n   */\n  _openedChanged: function() {\n    if (this._autoClose !== null) {\n      this.cancelAsync(this._autoClose);\n      this._autoClose = null;\n    }\n    if (this.opened) {\n      if (currentToast && currentToast !== this) {\n        currentToast.close();\n      }\n      currentToast = this;\n      this.fire('iron-announce', {text: this.text});\n      if (this._canAutoClose) {\n        this._autoClose = this.async(this.close, this.duration);\n      }\n    } else if (currentToast === this) {\n      currentToast = null;\n    }\n    IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderOpened: function() {\n    this.classList.add('paper-toast-open');\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderClosed: function() {\n    this.classList.remove('paper-toast-open');\n  },\n\n  /**\n   * @private\n   */\n  _onFitIntoChanged: function(fitInto) {\n    this.positionTarget = fitInto;\n  }\n\n  /**\n   * Fired when `paper-toast` is opened.\n   *\n   * @event 'iron-announce'\n   * @param {{text: string}} detail Contains text that will be announced.\n   */\n});\n","import \"@polymer/paper-toast/paper-toast\";\n\n// tslint:disable-next-line\nconst PaperToast = customElements.get(\"paper-toast\");\n\nexport class HaToast extends PaperToast {\n  private _resizeListener?: (obj: { matches: boolean }) => unknown;\n  private _mediaq?: MediaQueryList;\n\n  public connectedCallback() {\n    super.connectedCallback();\n\n    if (!this._resizeListener) {\n      this._resizeListener = (ev) =>\n        this.classList.toggle(\"fit-bottom\", ev.matches);\n      this._mediaq = window.matchMedia(\"(max-width: 599px\");\n    }\n    this._mediaq!.addListener(this._resizeListener);\n    this._resizeListener(this._mediaq!);\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._mediaq!.removeListener(this._resizeListener!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-toast\": HaToast;\n  }\n}\n\ncustomElements.define(\"ha-toast\", HaToast);\n","import {\n  LitElement,\n  query,\n  property,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport { HomeAssistant } from \"../types\";\nimport \"@material/mwc-button\";\nimport \"../components/ha-toast\";\n// Typing\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaToast } from \"../components/ha-toast\";\n\nexport interface ShowToastParams {\n  message: string;\n  action?: ToastActionParams;\n  duration?: number;\n  dismissable?: boolean;\n}\n\nexport interface ToastActionParams {\n  action: () => void;\n  text: string;\n}\n\nclass NotificationManager extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _action?: ToastActionParams;\n  @property() private _noCancelOnOutsideClick: boolean = false;\n\n  @query(\"ha-toast\") private _toast!: HaToast;\n\n  public async showDialog({\n    message,\n    action,\n    duration,\n    dismissable,\n  }: ShowToastParams) {\n    let toast = this._toast;\n    // Can happen on initial load\n    if (!toast) {\n      await this.updateComplete;\n      toast = this._toast;\n    }\n    toast.setAttribute(\"dir\", computeRTL(this.hass) ? \"rtl\" : \"ltr\");\n    this._action = action || undefined;\n    this._noCancelOnOutsideClick =\n      dismissable === undefined ? false : !dismissable;\n    toast.hide();\n    toast.show({\n      text: message,\n      duration: duration === undefined ? 3000 : duration,\n    });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-toast .noCancelOnOutsideClick=${this._noCancelOnOutsideClick}>\n        ${this._action\n          ? html`\n              <mwc-button\n                .label=${this._action.text}\n                @click=${this.buttonClicked}\n              ></mwc-button>\n            `\n          : \"\"}\n      </ha-toast>\n    `;\n  }\n\n  private buttonClicked() {\n    this._toast.hide();\n    if (this._action) {\n      this._action.action();\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      mwc-button {\n        color: var(--primary-color);\n        font-weight: bold;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"notification-manager\", NotificationManager);\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"hass-notification\": ShowToastParams;\n  }\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n"],"sourceRoot":""}