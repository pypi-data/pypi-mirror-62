Metadata-Version: 1.2
Name: argparse-dataclass
Version: 0.1.dev4
Summary: Declarative CLIs with argparse and dataclasses
Home-page: UNKNOWN
Author: Michael V. DePalatis
Author-email: mike@depalatis.net
License: UNKNOWN
Description: ``argparse_dataclass``
        ======================
        
        Declarative CLIs with ``argparse`` and ``dataclasses``.
        
        .. image:: https://travis-ci.org/mivade/argparse_dataclass.svg?branch=master
            :target: https://travis-ci.org/mivade/argparse_dataclass
        
        .. image:: https://img.shields.io/pypi/v/argparse_dataclass
            :alt: PyPI
        
        Features
        --------
        
        Features marked with a ✓ are currently implemented; features marked with a ⊘
        are not yet implemented.
        
        - [✓] Positional arguments
        - [✓] Boolean flags
        - [✓] Integer, string, float, and other simple types as arguments
        - [✓] Default values
        - [✓] Arguments with a finite set of choices
        - [⊘] Subcommands
        - [⊘] Mutually exclusive groups
        
        Examples
        --------
        
        A simple parser with flags:
        
        .. code-block:: pycon
        
            >>> from dataclasses import dataclass
            >>> from argparse_dataclass import ArgumentParser
            >>> @dataclass
            ... class Options:
            ...     verbose: bool
            ...     other_flag: bool
            ...
            >>> parser = ArgumentParser(Options)
            >>> print(parser.parse_args([]))
            Options(verbose=False, other_flag=False)
            >>> print(parser.parse_args(["--verbose", "--other-flag"]))
            Options(verbose=True, other_flag=True)
        
        Using defaults:
        
        .. code-block:: pycon
        
            >>> from dataclasses import dataclass, field
            >>> from argparse_dataclass import ArgumentParser
            >>> @dataclass
            ... class Options:
            ...     x: int = 1
            ...     y: int = field(default=2)
            ...     z: float = field(default_factory=lambda: 3.14)
            ...
            >>> parser = ArgumentParser(Options)
            >>> print(parser.parse_args([]))
            Options(x=1, y=2, z=3.14)
        
        Enabling choices for an option:
        
        .. code-block:: pycon
        
            >>> from dataclasses import dataclass, field
            >>> from argparse_dataclass import ArgumentParser
            >>> @dataclass
            ... class Options:
            ...     small_integer: int = field(metadata=dict(choices=[1, 2, 3]))
            ...
            >>> parser = ArgumentParser(Options)
            >>> print(parser.parse_args(["--small-integer", "3"]))
            Options(small_integer=3)
        
        Using different flag names and positional arguments:
        
        .. code-block:: pycon
        
            >>> from dataclasses import dataclass, field
            >>> from argparse_dataclass import ArgumentParser
            >>> @dataclass
            ... class Options:
            ...     x: int = field(metadata=dict(args=["-x", "--long-name"]))
            ...     positional: str = field(metadata=dict(args=["positional"]))
            ...
            >>> parser = ArgumentParser(Options)
            >>> print(parser.parse_args(["-x", "0", "positional"]))
            Options(x=0, positional='positional')
            >>> print(parser.parse_args(["--long-name", 0, "positional"]))
            Options(x=0, positional='positional')
        
        License
        -------
        
        MIT License
        
        Copyright (c) 2020 Michael V. DePalatis
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
