# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyattyscomm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyattyscomm')
    _pyattyscomm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyattyscomm', [dirname(__file__)])
        except ImportError:
            import _pyattyscomm
            return _pyattyscomm
        try:
            _mod = imp.load_module('_pyattyscomm', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyattyscomm = swig_import_helper()
    del swig_import_helper
else:
    import _pyattyscomm
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


TIMEOUT_IN_SECS = _pyattyscomm.TIMEOUT_IN_SECS
class AttysCommListener(_object):
    """Proxy of C++ AttysCommListener class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysCommListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysCommListener, name)
    __repr__ = _swig_repr

    def hasSample(self, arg0: 'double', arg1: 'float *') -> "void":
        """
        hasSample(AttysCommListener self, double arg0, float * arg1)

        Parameters
        ----------
        arg0: double
        arg1: float *

        """
        return _pyattyscomm.AttysCommListener_hasSample(self, arg0, arg1)

    __swig_destroy__ = _pyattyscomm.delete_AttysCommListener
    __del__ = lambda self: None

    def __init__(self):
        """
        __init__(AttysCommListener self) -> AttysCommListener

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == AttysCommListener:
            _self = None
        else:
            _self = self
        this = _pyattyscomm.new_AttysCommListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pyattyscomm.disown_AttysCommListener(self)
        return weakref_proxy(self)
AttysCommListener_swigregister = _pyattyscomm.AttysCommListener_swigregister
AttysCommListener_swigregister(AttysCommListener)

class AttysCommMessage(_object):
    """Proxy of C++ AttysCommMessage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysCommMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysCommMessage, name)
    __repr__ = _swig_repr

    def hasMessage(self, arg0: 'int', arg1: 'char const *') -> "void":
        """
        hasMessage(AttysCommMessage self, int arg0, char const * arg1)

        Parameters
        ----------
        arg0: int
        arg1: char const *

        """
        return _pyattyscomm.AttysCommMessage_hasMessage(self, arg0, arg1)

    __swig_destroy__ = _pyattyscomm.delete_AttysCommMessage
    __del__ = lambda self: None

    def __init__(self):
        """
        __init__(AttysCommMessage self) -> AttysCommMessage

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == AttysCommMessage:
            _self = None
        else:
            _self = self
        this = _pyattyscomm.new_AttysCommMessage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pyattyscomm.disown_AttysCommMessage(self)
        return weakref_proxy(self)
AttysCommMessage_swigregister = _pyattyscomm.AttysCommMessage_swigregister
AttysCommMessage_swigregister(AttysCommMessage)

class AttysCommBase(_object):
    """Proxy of C++ AttysCommBase class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysCommBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysCommBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyattyscomm.delete_AttysCommBase
    __del__ = lambda self: None
    NCHANNELS = _pyattyscomm.AttysCommBase_NCHANNELS
    nMem = _pyattyscomm.AttysCommBase_nMem
    INDEX_Acceleration_X = _pyattyscomm.AttysCommBase_INDEX_Acceleration_X
    INDEX_Acceleration_Y = _pyattyscomm.AttysCommBase_INDEX_Acceleration_Y
    INDEX_Acceleration_Z = _pyattyscomm.AttysCommBase_INDEX_Acceleration_Z
    INDEX_Magnetic_field_X = _pyattyscomm.AttysCommBase_INDEX_Magnetic_field_X
    INDEX_Magnetic_field_Y = _pyattyscomm.AttysCommBase_INDEX_Magnetic_field_Y
    INDEX_Magnetic_field_Z = _pyattyscomm.AttysCommBase_INDEX_Magnetic_field_Z
    INDEX_Analogue_channel_1 = _pyattyscomm.AttysCommBase_INDEX_Analogue_channel_1
    INDEX_Analogue_channel_2 = _pyattyscomm.AttysCommBase_INDEX_Analogue_channel_2
    INDEX_GPIO0 = _pyattyscomm.AttysCommBase_INDEX_GPIO0
    INDEX_GPIO1 = _pyattyscomm.AttysCommBase_INDEX_GPIO1
    __swig_getmethods__["CHANNEL_DESCRIPTION"] = _pyattyscomm.AttysCommBase_CHANNEL_DESCRIPTION_get
    if _newclass:
        CHANNEL_DESCRIPTION = _swig_property(_pyattyscomm.AttysCommBase_CHANNEL_DESCRIPTION_get)
    __swig_getmethods__["CHANNEL_SHORT_DESCRIPTION"] = _pyattyscomm.AttysCommBase_CHANNEL_SHORT_DESCRIPTION_get
    if _newclass:
        CHANNEL_SHORT_DESCRIPTION = _swig_property(_pyattyscomm.AttysCommBase_CHANNEL_SHORT_DESCRIPTION_get)
    __swig_getmethods__["CHANNEL_UNITS"] = _pyattyscomm.AttysCommBase_CHANNEL_UNITS_get
    if _newclass:
        CHANNEL_UNITS = _swig_property(_pyattyscomm.AttysCommBase_CHANNEL_UNITS_get)
    ADC_RATE_125HZ = _pyattyscomm.AttysCommBase_ADC_RATE_125HZ
    ADC_RATE_250HZ = _pyattyscomm.AttysCommBase_ADC_RATE_250HZ
    ADC_RATE_500Hz = _pyattyscomm.AttysCommBase_ADC_RATE_500Hz
    ADC_DEFAULT_RATE = _pyattyscomm.AttysCommBase_ADC_DEFAULT_RATE
    __swig_getmethods__["ADC_SAMPLINGRATE"] = _pyattyscomm.AttysCommBase_ADC_SAMPLINGRATE_get
    if _newclass:
        ADC_SAMPLINGRATE = _swig_property(_pyattyscomm.AttysCommBase_ADC_SAMPLINGRATE_get)
    __swig_setmethods__["adc_rate_index"] = _pyattyscomm.AttysCommBase_adc_rate_index_set
    __swig_getmethods__["adc_rate_index"] = _pyattyscomm.AttysCommBase_adc_rate_index_get
    if _newclass:
        adc_rate_index = _swig_property(_pyattyscomm.AttysCommBase_adc_rate_index_get, _pyattyscomm.AttysCommBase_adc_rate_index_set)

    def setAdc_samplingrate_index(self, idx: 'int') -> "void":
        """
        setAdc_samplingrate_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc_samplingrate_index(self, idx)


    def getSamplingRateInHz(self) -> "int":
        """
        getSamplingRateInHz(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getSamplingRateInHz(self)


    def getAdc_samplingrate_index(self) -> "int":
        """
        getAdc_samplingrate_index(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getAdc_samplingrate_index(self)

    ADC_GAIN_6 = _pyattyscomm.AttysCommBase_ADC_GAIN_6
    ADC_GAIN_1 = _pyattyscomm.AttysCommBase_ADC_GAIN_1
    ADC_GAIN_2 = _pyattyscomm.AttysCommBase_ADC_GAIN_2
    ADC_GAIN_3 = _pyattyscomm.AttysCommBase_ADC_GAIN_3
    ADC_GAIN_4 = _pyattyscomm.AttysCommBase_ADC_GAIN_4
    ADC_GAIN_8 = _pyattyscomm.AttysCommBase_ADC_GAIN_8
    ADC_GAIN_12 = _pyattyscomm.AttysCommBase_ADC_GAIN_12
    __swig_getmethods__["ADC_GAIN_FACTOR"] = _pyattyscomm.AttysCommBase_ADC_GAIN_FACTOR_get
    if _newclass:
        ADC_GAIN_FACTOR = _swig_property(_pyattyscomm.AttysCommBase_ADC_GAIN_FACTOR_get)
    __swig_getmethods__["ADC_REF"] = _pyattyscomm.AttysCommBase_ADC_REF_get
    if _newclass:
        ADC_REF = _swig_property(_pyattyscomm.AttysCommBase_ADC_REF_get)

    def getADCFullScaleRange(self, channel: 'int') -> "float":
        """
        getADCFullScaleRange(AttysCommBase self, int channel) -> float

        Parameters
        ----------
        channel: int

        """
        return _pyattyscomm.AttysCommBase_getADCFullScaleRange(self, channel)


    def setAdc0_gain_index(self, idx: 'int') -> "void":
        """
        setAdc0_gain_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc0_gain_index(self, idx)


    def setAdc1_gain_index(self, idx: 'int') -> "void":
        """
        setAdc1_gain_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc1_gain_index(self, idx)

    __swig_setmethods__["adc0_gain_index"] = _pyattyscomm.AttysCommBase_adc0_gain_index_set
    __swig_getmethods__["adc0_gain_index"] = _pyattyscomm.AttysCommBase_adc0_gain_index_get
    if _newclass:
        adc0_gain_index = _swig_property(_pyattyscomm.AttysCommBase_adc0_gain_index_get, _pyattyscomm.AttysCommBase_adc0_gain_index_set)
    __swig_setmethods__["adc1_gain_index"] = _pyattyscomm.AttysCommBase_adc1_gain_index_set
    __swig_getmethods__["adc1_gain_index"] = _pyattyscomm.AttysCommBase_adc1_gain_index_get
    if _newclass:
        adc1_gain_index = _swig_property(_pyattyscomm.AttysCommBase_adc1_gain_index_get, _pyattyscomm.AttysCommBase_adc1_gain_index_set)
    ADC_CURRENT_6NA = _pyattyscomm.AttysCommBase_ADC_CURRENT_6NA
    ADC_CURRENT_22NA = _pyattyscomm.AttysCommBase_ADC_CURRENT_22NA
    ADC_CURRENT_6UA = _pyattyscomm.AttysCommBase_ADC_CURRENT_6UA
    ADC_CURRENT_22UA = _pyattyscomm.AttysCommBase_ADC_CURRENT_22UA
    __swig_setmethods__["current_index"] = _pyattyscomm.AttysCommBase_current_index_set
    __swig_getmethods__["current_index"] = _pyattyscomm.AttysCommBase_current_index_get
    if _newclass:
        current_index = _swig_property(_pyattyscomm.AttysCommBase_current_index_get, _pyattyscomm.AttysCommBase_current_index_set)
    __swig_setmethods__["current_mask"] = _pyattyscomm.AttysCommBase_current_mask_set
    __swig_getmethods__["current_mask"] = _pyattyscomm.AttysCommBase_current_mask_get
    if _newclass:
        current_mask = _swig_property(_pyattyscomm.AttysCommBase_current_mask_get, _pyattyscomm.AttysCommBase_current_mask_set)

    def setBiasCurrent(self, currIndex: 'int') -> "void":
        """
        setBiasCurrent(AttysCommBase self, int currIndex)

        Parameters
        ----------
        currIndex: int

        """
        return _pyattyscomm.AttysCommBase_setBiasCurrent(self, currIndex)


    def getBiasCurrent(self) -> "int":
        """
        getBiasCurrent(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getBiasCurrent(self)


    def enableCurrents(self, pos_ch1: 'int', neg_ch1: 'int', pos_ch2: 'int') -> "void":
        """
        enableCurrents(AttysCommBase self, int pos_ch1, int neg_ch1, int pos_ch2)

        Parameters
        ----------
        pos_ch1: int
        neg_ch1: int
        pos_ch2: int

        """
        return _pyattyscomm.AttysCommBase_enableCurrents(self, pos_ch1, neg_ch1, pos_ch2)

    ADC_MUX_NORMAL = _pyattyscomm.AttysCommBase_ADC_MUX_NORMAL
    ADC_MUX_SHORT = _pyattyscomm.AttysCommBase_ADC_MUX_SHORT
    ADC_MUX_SUPPLY = _pyattyscomm.AttysCommBase_ADC_MUX_SUPPLY
    ADC_MUX_TEMPERATURE = _pyattyscomm.AttysCommBase_ADC_MUX_TEMPERATURE
    ADC_MUX_TEST_SIGNAL = _pyattyscomm.AttysCommBase_ADC_MUX_TEST_SIGNAL
    ADC_MUX_ECG_EINTHOVEN = _pyattyscomm.AttysCommBase_ADC_MUX_ECG_EINTHOVEN
    __swig_setmethods__["adc0_mux_index"] = _pyattyscomm.AttysCommBase_adc0_mux_index_set
    __swig_getmethods__["adc0_mux_index"] = _pyattyscomm.AttysCommBase_adc0_mux_index_get
    if _newclass:
        adc0_mux_index = _swig_property(_pyattyscomm.AttysCommBase_adc0_mux_index_get, _pyattyscomm.AttysCommBase_adc0_mux_index_set)
    __swig_setmethods__["adc1_mux_index"] = _pyattyscomm.AttysCommBase_adc1_mux_index_set
    __swig_getmethods__["adc1_mux_index"] = _pyattyscomm.AttysCommBase_adc1_mux_index_get
    if _newclass:
        adc1_mux_index = _swig_property(_pyattyscomm.AttysCommBase_adc1_mux_index_get, _pyattyscomm.AttysCommBase_adc1_mux_index_set)

    def setAdc0_mux_index(self, idx: 'int') -> "void":
        """
        setAdc0_mux_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc0_mux_index(self, idx)


    def setAdc1_mux_index(self, idx: 'int') -> "void":
        """
        setAdc1_mux_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc1_mux_index(self, idx)


    def phys2temperature(volt: 'float') -> "float":
        """
        phys2temperature(float volt) -> float

        Parameters
        ----------
        volt: float

        """
        return _pyattyscomm.AttysCommBase_phys2temperature(volt)

    phys2temperature = staticmethod(phys2temperature)
    ACCEL_2G = _pyattyscomm.AttysCommBase_ACCEL_2G
    ACCEL_4G = _pyattyscomm.AttysCommBase_ACCEL_4G
    ACCEL_8G = _pyattyscomm.AttysCommBase_ACCEL_8G
    ACCEL_16G = _pyattyscomm.AttysCommBase_ACCEL_16G
    __swig_getmethods__["oneG"] = _pyattyscomm.AttysCommBase_oneG_get
    if _newclass:
        oneG = _swig_property(_pyattyscomm.AttysCommBase_oneG_get)
    __swig_getmethods__["ACCEL_FULL_SCALE"] = _pyattyscomm.AttysCommBase_ACCEL_FULL_SCALE_get
    if _newclass:
        ACCEL_FULL_SCALE = _swig_property(_pyattyscomm.AttysCommBase_ACCEL_FULL_SCALE_get)
    __swig_setmethods__["accel_full_scale_index"] = _pyattyscomm.AttysCommBase_accel_full_scale_index_set
    __swig_getmethods__["accel_full_scale_index"] = _pyattyscomm.AttysCommBase_accel_full_scale_index_get
    if _newclass:
        accel_full_scale_index = _swig_property(_pyattyscomm.AttysCommBase_accel_full_scale_index_get, _pyattyscomm.AttysCommBase_accel_full_scale_index_set)

    def getAccelFullScaleRange(self) -> "float":
        """
        getAccelFullScaleRange(AttysCommBase self) -> float

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getAccelFullScaleRange(self)


    def setAccel_full_scale_index(self, idx: 'int') -> "void":
        """
        setAccel_full_scale_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAccel_full_scale_index(self, idx)

    __swig_getmethods__["MAG_FULL_SCALE"] = _pyattyscomm.AttysCommBase_MAG_FULL_SCALE_get
    if _newclass:
        MAG_FULL_SCALE = _swig_property(_pyattyscomm.AttysCommBase_MAG_FULL_SCALE_get)

    def getMagFullScaleRange(self) -> "float":
        """
        getMagFullScaleRange(AttysCommBase self) -> float

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getMagFullScaleRange(self)

    __swig_setmethods__["sampleNumber"] = _pyattyscomm.AttysCommBase_sampleNumber_set
    __swig_getmethods__["sampleNumber"] = _pyattyscomm.AttysCommBase_sampleNumber_get
    if _newclass:
        sampleNumber = _swig_property(_pyattyscomm.AttysCommBase_sampleNumber_get, _pyattyscomm.AttysCommBase_sampleNumber_set)

    def getIsCharging(self) -> "int":
        """
        getIsCharging(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getIsCharging(self)

    MESSAGE_CONNECTED = _pyattyscomm.AttysCommBase_MESSAGE_CONNECTED
    MESSAGE_ERROR = _pyattyscomm.AttysCommBase_MESSAGE_ERROR
    MESSAGE_RETRY = _pyattyscomm.AttysCommBase_MESSAGE_RETRY
    MESSAGE_CONFIGURE = _pyattyscomm.AttysCommBase_MESSAGE_CONFIGURE
    MESSAGE_STARTED_RECORDING = _pyattyscomm.AttysCommBase_MESSAGE_STARTED_RECORDING
    MESSAGE_STOPPED_RECORDING = _pyattyscomm.AttysCommBase_MESSAGE_STOPPED_RECORDING
    MESSAGE_CONNECTING = _pyattyscomm.AttysCommBase_MESSAGE_CONNECTING
    MESSAGE_TIMEOUT = _pyattyscomm.AttysCommBase_MESSAGE_TIMEOUT
    MESSAGE_RECONNECTED = _pyattyscomm.AttysCommBase_MESSAGE_RECONNECTED
    MESSAGE_RECEIVING_DATA = _pyattyscomm.AttysCommBase_MESSAGE_RECEIVING_DATA

    def connect(self) -> "void":
        """
        connect(AttysCommBase self)

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_connect(self)


    def start(self) -> "void":
        """
        start(AttysCommBase self)

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_start(self)


    def closeSocket(self) -> "void":
        """
        closeSocket(AttysCommBase self)

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_closeSocket(self)


    def hasActiveConnection(self) -> "int":
        """
        hasActiveConnection(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_hasActiveConnection(self)


    def setConnected(self, c: 'int') -> "void":
        """
        setConnected(AttysCommBase self, int c)

        Parameters
        ----------
        c: int

        """
        return _pyattyscomm.AttysCommBase_setConnected(self, c)


    def getSampleFromBuffer(self) -> "sample_p":
        """
        getSampleFromBuffer(AttysCommBase self) -> sample_p

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getSampleFromBuffer(self)


    def hasSampleAvailable(self) -> "int":
        """
        hasSampleAvailable(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_hasSampleAvailable(self)


    def hasSampleAvilabale(self) -> "int":
        """
        hasSampleAvilabale(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_hasSampleAvilabale(self)


    def resetRingbuffer(self) -> "void":
        """
        resetRingbuffer(AttysCommBase self)

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_resetRingbuffer(self)


    def registerCallback(self, f: 'AttysCommListener') -> "void":
        """
        registerCallback(AttysCommBase self, AttysCommListener f)

        Parameters
        ----------
        f: AttysCommListener *

        """
        return _pyattyscomm.AttysCommBase_registerCallback(self, f)


    def unregisterCallback(self) -> "void":
        """
        unregisterCallback(AttysCommBase self)

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_unregisterCallback(self)


    def registerMessageCallback(self, f: 'AttysCommMessage') -> "void":
        """
        registerMessageCallback(AttysCommBase self, AttysCommMessage f)

        Parameters
        ----------
        f: AttysCommMessage *

        """
        return _pyattyscomm.AttysCommBase_registerMessageCallback(self, f)


    def unregisterMessageCallback(self) -> "void":
        """
        unregisterMessageCallback(AttysCommBase self)

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_unregisterMessageCallback(self)


    def quit(self) -> "void":
        """
        quit(AttysCommBase self)

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_quit(self)


    def getBluetoothBinaryAdress(self) -> "unsigned char *":
        """
        getBluetoothBinaryAdress(AttysCommBase self) -> unsigned char *

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_getBluetoothBinaryAdress(self)


    def getBluetoothAdressString(self, s: 'char *') -> "void":
        """
        getBluetoothAdressString(AttysCommBase self, char * s)

        Parameters
        ----------
        s: char *

        """
        return _pyattyscomm.AttysCommBase_getBluetoothAdressString(self, s)

    __swig_setmethods__["attysCommMessage"] = _pyattyscomm.AttysCommBase_attysCommMessage_set
    __swig_getmethods__["attysCommMessage"] = _pyattyscomm.AttysCommBase_attysCommMessage_get
    if _newclass:
        attysCommMessage = _swig_property(_pyattyscomm.AttysCommBase_attysCommMessage_get, _pyattyscomm.AttysCommBase_attysCommMessage_set)

    def processRawAttysData(self, data: 'char const *') -> "void":
        """
        processRawAttysData(AttysCommBase self, char const * data)

        Parameters
        ----------
        data: char const *

        """
        return _pyattyscomm.AttysCommBase_processRawAttysData(self, data)


    def isInitialising(self) -> "int":
        """
        isInitialising(AttysCommBase self) -> int

        Parameters
        ----------
        self: AttysCommBase *

        """
        return _pyattyscomm.AttysCommBase_isInitialising(self)

AttysCommBase_swigregister = _pyattyscomm.AttysCommBase_swigregister
AttysCommBase_swigregister(AttysCommBase)

def AttysCommBase_phys2temperature(volt: 'float') -> "float":
    """
    AttysCommBase_phys2temperature(float volt) -> float

    Parameters
    ----------
    volt: float

    """
    return _pyattyscomm.AttysCommBase_phys2temperature(volt)


def Base64encode_len(len: 'int') -> "int":
    """
    Base64encode_len(int len) -> int

    Parameters
    ----------
    len: int

    """
    return _pyattyscomm.Base64encode_len(len)

def Base64encode(coded_dst: 'char *', plain_src: 'char const *', len_plain_src: 'int') -> "__int64":
    """
    Base64encode(char * coded_dst, char const * plain_src, int len_plain_src) -> __int64

    Parameters
    ----------
    coded_dst: char *
    plain_src: char const *
    len_plain_src: int

    """
    return _pyattyscomm.Base64encode(coded_dst, plain_src, len_plain_src)

def Base64decode_len(coded_src: 'char const *') -> "__int64":
    """
    Base64decode_len(char const * coded_src) -> __int64

    Parameters
    ----------
    coded_src: char const *

    """
    return _pyattyscomm.Base64decode_len(coded_src)

def Base64decode(plain_dst: 'char *', coded_src: 'char const *') -> "__int64":
    """
    Base64decode(char * plain_dst, char const * coded_src) -> __int64

    Parameters
    ----------
    plain_dst: char *
    coded_src: char const *

    """
    return _pyattyscomm.Base64decode(plain_dst, coded_src)
class AttysComm(AttysCommBase):
    """Proxy of C++ AttysComm class."""

    __swig_setmethods__ = {}
    for _s in [AttysCommBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysComm, name, value)
    __swig_getmethods__ = {}
    for _s in [AttysCommBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AttysComm, name)
    __repr__ = _swig_repr

    def __init__(self, _btAddr: 'void *'=None, _btAddrLen: 'int'=0):
        """
        __init__(AttysComm self, void * _btAddr=None, int _btAddrLen=0) -> AttysComm

        Parameters
        ----------
        _btAddr: void *
        _btAddrLen: int

        __init__(AttysComm self, void * _btAddr=None) -> AttysComm

        Parameters
        ----------
        _btAddr: void *

        __init__(AttysComm self) -> AttysComm
        """
        this = _pyattyscomm.new_AttysComm(_btAddr, _btAddrLen)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def connect(self) -> "void":
        """
        connect(AttysComm self)

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_connect(self)


    def closeSocket(self) -> "void":
        """
        closeSocket(AttysComm self)

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_closeSocket(self)


    def run(self) -> "void":
        """
        run(AttysComm self)

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_run(self)


    def quit(self) -> "void":
        """
        quit(AttysComm self)

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_quit(self)


    def sendSyncCommand(self, message: 'char const *', waitForOK: 'int') -> "void":
        """
        sendSyncCommand(AttysComm self, char const * message, int waitForOK)

        Parameters
        ----------
        message: char const *
        waitForOK: int

        """
        return _pyattyscomm.AttysComm_sendSyncCommand(self, message, waitForOK)


    def sendInit(self) -> "void":
        """
        sendInit(AttysComm self)

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_sendInit(self)


    def start(self) -> "void":
        """
        start(AttysComm self)

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_start(self)


    def receptionTimeout(self) -> "void":
        """
        receptionTimeout(AttysComm self)

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_receptionTimeout(self)


    def getBluetoothBinaryAdress(self) -> "unsigned char *":
        """
        getBluetoothBinaryAdress(AttysComm self) -> unsigned char *

        Parameters
        ----------
        self: AttysComm *

        """
        return _pyattyscomm.AttysComm_getBluetoothBinaryAdress(self)


    def getBluetoothAdressString(self, s: 'char *') -> "void":
        """
        getBluetoothAdressString(AttysComm self, char * s)

        Parameters
        ----------
        s: char *

        """
        return _pyattyscomm.AttysComm_getBluetoothAdressString(self, s)

    __swig_destroy__ = _pyattyscomm.delete_AttysComm
    __del__ = lambda self: None
AttysComm_swigregister = _pyattyscomm.AttysComm_swigregister
AttysComm_swigregister(AttysComm)

class AttysScanListener(_object):
    """Proxy of C++ AttysScanListener class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysScanListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysScanListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyattyscomm.delete_AttysScanListener
    __del__ = lambda self: None

    def message(self, arg0: 'int const', arg1: 'char const *') -> "void":
        """
        message(AttysScanListener self, int const arg0, char const * arg1)

        Parameters
        ----------
        arg0: int const
        arg1: char const *

        """
        return _pyattyscomm.AttysScanListener_message(self, arg0, arg1)


    def __init__(self):
        """
        __init__(AttysScanListener self) -> AttysScanListener

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == AttysScanListener:
            _self = None
        else:
            _self = self
        this = _pyattyscomm.new_AttysScanListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pyattyscomm.disown_AttysScanListener(self)
        return weakref_proxy(self)
AttysScanListener_swigregister = _pyattyscomm.AttysScanListener_swigregister
AttysScanListener_swigregister(AttysScanListener)
cvar = _pyattyscomm.cvar

class AttysScan(_object):
    """Proxy of C++ AttysScan class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttysScan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttysScan, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyattyscomm.delete_AttysScan
    __del__ = lambda self: None

    def scan(self, maxAttys: 'int'=1) -> "int":
        """
        scan(AttysScan self, int maxAttys=1) -> int

        Parameters
        ----------
        maxAttys: int

        scan(AttysScan self) -> int

        Parameters
        ----------
        self: AttysScan *

        """
        return _pyattyscomm.AttysScan_scan(self, maxAttys)

    SCAN_CONNECTED = _pyattyscomm.AttysScan_SCAN_CONNECTED
    SCAN_SEARCHING = _pyattyscomm.AttysScan_SCAN_SEARCHING
    SCAN_NODEV = _pyattyscomm.AttysScan_SCAN_NODEV
    SCAN_SOCKETERR = _pyattyscomm.AttysScan_SCAN_SOCKETERR
    SCAN_CONNECTING = _pyattyscomm.AttysScan_SCAN_CONNECTING
    SCAN_CONNECTERR = _pyattyscomm.AttysScan_SCAN_CONNECTERR
    MAX_ATTYS_DEVS = _pyattyscomm.AttysScan_MAX_ATTYS_DEVS

    def registerCallback(self, f: 'AttysScanListener') -> "void":
        """
        registerCallback(AttysScan self, AttysScanListener f)

        Parameters
        ----------
        f: AttysScanListener *

        """
        return _pyattyscomm.AttysScan_registerCallback(self, f)


    def unregisterCallback(self) -> "void":
        """
        unregisterCallback(AttysScan self)

        Parameters
        ----------
        self: AttysScan *

        """
        return _pyattyscomm.AttysScan_unregisterCallback(self)


    def getAttysComm(self, i: 'int') -> "AttysComm *":
        """
        getAttysComm(AttysScan self, int i) -> AttysComm

        Parameters
        ----------
        i: int

        """
        return _pyattyscomm.AttysScan_getAttysComm(self, i)


    def getAttysName(self, i: 'int') -> "char *":
        """
        getAttysName(AttysScan self, int i) -> char *

        Parameters
        ----------
        i: int

        """
        return _pyattyscomm.AttysScan_getAttysName(self, i)


    def getNAttysDevices(self) -> "int":
        """
        getNAttysDevices(AttysScan self) -> int

        Parameters
        ----------
        self: AttysScan *

        """
        return _pyattyscomm.AttysScan_getNAttysDevices(self)

    __swig_setmethods__["statusCallback"] = _pyattyscomm.AttysScan_statusCallback_set
    __swig_getmethods__["statusCallback"] = _pyattyscomm.AttysScan_statusCallback_get
    if _newclass:
        statusCallback = _swig_property(_pyattyscomm.AttysScan_statusCallback_get, _pyattyscomm.AttysScan_statusCallback_set)
    __swig_setmethods__["nAttysDevices"] = _pyattyscomm.AttysScan_nAttysDevices_set
    __swig_getmethods__["nAttysDevices"] = _pyattyscomm.AttysScan_nAttysDevices_get
    if _newclass:
        nAttysDevices = _swig_property(_pyattyscomm.AttysScan_nAttysDevices_get, _pyattyscomm.AttysScan_nAttysDevices_set)
    __swig_setmethods__["attysName"] = _pyattyscomm.AttysScan_attysName_set
    __swig_getmethods__["attysName"] = _pyattyscomm.AttysScan_attysName_get
    if _newclass:
        attysName = _swig_property(_pyattyscomm.AttysScan_attysName_get, _pyattyscomm.AttysScan_attysName_set)
    __swig_setmethods__["attysComm"] = _pyattyscomm.AttysScan_attysComm_set
    __swig_getmethods__["attysComm"] = _pyattyscomm.AttysScan_attysComm_get
    if _newclass:
        attysComm = _swig_property(_pyattyscomm.AttysScan_attysComm_get, _pyattyscomm.AttysScan_attysComm_set)

    def __init__(self):
        """__init__(AttysScan self) -> AttysScan"""
        this = _pyattyscomm.new_AttysScan()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AttysScan_swigregister = _pyattyscomm.AttysScan_swigregister
AttysScan_swigregister(AttysScan)

# This file is compatible with both classic and new-style classes.


