# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyattyscomm
else:
    import _pyattyscomm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

TIMEOUT_IN_SECS = _pyattyscomm.TIMEOUT_IN_SECS

class AttysCommListener(object):
    r"""Proxy of C++ AttysCommListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def hasSample(self, arg0: "float", arg1: "float *") -> "void":
        r"""
        hasSample(AttysCommListener self, float arg0, float * arg1)

        Parameters
        ----------
        arg0: float
        arg1: float *

        """
        return _pyattyscomm.AttysCommListener_hasSample(self, arg0, arg1)
    __swig_destroy__ = _pyattyscomm.delete_AttysCommListener

    def __init__(self):
        r"""
        __init__(AttysCommListener self) -> AttysCommListener

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == AttysCommListener:
            _self = None
        else:
            _self = self
        _pyattyscomm.AttysCommListener_swiginit(self, _pyattyscomm.new_AttysCommListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _pyattyscomm.disown_AttysCommListener(self)
        return weakref.proxy(self)

# Register AttysCommListener in _pyattyscomm:
_pyattyscomm.AttysCommListener_swigregister(AttysCommListener)

class AttysCommMessage(object):
    r"""Proxy of C++ AttysCommMessage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def hasMessage(self, arg0: "int", arg1: "char const *") -> "void":
        r"""
        hasMessage(AttysCommMessage self, int arg0, char const * arg1)

        Parameters
        ----------
        arg0: int
        arg1: char const *

        """
        return _pyattyscomm.AttysCommMessage_hasMessage(self, arg0, arg1)
    __swig_destroy__ = _pyattyscomm.delete_AttysCommMessage

    def __init__(self):
        r"""
        __init__(AttysCommMessage self) -> AttysCommMessage

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == AttysCommMessage:
            _self = None
        else:
            _self = self
        _pyattyscomm.AttysCommMessage_swiginit(self, _pyattyscomm.new_AttysCommMessage(_self, ))
    def __disown__(self):
        self.this.disown()
        _pyattyscomm.disown_AttysCommMessage(self)
        return weakref.proxy(self)

# Register AttysCommMessage in _pyattyscomm:
_pyattyscomm.AttysCommMessage_swigregister(AttysCommMessage)

class AttysCommBase(object):
    r"""Proxy of C++ AttysCommBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyattyscomm.delete_AttysCommBase
    NCHANNELS = _pyattyscomm.AttysCommBase_NCHANNELS
    
    nMem = _pyattyscomm.AttysCommBase_nMem
    
    INDEX_Acceleration_X = _pyattyscomm.AttysCommBase_INDEX_Acceleration_X
    
    INDEX_Acceleration_Y = _pyattyscomm.AttysCommBase_INDEX_Acceleration_Y
    
    INDEX_Acceleration_Z = _pyattyscomm.AttysCommBase_INDEX_Acceleration_Z
    
    INDEX_Magnetic_field_X = _pyattyscomm.AttysCommBase_INDEX_Magnetic_field_X
    
    INDEX_Magnetic_field_Y = _pyattyscomm.AttysCommBase_INDEX_Magnetic_field_Y
    
    INDEX_Magnetic_field_Z = _pyattyscomm.AttysCommBase_INDEX_Magnetic_field_Z
    
    INDEX_Analogue_channel_1 = _pyattyscomm.AttysCommBase_INDEX_Analogue_channel_1
    
    INDEX_Analogue_channel_2 = _pyattyscomm.AttysCommBase_INDEX_Analogue_channel_2
    
    INDEX_GPIO0 = _pyattyscomm.AttysCommBase_INDEX_GPIO0
    
    INDEX_GPIO1 = _pyattyscomm.AttysCommBase_INDEX_GPIO1
    
    CHANNEL_DESCRIPTION = property(_pyattyscomm.AttysCommBase_CHANNEL_DESCRIPTION_get, doc=r"""CHANNEL_DESCRIPTION : a(AttysCommBase::NCHANNELS).q(const).std::string""")
    CHANNEL_SHORT_DESCRIPTION = property(_pyattyscomm.AttysCommBase_CHANNEL_SHORT_DESCRIPTION_get, doc=r"""CHANNEL_SHORT_DESCRIPTION : a(AttysCommBase::NCHANNELS).q(const).std::string""")
    CHANNEL_UNITS = property(_pyattyscomm.AttysCommBase_CHANNEL_UNITS_get, doc=r"""CHANNEL_UNITS : a(AttysCommBase::NCHANNELS).q(const).std::string""")
    ADC_RATE_125HZ = _pyattyscomm.AttysCommBase_ADC_RATE_125HZ
    
    ADC_RATE_250HZ = _pyattyscomm.AttysCommBase_ADC_RATE_250HZ
    
    ADC_RATE_500Hz = _pyattyscomm.AttysCommBase_ADC_RATE_500Hz
    
    ADC_DEFAULT_RATE = _pyattyscomm.AttysCommBase_ADC_DEFAULT_RATE
    
    ADC_SAMPLINGRATE = property(_pyattyscomm.AttysCommBase_ADC_SAMPLINGRATE_get, doc=r"""ADC_SAMPLINGRATE : a(4).q(const).int""")
    adc_rate_index = property(_pyattyscomm.AttysCommBase_adc_rate_index_get, _pyattyscomm.AttysCommBase_adc_rate_index_set, doc=r"""adc_rate_index : int""")

    def setAdc_samplingrate_index(self, idx: "int") -> "void":
        r"""
        setAdc_samplingrate_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc_samplingrate_index(self, idx)

    def getSamplingRateInHz(self) -> "int":
        r"""getSamplingRateInHz(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_getSamplingRateInHz(self)

    def getAdc_samplingrate_index(self) -> "int":
        r"""getAdc_samplingrate_index(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_getAdc_samplingrate_index(self)
    ADC_GAIN_6 = _pyattyscomm.AttysCommBase_ADC_GAIN_6
    
    ADC_GAIN_1 = _pyattyscomm.AttysCommBase_ADC_GAIN_1
    
    ADC_GAIN_2 = _pyattyscomm.AttysCommBase_ADC_GAIN_2
    
    ADC_GAIN_3 = _pyattyscomm.AttysCommBase_ADC_GAIN_3
    
    ADC_GAIN_4 = _pyattyscomm.AttysCommBase_ADC_GAIN_4
    
    ADC_GAIN_8 = _pyattyscomm.AttysCommBase_ADC_GAIN_8
    
    ADC_GAIN_12 = _pyattyscomm.AttysCommBase_ADC_GAIN_12
    
    ADC_GAIN_FACTOR = property(_pyattyscomm.AttysCommBase_ADC_GAIN_FACTOR_get, doc=r"""ADC_GAIN_FACTOR : a(7).q(const).int""")
    ADC_REF = property(_pyattyscomm.AttysCommBase_ADC_REF_get, doc=r"""ADC_REF : q(const).float""")

    def getADCFullScaleRange(self, channel: "int") -> "float":
        r"""
        getADCFullScaleRange(AttysCommBase self, int channel) -> float

        Parameters
        ----------
        channel: int

        """
        return _pyattyscomm.AttysCommBase_getADCFullScaleRange(self, channel)

    def setAdc0_gain_index(self, idx: "int") -> "void":
        r"""
        setAdc0_gain_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc0_gain_index(self, idx)

    def setAdc1_gain_index(self, idx: "int") -> "void":
        r"""
        setAdc1_gain_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc1_gain_index(self, idx)
    adc0_gain_index = property(_pyattyscomm.AttysCommBase_adc0_gain_index_get, _pyattyscomm.AttysCommBase_adc0_gain_index_set, doc=r"""adc0_gain_index : int""")
    adc1_gain_index = property(_pyattyscomm.AttysCommBase_adc1_gain_index_get, _pyattyscomm.AttysCommBase_adc1_gain_index_set, doc=r"""adc1_gain_index : int""")
    ADC_CURRENT_6NA = _pyattyscomm.AttysCommBase_ADC_CURRENT_6NA
    
    ADC_CURRENT_22NA = _pyattyscomm.AttysCommBase_ADC_CURRENT_22NA
    
    ADC_CURRENT_6UA = _pyattyscomm.AttysCommBase_ADC_CURRENT_6UA
    
    ADC_CURRENT_22UA = _pyattyscomm.AttysCommBase_ADC_CURRENT_22UA
    
    current_index = property(_pyattyscomm.AttysCommBase_current_index_get, _pyattyscomm.AttysCommBase_current_index_set, doc=r"""current_index : int""")
    current_mask = property(_pyattyscomm.AttysCommBase_current_mask_get, _pyattyscomm.AttysCommBase_current_mask_set, doc=r"""current_mask : int""")

    def setBiasCurrent(self, currIndex: "int") -> "void":
        r"""
        setBiasCurrent(AttysCommBase self, int currIndex)

        Parameters
        ----------
        currIndex: int

        """
        return _pyattyscomm.AttysCommBase_setBiasCurrent(self, currIndex)

    def getBiasCurrent(self) -> "int":
        r"""getBiasCurrent(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_getBiasCurrent(self)

    def enableCurrents(self, pos_ch1: "int", neg_ch1: "int", pos_ch2: "int") -> "void":
        r"""
        enableCurrents(AttysCommBase self, int pos_ch1, int neg_ch1, int pos_ch2)

        Parameters
        ----------
        pos_ch1: int
        neg_ch1: int
        pos_ch2: int

        """
        return _pyattyscomm.AttysCommBase_enableCurrents(self, pos_ch1, neg_ch1, pos_ch2)
    ADC_MUX_NORMAL = _pyattyscomm.AttysCommBase_ADC_MUX_NORMAL
    
    ADC_MUX_SHORT = _pyattyscomm.AttysCommBase_ADC_MUX_SHORT
    
    ADC_MUX_SUPPLY = _pyattyscomm.AttysCommBase_ADC_MUX_SUPPLY
    
    ADC_MUX_TEMPERATURE = _pyattyscomm.AttysCommBase_ADC_MUX_TEMPERATURE
    
    ADC_MUX_TEST_SIGNAL = _pyattyscomm.AttysCommBase_ADC_MUX_TEST_SIGNAL
    
    ADC_MUX_ECG_EINTHOVEN = _pyattyscomm.AttysCommBase_ADC_MUX_ECG_EINTHOVEN
    
    adc0_mux_index = property(_pyattyscomm.AttysCommBase_adc0_mux_index_get, _pyattyscomm.AttysCommBase_adc0_mux_index_set, doc=r"""adc0_mux_index : int""")
    adc1_mux_index = property(_pyattyscomm.AttysCommBase_adc1_mux_index_get, _pyattyscomm.AttysCommBase_adc1_mux_index_set, doc=r"""adc1_mux_index : int""")

    def setAdc0_mux_index(self, idx: "int") -> "void":
        r"""
        setAdc0_mux_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc0_mux_index(self, idx)

    def setAdc1_mux_index(self, idx: "int") -> "void":
        r"""
        setAdc1_mux_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAdc1_mux_index(self, idx)

    @staticmethod
    def phys2temperature(volt: "float") -> "float":
        r"""
        phys2temperature(float volt) -> float

        Parameters
        ----------
        volt: float

        """
        return _pyattyscomm.AttysCommBase_phys2temperature(volt)
    ACCEL_2G = _pyattyscomm.AttysCommBase_ACCEL_2G
    
    ACCEL_4G = _pyattyscomm.AttysCommBase_ACCEL_4G
    
    ACCEL_8G = _pyattyscomm.AttysCommBase_ACCEL_8G
    
    ACCEL_16G = _pyattyscomm.AttysCommBase_ACCEL_16G
    
    oneG = property(_pyattyscomm.AttysCommBase_oneG_get, doc=r"""oneG : q(const).float""")
    ACCEL_FULL_SCALE = property(_pyattyscomm.AttysCommBase_ACCEL_FULL_SCALE_get, doc=r"""ACCEL_FULL_SCALE : a(4).q(const).float""")
    accel_full_scale_index = property(_pyattyscomm.AttysCommBase_accel_full_scale_index_get, _pyattyscomm.AttysCommBase_accel_full_scale_index_set, doc=r"""accel_full_scale_index : int""")

    def getAccelFullScaleRange(self) -> "float":
        r"""getAccelFullScaleRange(AttysCommBase self) -> float"""
        return _pyattyscomm.AttysCommBase_getAccelFullScaleRange(self)

    def setAccel_full_scale_index(self, idx: "int") -> "void":
        r"""
        setAccel_full_scale_index(AttysCommBase self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _pyattyscomm.AttysCommBase_setAccel_full_scale_index(self, idx)
    MAG_FULL_SCALE = property(_pyattyscomm.AttysCommBase_MAG_FULL_SCALE_get, doc=r"""MAG_FULL_SCALE : q(const).float""")

    def getMagFullScaleRange(self) -> "float":
        r"""getMagFullScaleRange(AttysCommBase self) -> float"""
        return _pyattyscomm.AttysCommBase_getMagFullScaleRange(self)
    sampleNumber = property(_pyattyscomm.AttysCommBase_sampleNumber_get, _pyattyscomm.AttysCommBase_sampleNumber_set, doc=r"""sampleNumber : unsigned long""")

    def getIsCharging(self) -> "int":
        r"""getIsCharging(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_getIsCharging(self)
    MESSAGE_CONNECTED = _pyattyscomm.AttysCommBase_MESSAGE_CONNECTED
    
    MESSAGE_ERROR = _pyattyscomm.AttysCommBase_MESSAGE_ERROR
    
    MESSAGE_RETRY = _pyattyscomm.AttysCommBase_MESSAGE_RETRY
    
    MESSAGE_CONFIGURE = _pyattyscomm.AttysCommBase_MESSAGE_CONFIGURE
    
    MESSAGE_STARTED_RECORDING = _pyattyscomm.AttysCommBase_MESSAGE_STARTED_RECORDING
    
    MESSAGE_STOPPED_RECORDING = _pyattyscomm.AttysCommBase_MESSAGE_STOPPED_RECORDING
    
    MESSAGE_CONNECTING = _pyattyscomm.AttysCommBase_MESSAGE_CONNECTING
    
    MESSAGE_TIMEOUT = _pyattyscomm.AttysCommBase_MESSAGE_TIMEOUT
    
    MESSAGE_RECONNECTED = _pyattyscomm.AttysCommBase_MESSAGE_RECONNECTED
    
    MESSAGE_RECEIVING_DATA = _pyattyscomm.AttysCommBase_MESSAGE_RECEIVING_DATA
    

    def connect(self) -> "void":
        r"""connect(AttysCommBase self)"""
        return _pyattyscomm.AttysCommBase_connect(self)

    def start(self) -> "void":
        r"""start(AttysCommBase self)"""
        return _pyattyscomm.AttysCommBase_start(self)

    def closeSocket(self) -> "void":
        r"""closeSocket(AttysCommBase self)"""
        return _pyattyscomm.AttysCommBase_closeSocket(self)

    def hasActiveConnection(self) -> "int":
        r"""hasActiveConnection(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_hasActiveConnection(self)

    def setConnected(self, c: "int") -> "void":
        r"""
        setConnected(AttysCommBase self, int c)

        Parameters
        ----------
        c: int

        """
        return _pyattyscomm.AttysCommBase_setConnected(self, c)

    def getSampleFromBuffer(self) -> "sample_p":
        r"""getSampleFromBuffer(AttysCommBase self) -> sample_p"""
        return _pyattyscomm.AttysCommBase_getSampleFromBuffer(self)

    def hasSampleAvailable(self) -> "int":
        r"""hasSampleAvailable(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_hasSampleAvailable(self)

    def hasSampleAvilabale(self) -> "int":
        r"""hasSampleAvilabale(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_hasSampleAvilabale(self)

    def resetRingbuffer(self) -> "void":
        r"""resetRingbuffer(AttysCommBase self)"""
        return _pyattyscomm.AttysCommBase_resetRingbuffer(self)

    def registerCallback(self, f: "AttysCommListener") -> "void":
        r"""
        registerCallback(AttysCommBase self, AttysCommListener f)

        Parameters
        ----------
        f: AttysCommListener *

        """
        return _pyattyscomm.AttysCommBase_registerCallback(self, f)

    def unregisterCallback(self) -> "void":
        r"""unregisterCallback(AttysCommBase self)"""
        return _pyattyscomm.AttysCommBase_unregisterCallback(self)

    def registerMessageCallback(self, f: "AttysCommMessage") -> "void":
        r"""
        registerMessageCallback(AttysCommBase self, AttysCommMessage f)

        Parameters
        ----------
        f: AttysCommMessage *

        """
        return _pyattyscomm.AttysCommBase_registerMessageCallback(self, f)

    def unregisterMessageCallback(self) -> "void":
        r"""unregisterMessageCallback(AttysCommBase self)"""
        return _pyattyscomm.AttysCommBase_unregisterMessageCallback(self)

    def quit(self) -> "void":
        r"""quit(AttysCommBase self)"""
        return _pyattyscomm.AttysCommBase_quit(self)

    def getBluetoothBinaryAdress(self) -> "unsigned char *":
        r"""getBluetoothBinaryAdress(AttysCommBase self) -> unsigned char *"""
        return _pyattyscomm.AttysCommBase_getBluetoothBinaryAdress(self)

    def getBluetoothAdressString(self, s: "char *") -> "void":
        r"""
        getBluetoothAdressString(AttysCommBase self, char * s)

        Parameters
        ----------
        s: char *

        """
        return _pyattyscomm.AttysCommBase_getBluetoothAdressString(self, s)
    attysCommMessage = property(_pyattyscomm.AttysCommBase_attysCommMessage_get, _pyattyscomm.AttysCommBase_attysCommMessage_set, doc=r"""attysCommMessage : p.AttysCommMessage""")

    def processRawAttysData(self, data: "char const *") -> "void":
        r"""
        processRawAttysData(AttysCommBase self, char const * data)

        Parameters
        ----------
        data: char const *

        """
        return _pyattyscomm.AttysCommBase_processRawAttysData(self, data)

    def isInitialising(self) -> "int":
        r"""isInitialising(AttysCommBase self) -> int"""
        return _pyattyscomm.AttysCommBase_isInitialising(self)

# Register AttysCommBase in _pyattyscomm:
_pyattyscomm.AttysCommBase_swigregister(AttysCommBase)

def AttysCommBase_phys2temperature(volt: "float") -> "float":
    r"""
    AttysCommBase_phys2temperature(float volt) -> float

    Parameters
    ----------
    volt: float

    """
    return _pyattyscomm.AttysCommBase_phys2temperature(volt)


def Base64encode_len(len: "int") -> "int":
    r"""
    Base64encode_len(int len) -> int

    Parameters
    ----------
    len: int

    """
    return _pyattyscomm.Base64encode_len(len)

def Base64encode(coded_dst: "char *", plain_src: "char const *", len_plain_src: "int") -> "__int64":
    r"""
    Base64encode(char * coded_dst, char const * plain_src, int len_plain_src) -> __int64

    Parameters
    ----------
    coded_dst: char *
    plain_src: char const *
    len_plain_src: int

    """
    return _pyattyscomm.Base64encode(coded_dst, plain_src, len_plain_src)

def Base64decode_len(coded_src: "char const *") -> "__int64":
    r"""
    Base64decode_len(char const * coded_src) -> __int64

    Parameters
    ----------
    coded_src: char const *

    """
    return _pyattyscomm.Base64decode_len(coded_src)

def Base64decode(plain_dst: "char *", coded_src: "char const *") -> "__int64":
    r"""
    Base64decode(char * plain_dst, char const * coded_src) -> __int64

    Parameters
    ----------
    plain_dst: char *
    coded_src: char const *

    """
    return _pyattyscomm.Base64decode(plain_dst, coded_src)
class AttysComm(AttysCommBase):
    r"""Proxy of C++ AttysComm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _btAddr: "void *"=None, _btAddrLen: "int"=0):
        r"""
        __init__(AttysComm self, void * _btAddr=None, int _btAddrLen=0) -> AttysComm

        Parameters
        ----------
        _btAddr: void *
        _btAddrLen: int

        """
        _pyattyscomm.AttysComm_swiginit(self, _pyattyscomm.new_AttysComm(_btAddr, _btAddrLen))

    def connect(self) -> "void":
        r"""connect(AttysComm self)"""
        return _pyattyscomm.AttysComm_connect(self)

    def closeSocket(self) -> "void":
        r"""closeSocket(AttysComm self)"""
        return _pyattyscomm.AttysComm_closeSocket(self)

    def run(self) -> "void":
        r"""run(AttysComm self)"""
        return _pyattyscomm.AttysComm_run(self)

    def quit(self) -> "void":
        r"""quit(AttysComm self)"""
        return _pyattyscomm.AttysComm_quit(self)

    def sendSyncCommand(self, message: "char const *", waitForOK: "int") -> "void":
        r"""
        sendSyncCommand(AttysComm self, char const * message, int waitForOK)

        Parameters
        ----------
        message: char const *
        waitForOK: int

        """
        return _pyattyscomm.AttysComm_sendSyncCommand(self, message, waitForOK)

    def sendInit(self) -> "void":
        r"""sendInit(AttysComm self)"""
        return _pyattyscomm.AttysComm_sendInit(self)

    def start(self) -> "void":
        r"""start(AttysComm self)"""
        return _pyattyscomm.AttysComm_start(self)

    def receptionTimeout(self) -> "void":
        r"""receptionTimeout(AttysComm self)"""
        return _pyattyscomm.AttysComm_receptionTimeout(self)

    def getBluetoothBinaryAdress(self) -> "unsigned char *":
        r"""getBluetoothBinaryAdress(AttysComm self) -> unsigned char *"""
        return _pyattyscomm.AttysComm_getBluetoothBinaryAdress(self)

    def getBluetoothAdressString(self, s: "char *") -> "void":
        r"""
        getBluetoothAdressString(AttysComm self, char * s)

        Parameters
        ----------
        s: char *

        """
        return _pyattyscomm.AttysComm_getBluetoothAdressString(self, s)
    __swig_destroy__ = _pyattyscomm.delete_AttysComm

# Register AttysComm in _pyattyscomm:
_pyattyscomm.AttysComm_swigregister(AttysComm)

MAX_ATTYS_DEVS = _pyattyscomm.MAX_ATTYS_DEVS

class AttysScanListener(object):
    r"""Proxy of C++ AttysScanListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyattyscomm.delete_AttysScanListener

    def message(self, arg0: "int const", arg1: "char const *") -> "void":
        r"""
        message(AttysScanListener self, int const arg0, char const * arg1)

        Parameters
        ----------
        arg0: int const
        arg1: char const *

        """
        return _pyattyscomm.AttysScanListener_message(self, arg0, arg1)

    def __init__(self):
        r"""
        __init__(AttysScanListener self) -> AttysScanListener

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == AttysScanListener:
            _self = None
        else:
            _self = self
        _pyattyscomm.AttysScanListener_swiginit(self, _pyattyscomm.new_AttysScanListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _pyattyscomm.disown_AttysScanListener(self)
        return weakref.proxy(self)

# Register AttysScanListener in _pyattyscomm:
_pyattyscomm.AttysScanListener_swigregister(AttysScanListener)
cvar = _pyattyscomm.cvar

class AttysScan(object):
    r"""Proxy of C++ AttysScan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyattyscomm.delete_AttysScan

    def scan(self, maxAttys: "int"=4) -> "int":
        r"""
        scan(AttysScan self, int maxAttys=4) -> int

        Parameters
        ----------
        maxAttys: int

        """
        return _pyattyscomm.AttysScan_scan(self, maxAttys)
    SCAN_CONNECTED = _pyattyscomm.AttysScan_SCAN_CONNECTED
    
    SCAN_SEARCHING = _pyattyscomm.AttysScan_SCAN_SEARCHING
    
    SCAN_NODEV = _pyattyscomm.AttysScan_SCAN_NODEV
    
    SCAN_SOCKETERR = _pyattyscomm.AttysScan_SCAN_SOCKETERR
    
    SCAN_CONNECTING = _pyattyscomm.AttysScan_SCAN_CONNECTING
    
    SCAN_CONNECTERR = _pyattyscomm.AttysScan_SCAN_CONNECTERR
    

    def registerCallback(self, f: "AttysScanListener") -> "void":
        r"""
        registerCallback(AttysScan self, AttysScanListener f)

        Parameters
        ----------
        f: AttysScanListener *

        """
        return _pyattyscomm.AttysScan_registerCallback(self, f)

    def unregisterCallback(self) -> "void":
        r"""unregisterCallback(AttysScan self)"""
        return _pyattyscomm.AttysScan_unregisterCallback(self)

    def getAttysComm(self, i: "int") -> "AttysComm *":
        r"""
        getAttysComm(AttysScan self, int i) -> AttysComm

        Parameters
        ----------
        i: int

        """
        return _pyattyscomm.AttysScan_getAttysComm(self, i)

    def getAttysName(self, i: "int") -> "char *":
        r"""
        getAttysName(AttysScan self, int i) -> char *

        Parameters
        ----------
        i: int

        """
        return _pyattyscomm.AttysScan_getAttysName(self, i)

    def getNAttysDevices(self) -> "int":
        r"""getNAttysDevices(AttysScan self) -> int"""
        return _pyattyscomm.AttysScan_getNAttysDevices(self)
    statusCallback = property(_pyattyscomm.AttysScan_statusCallback_get, _pyattyscomm.AttysScan_statusCallback_set, doc=r"""statusCallback : p.AttysScanListener""")
    nAttysDevices = property(_pyattyscomm.AttysScan_nAttysDevices_get, _pyattyscomm.AttysScan_nAttysDevices_set, doc=r"""nAttysDevices : int""")
    attysName = property(_pyattyscomm.AttysScan_attysName_get, _pyattyscomm.AttysScan_attysName_set, doc=r"""attysName : p.p.char""")
    attysComm = property(_pyattyscomm.AttysScan_attysComm_get, _pyattyscomm.AttysScan_attysComm_set, doc=r"""attysComm : p.p.AttysComm""")

    def __init__(self):
        r"""__init__(AttysScan self) -> AttysScan"""
        _pyattyscomm.AttysScan_swiginit(self, _pyattyscomm.new_AttysScan())

# Register AttysScan in _pyattyscomm:
_pyattyscomm.AttysScan_swigregister(AttysScan)



