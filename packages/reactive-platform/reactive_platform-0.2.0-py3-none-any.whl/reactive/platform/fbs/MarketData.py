# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers

class MarketData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMarketData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MarketData()
        x.Init(buf, n + offset)
        return x

    # MarketData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MarketData
    def Accnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MarketData
    def Market(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MarketData
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # MarketData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MarketData
    def RequestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MarketData
    def LastTrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .MDTrade import MDTrade
            obj = MDTrade()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MarketData
    def BidL2(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 32
            from .MDLevel import MDLevel
            obj = MDLevel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MarketData
    def BidL2Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MarketData
    def OfferL2(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 32
            from .MDLevel import MDLevel
            obj = MDLevel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MarketData
    def OfferL2Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MarketData
    def BidL3(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from .MDEntry import MDEntry
            obj = MDEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MarketData
    def BidL3Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MarketData
    def OfferL3(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from .MDEntry import MDEntry
            obj = MDEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MarketData
    def OfferL3Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MarketDataStart(builder): builder.StartObject(10)
def MarketDataAddAccnt(builder, accnt): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(accnt), 0)
def MarketDataAddMarket(builder, market): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(market), 0)
def MarketDataAddFlags(builder, flags): builder.PrependUint16Slot(2, flags, 0)
def MarketDataAddId(builder, id): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def MarketDataAddRequestId(builder, requestId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(requestId), 0)
def MarketDataAddLastTrade(builder, lastTrade): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(lastTrade), 0)
def MarketDataAddBidL2(builder, bidL2): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(bidL2), 0)
def MarketDataStartBidL2Vector(builder, numElems): return builder.StartVector(32, numElems, 8)
def MarketDataAddOfferL2(builder, offerL2): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(offerL2), 0)
def MarketDataStartOfferL2Vector(builder, numElems): return builder.StartVector(32, numElems, 8)
def MarketDataAddBidL3(builder, bidL3): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(bidL3), 0)
def MarketDataStartBidL3Vector(builder, numElems): return builder.StartVector(24, numElems, 8)
def MarketDataAddOfferL3(builder, offerL3): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(offerL3), 0)
def MarketDataStartOfferL3Vector(builder, numElems): return builder.StartVector(24, numElems, 8)
def MarketDataEnd(builder): return builder.EndObject()
