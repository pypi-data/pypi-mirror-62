# This file exists so you can easily regenerate your project.
#
# `cookiepatcher` is a convenient shim around `cookiecutter`
# for regenerating projects (it will generate a .cookiecutterrc
# automatically for any template). To use it:
#
#    pip install cookiepatcher
#    cookiepatcher gh:ionelmc/cookiecutter-pylibrary project-path
#
# See:
#    https://pypi.org/project/cookiepatcher
#
# Alternatively, you can run:
#
#    cookiecutter --overwrite-if-exists --config-file=project-path/.cookiecutterrc gh:ionelmc/cookiecutter-pylibrary

default_context:

    _extensions:               ['jinja2_time.TimeExtension']
    _template:                 'gh:ionelmc/cookiecutter-pylibrary'
    allow_tests_inside_package: 'no'
    appveyor:                  'no'
    c_extension_function:      'longest'
    c_extension_module:        '_merchant_rest_service'
    c_extension_optional:      'no'
    c_extension_support:       'no'
    c_extension_test_pypi:     'no'
    c_extension_test_pypi_username: 'pagadevcomm'
    codacy:                    'no'
    codacy_projectid:          '[Get ID from https://app.codacy.com/app/pagadevcomm/merchant_rest_service/settings]'
    codeclimate:               'no'
    codecov:                   'no'
    command_line_interface:    'plain'
    command_line_interface_bin_name: 'merchant_rest_service'
    coveralls:                 'no'
    coveralls_token:           '[Required for Appveyor, take it from https://coveralls.io/github/pagadevcomm/merchant_rest_service]'
    distribution_name:         'merchant_rest_service'
    email:                     'devcomm@paga.com'
    full_name:                 'Paga Developer Community'
    landscape:                 'yes'
    license:                   'MIT license'
    linter:                    'flake8'
    package_name:              'merchant_rest_service'
    project_name:              'merchant_rest_service'
    project_short_description: 'When you need to make use of Paga Merchant Service API, using our libraries to interact with the APIs makes your integration fast as most of the API logic has been handled when using the Paga Merchant Libraries'
    pypi_badge:                'no'
    pypi_disable_upload:       'no'
    release_date:              '3'
    repo_hosting:              'github.com'
    repo_hosting_domain:       'https://github.com/pagadevcomm/merchant_rest_service.git'
    repo_name:                 'merchant_rest_service'
    repo_username:             'pagadevcomm'
    requiresio:                'no'
    scrutinizer:               'no'
    setup_py_uses_setuptools_scm: 'no'
    setup_py_uses_test_runner: 'no'
    sphinx_docs:               'no'
    sphinx_docs_hosting:       'https://merchant_rest_service.readthedocs.io/'
    sphinx_doctest:            'yes'
    sphinx_theme:              'sphinx-rtd-theme'
    test_matrix_configurator:  'no'
    test_matrix_separate_coverage: 'no'
    test_runner:               'pytest'
    travis:                    'yes'
    travis_osx:                'yes'
    version:                   '0.0.1'
    website:                   'http://developer.paga.com/'
    year_from:                 '2018'
    year_to:                   '2020'
