import ajax
    ;

//==============================================================================
// XScript.js
//==============================================================================
//
// Initialization: XScript(offset)
//


//--  Utility  -----------------------------------------------------------------

function removeChildren (elt) {
    while (elt.childNodes.length > 0) {
	elt.removeChild(elt.childNodes[0]);
    }
}


//--  Media  -------------------------------------------------------------------

function Media (xscript) {
    var media = this;
    var player = document.getElementById("mediaPlayer");
    this.player = player;
    this._startAt = null;
    this._stopAt = null;

    player.ondurationchange = function () {
	xscript._setDuration(player.duration);
    }

    player.ontimeupdate = function () {
	if (media._stopAt !== null) {
	    if (player.currentTime >= media._stopAt) {
		player.pause();
		media._startAt = null;
		media._stopAt = null;
	    }
        }
    }
}
    
Media.prototype.time = function () {
    return this.player.currentTime;
};

Media.prototype.duration = function () {
    return this.player.duration;
};

Media.prototype.startPlaying = function (clip) {
    this.playSpan(clip.start, null);
};

Media.prototype.stop = function () {
    this.player.pause();
};

Media.prototype.playClip = function (clip) {
    this.playSpan(clip.start, clip.end);
};

Media.prototype.playSpan = function (start, end) {
    var media = this;
    var player = this.player;
    media._startAt = start;
    media._stopAt = end;
    player.currentTime = start;
    player.play();

    // media.player.oncanplay = function () { media.player.play(); }
};


//--  NavCell  -----------------------------------------------------------------

var NavCell = { elt: document.getElementById('navCell') };

NavCell.update = function (start, clipsPerPage, totalNClips) {
    removeChildren(NavCell.elt);

    // we assume that start is a multiple of clipsPerPage!
    var currPage = start / clipsPerPage;
    var rmdr = totalNClips % clipsPerPage;
    var lastPage = (totalNClips - rmdr) / clipsPerPage;

    NavCell.current = currPage;
    NavCell.clipsPerPage = clipsPerPage;

    var i;
    if (currPage > 0) {
	NavCell.button(0);
	i = currPage - 5;
	if (i > 1) NavCell.ellipsis();
	else i = 1;
	while (i < currPage) NavCell.button(i++);
    }
    NavCell.addCurrent();
    i = currPage + 1;
    if (i <= lastPage) {
	var stop = i + 5;
	if (stop > lastPage) stop = lastPage;
	while (i < stop) NavCell.button(i++);
	if (i < lastPage) NavCell.ellipsis();
	NavCell.button(lastPage);
    }
};

NavCell.button = function (i) {
    var start = i * NavCell.clipsPerPage;
    var button = document.createElement('input');
    button.type = 'button';
    button.className = 'thinbutton';
    button.value = i;
    button.onclick = function () { window.location = 'edit.' + start; }
    NavCell.elt.appendChild(button);
};

NavCell.ellipsis = function () {
    NavCell.elt.appendChild(document.createTextNode('...'));
};

NavCell.addCurrent = function (i) {
    NavCell.elt.appendChild(document.createTextNode(' < '));
    var button = document.createElement('input');
    button.type = 'button';
    button.className = 'thinbutton';
    button.value = NavCell.current;
    button.disabled = true;
    NavCell.elt.appendChild(button);
    NavCell.elt.appendChild(document.createTextNode(' > '));
};


//--  NavigationFrame  ---------------------------------------------------------

function NavigationFrame (xscript) {
    this.xscript = xscript;
}

NavigationFrame.prototype.update = function (start, end, totalNClips) {
    var xscript = this.xscript;
    var clipsPerPage = xscript.clipsPerPage;
    var prevStart = start - clipsPerPage;
    var nextStart = start + clipsPerPage;

    NavCell.update(start, clipsPerPage, totalNClips);

    var prevButton = document.getElementById('prevButton');
    if (prevStart >= 0) {
	prevButton.onclick = function () { window.location = 'edit.' + prevStart; }
	prevButton.disabled = false;
    }
    else {
	prevButton.disabled = true;
    }

    var nextButton = document.getElementById('nextButton');
    if (nextStart < totalNClips) {
	nextButton.onclick = function () {
	    window.location = 'edit.' + nextStart;
	}
	nextButton.disabled = false;
    }
    else {
	nextButton.disabled = true;
    }
}


//--  RecordControls  ----------------------------------------------------------

function RecordControls (media, cell, clip) {
    var controls = this;

    var recLabel = document.createTextNode('Rec');
    var recButton = document.createElement('button');
    cell.appendChild(recButton);
    recButton.type = 'button';
    recButton.className = 'thinbutton';
    recButton.appendChild(recLabel);
    recButton.onclick = function () { controls.clicked(); }

    var button = document.createElement('button');
    cell.appendChild(button);
    button.type = 'button';
    button.className = 'thinbutton';
    button.appendChild(document.createTextNode('<'));
    button.onclick = function () { controls.nudgeLeft(); }

    button = document.createElement('button');
    cell.appendChild(button);
    button.type = 'button';
    button.className = 'thinbutton';
    button.appendChild(document.createTextNode('>'));
    button.onclick = function () { controls.nudgeRight(); }

    var endTimeBox = document.createTextNode(clip.end);
    cell.appendChild(endTimeBox);

    this.media = media;
    this.clip = clip;
    this._recLabel = recLabel;
    this._endTimeBox = endTimeBox;
    this._state = 0;
}

RecordControls.prototype.nudgeLeft = function () {
    var clip = this.clip;
    clip.setEnd(Number(clip.end) - 0.25);
    clip.playTail();
}

RecordControls.prototype.nudgeRight = function () {
    var clip = this.clip;
    clip.setEnd(Number(clip.end) + 0.25);
    clip.playTail();
}

RecordControls.prototype.clicked = function () {
    var media = this.media;
    var recLabel = this._recLabel;
    var clip = this.clip;
    if (this._state == 0) {
	recLabel.nodeValue = 'Cut';
	this._state = 1;
	media.startPlaying(clip);
    }
    else {
	media.stop();
	recLabel.nodeValue = 'Rec';
	this._state = 0;
	var t = media.time() - 0.5;
	if (t < clip.start + 0.5) t = clip.start + 0.5;
	this._endTimeBox.textContent = t;
	clip.setEnd(t);
    }
}


//--  TextEditBox  -------------------------------------------------------------

function TextEditBox (xscript) {
    var controls = this;
    var box = document.createElement('input');
    box.type = 'text';
    box.size = 70;
    box.onkeypress = function (evt) { controls._keypress(evt); }
    box.onblur = function () { controls.cancelEdit(); }
    this.box = box;
    this.clip = null;
}

TextEditBox.prototype.editClip = function (clip) {
    if (this.clip) this.cancelEdit();
    var p = clip.pElt;
    this.clip = clip;
    var box = this.box;
    box.value = clip.ascii;
    p.parentNode.replaceChild(box, p);
    box.focus();
}

TextEditBox.prototype._keypress = function (evt) {
    if (evt.key === 'Escape') this.cancelEdit();
    else if (evt.key === 'Enter') this.finishEdit();
}

TextEditBox.prototype.cancelEdit = function () {
    var p = this.clip.pElt;
    var box = this.box;
    box.parentNode.replaceChild(p, box);
    this.clip = null;
}

TextEditBox.prototype.finishEdit = function () {
    var clip = this.clip;
    var ascii = this.box.value;
    this.cancelEdit();
    clip.setText(ascii);
}


//--  Clip  --------------------------------------------------------------------

function Clip (table, spec) {
    var clip = this;

    this.xscript = table.xscript;
    this.index = Number(spec.i);
    this.ascii = spec.ascii;
    this.start = Number(spec.start);
    this.end = Number(spec.end);
    this.para = Number(spec.para);

    var media = table.xscript.media;

    var row = document.createElement('tr');
    table.element.appendChild(row);
    
    // clip number
    var cell = document.createElement('td');
    row.appendChild(cell);
    cell.className = 'segno';
    cell.appendChild(document.createTextNode(spec.i));
    
    // play controls
    cell = document.createElement('td');
    row.appendChild(cell);
    var button = document.createElement('button');
    cell.appendChild(button);
    button.type = 'button';
    button.appendChild(document.createTextNode('Play'));
    button.onclick = function () { clip.play(); }
    
    // record controls
    cell = document.createElement('td');
    cell.className = 'recctls';
    row.appendChild(cell);
    var recordControls = new RecordControls(media, cell, this);
    
    // new-par checkbox
    cell = document.createElement('td');
    row.appendChild(cell);
    cell.appendChild(document.createTextNode(String.fromCharCode(182)));
    var checkBox = document.createElement('input');
    cell.appendChild(checkBox);
    checkBox.type = 'checkbox';
    checkBox.checked = (spec.para == 1);
    checkBox.onchange = function () { clip.setPara(checkBox.checked ? 1 : 0); }
    
    // text par
    cell = document.createElement('td');
    row.appendChild(cell);
    var p = document.createElement('p');
    cell.appendChild(p);
    var textNode = document.createTextNode(spec.unicode);
    p.className = 'transcription';
    p.appendChild(textNode);
    p.onclick = function () { clip.editText(); }

    this.pElt = p;
    this.recordControls = recordControls;

    table.clips.push(this);
}

Clip.prototype.play = function () {
    this.xscript.media.playClip(this);
}

Clip.prototype.playTail = function () {
    var start = this.start;
    var end = this.end;
    var t = end - 0.75;
    if (t < start) t = start;
    this.xscript.media.playSpan(t, end);
}

Clip.prototype.setEnd = function (end) {
    this.end = end;
    this.xscript.server.setClip(this);
}

Clip.prototype.setText = function (text) {
    this.ascii = text;
    this.xscript.server.setText(this);
}

// Handles callback from server.setText()

Clip.prototype._updateUnicode = function (unicode) {
    this.pElt.textContent = unicode;
}

Clip.prototype.editText = function () {
    this.xscript.editBox.editClip(this);
}

Clip.prototype.setPara = function (value) {
    this.para = value;
    this.xscript.server.setPara(this.index, value);
}


//--  ClipTable  ---------------------------------------------------------------

function ClipTable (xscript) {
    this.xscript = xscript;
    this.element = document.getElementById('clipTable');
    this.clips = null;
    this.start = null;
    this.end = null;
    this.totalNClips = null;
}

ClipTable.prototype.setDuration = function (duration) {
    this.xscript.server.setDuration(duration);
}

// Handles the callback from the server
// spec: json list, elements have atts: i start end ascii unicode

ClipTable.prototype._rebuild = function (spec) {
    var nav = this.xscript.nav;
    var elt = this.element;
    removeChildren(elt);
    this.clips = [];
    spec = JSON.parse(spec);
    this.start = Number(spec['start']);
    this.end = Number(spec['end']);
    this.totalNClips = Number(spec['total']);
    var clips = spec['clips'];
    for (i = 0; i < clips.length; ++i) {
	new Clip(this, clips[i]);
    }
    nav.update(this.start, this.end, this.totalNClips);
}


//--  Server  ------------------------------------------------------------------

function Server (xscript) {
    var server = this;
    this.xscript = xscript;
    this._loadForm = new FormData();
    this._textForm = new FormData();
    this._paraForm = new FormData();
    this._clipForm = new FormData();
    this._clip = null;
    // Callback functions
    this._updateUnicode = function (unicode) { server._clip._updateUnicode(unicode); }
    this._rebuild = function (spec) { server.xscript.table._rebuild(spec); }
}

Server.prototype.setDuration = function (duration) {
    var xscript = this.xscript;
    var form = this._loadForm;
    form.set('clip0', xscript.clip0);
    form.set('clips_per_page', xscript.clipsPerPage);
    form.set('duration', duration);
    ajax.call('set_duration', form, this._rebuild);
}

Server.prototype.setClip = function (clip) {
    var xscript = this.xscript;
    var form = this._clipForm;
    form.set('index', clip.index);
    form.set('start', clip.start);
    form.set('end', clip.end);
    form.set('clip0', xscript.clip0);
    form.set('clips_per_page', xscript.clipsPerPage);
    ajax.call('set_clip', form, this._rebuild);
}

Server.prototype.setText = function (clip) {
    this._clip = clip;
    var form = this._textForm;
    form.set('index', clip.index);
    form.set('text', clip.ascii);
    ajax.call('set_text', form, this._updateUnicode);
}

Server.prototype.setPara = function (index, value) {
    var form = this._paraForm;
    form.set('index', index);
    form.set('value', value);
    ajax.call('set_para', form, null);
}


//--  XScript  -----------------------------------------------------------------

function XScript (clip0, clipsPerPage) {
    this._initialized = false;
    this.clip0 = clip0;
    this.clipsPerPage = clipsPerPage;
    this.server = new Server(this);
    this.media = new Media(this);
    this.nav = new NavigationFrame(this);
    this.table = new ClipTable(this, clip0, clipsPerPage);
    this.editBox = new TextEditBox(this);

    this._initialized = true;
    this._setDuration(this.media.duration());
}

XScript.prototype._setDuration = function (duration) {
    if (this._initialized && !(duration === null || isNaN(duration))) {
	this.table.setDuration(duration);
    }
}
