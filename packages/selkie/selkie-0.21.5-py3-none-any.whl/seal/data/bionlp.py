##  @package seal.data.bionlp
#   Interface to the BioNLP data set.

##  Start.
START = 0
##  End.
END = 1

##  Span.

class Span(object):

    ##  Constructor.

    def __init__ (self, text, i, j):

        ##  The text.
        self.text = text

        ##  Start position.
        self.i = i

        ##  End position.
        self.j = j


##  A tag.

class Tag(object):

    ## Constructor.

    def __init__ (self, span, i):

        ##  The span.
        self.span = span

        ##  Start position in span.
        self.i = i


##  A text.

class Text(object):

    ##  Constructor.

    def __init__ (self, fn):
        f = open(fn + ".txt")

        ##  The text.
        self.text = f.read()

        f.close()

    ##  Create a start tag.

    def start_tag (self):
        return Tag(self, START, self.i)

    ##  Create an end tag.

    def end_tag (self):
        return Tag(self, END, self.j)



##  Browser.

class Browser(object):

    ##  Cosntructor.

    def __init__ (self):

        ##  The bionlp directory.
        self.root = "/Users/spa/scratch/bionlp09-shared-task"

        ##  The data subdirectory within the bionlp directory.
        self.data_dir = self.root + "/data"

        ##  The training data, within the data directory.
        self.train_dir = self.data_dir + "/bionlp09_shared_task_training_data_rev2"

        ##  Pubmed IDs for the training examples.
        self.train_pubmed_ids = ["10022882","10022897","10023774","10029571","10029589","10037138","10037751","10064064","10064103","10068588","10068671","10069412","10069428","10070274","10072497","10075645","10079106","10080532","10080875","10080948","10082134","10082473","10087185","10087993","10089140","10101034","10102628","10102791","10191934","10194184","10194443","10197731","10200294","10201929","10202024","10202027","10202034","10202178","10202937","10203577","10206480","10206983","10208867","10209036","10209041","10210321","10210645","10217534","10221643","10221658","10224109","10225377","10226884","10228008","10228026","10229815","10229820","10229841","10232385","10233875","10233879","10233882","10233888","10233927","10233947","10235509","10318942","10327050","10328874","10329625","10329626","10329845","10329958","10330189","10330274","10331989","10339475","10347175","10349513","10352258","10352279","10357820","10358154","10358173","10358756","10359895","10364157","10364191","10364260","10369255","10372271","10377075","10377411","10378895","10381501","10381655","10383397","10383940","10423406","10425206","10425262","10426995","10426996","10428853","10430908","10430922","10432288","10437913","10438457","10438731","10438843","10438913","10440930","10446999","10452760","10454636","10455134","10477683","10477716","10480426","10482545","10485906","10487715","10491412","10497131","1313226","1314139","1315834","1372388","1375324","1380242","1386962","1419903","1419905","1429562","1431113","1448931","1454801","1464736","1470918","1482376","1492121","1493333","1502179","1502202","1505523","1510878","1520341","1527846","1527859","1531086","1531412","1532661","1533884","1537389","1537556","1541828","1545132","1560002","1583734","1618911","1620119","1628621","1645452","1653056","1653950","1655897","1656391","1658795","1668145","1676267","1765275","1768652","1777483","1782151","1829648","1847170","1851743","1851861","1883525","1896644","1896645","1899335","1903417","1907460","1911548","1931834","1939341","1944294","1945879","1946356","1946405","1953785","1956769","1958222","1964088","1972889","1981844","1984449","1986254","1987353","2006151","2006423","2017177","2017258","2023633","2026605","2039752","2056282","2065663","2072454","2083253","2088505","2105528","2105887","2105946","2109187","2111447","2112575","2116990","2121746","2122173","2123468","2123553","2127692","2144551","2146676","2148290","2172166","2192264","2193097","2196387","2204723","2216722","2234062","2237444","2258623","2269427","2278044","2302185","2304473","2314899","2394747","2407588","7510689","7512565","7516328","7518803","7518838","7520093","7520914","7522257","7522304","7522548","7523507","7524762","7525701","7526398","7532282","7534293","7534663","7540578","7540942","7541794","7542286","7542591","7543076","7543515","7545467","7554389","7565683","7565732","7565811","7569976","7578980","7579328","7585505","7589085","7590249","7590666","7594456","7594468","7594489","7594540","7609053","7622191","7623828","7629157","7629508","7635985","7637809","7640302","7641319","7641692","7645208","7650486","7657825","7659529","7662982","7664781","7665588","7670114","7673240","7682243","7688596","7692906","7706235","7706273","7706710","7706727","7713868","7718519","7720085","7721885","7730624","7739562","7742037","7788861","7802642","7823943","7826623","7836389","7843230","7843251","7848679","7848921","7849291","7853483","7858491","7859290","7859735","7859743","7862157","7862168","7864072","7865130","7869038","7878466","7882168","7884865","7888116","7890658","7890777","7892566","7905504","7909357","7912114","7915519","7917514","7919963","7923175","7925300","7926759","7927175","7929104","7929355","7931077","7935451","7945272","7949138","7958618","7961690","7964483","7964516","7964616","7966569","7969146","7969177","7981603","7983701","7986199","7989745","7998962","8011280","8014029","8015552","8015553","8018558","8018594","8038234","8039243","8051172","8052854","8054477","8062448","8067997","8077662","8079992","8083467","8088776","8135784","8137243","8139041","8144878","8151786","8158122","8162052","8163464","8163658","8164652","8164666","8170476","8175775","8179594","8183915","8184011","8186192","8186461","8189531","8195215","8196620","8207643","8207793","8264604","8298127","8314792","8319574","8325322","8383677","8386664","8419337","8428000","8428943","8428966","8436816","8441379","8443122","8444885","8449904","8454603","8455611","8468462","8473495","8479911","8480425","8491377","8493578","8496329","8504248","8504932","8506326","8507862","8513868","8523529","8524816","8530384","8543789","8543841","8555489","8557975","8562512","8562886","8566023","8573121","8577772","8600942","8602529","8605348","8605359","8605587","8608243","8613707","8617207","8627768","8627791","8628274","8628295","8628306","8631821","8632999","8634413","8635523","8641346","8641353","8641467","8642282","8645086","8645254","8649822","8652841","8657101","8659190","8662666","8662845","8663022","8663060","8663174","8663230","8664547","8666783","8666795","8668213","8670269","8691123","8691127","8692924","8699118","8702849","8707445","8709191","8709209","8723387","8725939","8739563","8747083","8754855","8757316","8757326","8758898","8759721","8761381","8773576","8790371","8790376","8796372","8797708","8799177","8804437","8805630","8809111","8809409","8816395","8816424","8816436","8816450","8816454","8816467","8839844","8843413","8852698","8853898","8858156","8871617","8871623","8871649","8872606","8929546","8930131","8933518","8934542","8943338","8947512","8960112","8960365","8972869","8973354","8977228","8977297","8978306","8985116","9007200","9009221","9011569","9013959","9013974","9015187","9018153","9020049","9028949","9031085","9032264","9032265","9032271","9032280","9032344","9032403","9045614","9047238","9047239","9052735","9052839","9053449","9057086","9058790","9060666","9065737","9070319","9073544","9074948","9075924","9078381","9081693","9094628","9095577","9096701","9101089","9108409","9109677","9111040","9115242","9115366","9115394","9115810","9116279","9119025","9119999","9121455","9122255","9130477","9130512","9130632","9133417","9135552","9136080","9136989","9144218","9144338","9144472","9144479","9175835","9177216","9177217","9178107","9180266","9182556","9185506","9187264","9188651","9188842","9190901","9191057","9195127","9199300","9199305","9199464","9199898","9201242","9209268","9209284","9209438","9211847","9218534","9218843","9219058","9223506","9224203","9224625","9231664","9233623","9237716","9242431","9242564","9243748","9247567","9252117","9256234","9257843","9261181","9261367","9265727","9271352","9271588","9276471","9277450","9277478","9277499","9278334","9285527","9291089","9299589","9299590","9306134","9307271","9309306","9310836","9311830","9311921","9312094","9312192","9317131","9317151","9322967","9326236","9334193","9334723","9341193","9341756","9341877","9343210","9343406","9344365","9348104","9374467","9374642","9376579","9379002","9384661","9388475","9390691","9394832","9398163","9398404","9400372","9414129","9416887","9419430","9427533","9428793","9428796","9428992","9438495","9440542","9440546","9442373","9442374","9442377","9442380","9442395","9442400","9446322","9464836","9479628","9548490","9570512","9616159","9625770","9632764","9633826","9634075","9649186","9663467","9680181","9686612","9690455","9697844","9707608","9710149","9710582","9710600","9712026","9712047","9712068","9715838","9716600","9720648","9722600","9724034","9724088","9725220","9729045","9730957","9731208","9731697","9733716","9741337","9743506","9744863","9748323","9756417","9763613","9764907","9765256","9765295","9783909","9786883","9808586","9813178","9817603","9819151","9819382","9823774","9824485","9828130","9834081","9834092","9834272","9835626","9837745","9838061","9840924","9843840","9845517","9847292","9852211","9852310","9852958","9858241","9858618","9862666","9863501","9872676","9873041","9874515","9878608","9882331","9886419","9887050","9888865","9889197","9893043","9915779","9915863","9916078","9916709","9919536","9933632","9952372","9971788","9973520","9974401"]

    ##  Render it.

    def render (self, path, page):
        if len(path) > 0:
            if path[0] == 'train':
                self.render_train(path[1:], page)
                return True
        raise HttpException('Page not found')

    ##  Render the training set.

    def render_train (self, path, page):
        if len(path) != 1: raise PageNotFound
        i = int(path[0])
        name = self.train_pubmed_ids[i]
        fn = self.train_dir + "/" + name + ".txt"
        print("fn=" + fn)
        for line in open(fn):
            page.write(line)


from seal.server import HttpException
