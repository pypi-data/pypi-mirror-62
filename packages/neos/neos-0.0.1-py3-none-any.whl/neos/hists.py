# AUTOGENERATED! DO NOT EDIT! File to edit: 01_hists.ipynb (unless otherwise specified).

__all__ = ['hists_from_nn', 'hists_from_nn_bkg_var', 'simple_nn_logpdf']

# Cell
import pyhf

pyhf.set_backend(pyhf.tensor.jax_backend())

import jax

# Cell
def hists_from_nn(nn, params, sig, bkg, scale=True, scale_factors=[0.02, 0.1]):
    """Create nn-based binned summary statistics from signal and background events.
    nn should be the 'predict', 'fit' etc. method that's callable on arguments (nn_params,data). Assumes logsoftmax output.
    """

    # set some arbitrary scale factors
    # todo change
    sig_sf = scale_factors[0] if scale else 1
    bkg_sf = scale_factors[1] if scale else 1

    sighist = jax.numpy.sum(jax.numpy.exp(nn(params, sig)), axis=0) * sig_sf
    bkghist = jax.numpy.sum(jax.numpy.exp(nn(params, bkg)), axis=0) * bkg_sf

    return sighist, bkghist

# Cell
def hists_from_nn_bkg_var(
    nn, params, sig, bkg, scale=True, use_jax=True, scale_factors=[0.02, 0.1]
):
    """Create nn-based binned summary statistics from signal and background events, with the background histograms containing multiple variations.
    The std of these variations is then the uncertainty.

    nn should be the 'predict', 'fit' etc. method that's callable on arguments (nn_params,data). Assumes logsoftmax output.

    bkg: array-like, containing len(bkg) modes of the background.
    --> bkg_hist = mean()

    """

    assert (
        len(bkg.shape) == 3
    ), f"Shape error: bkg is of dim {len(bkg.shape)}, but bkg should be dim 3 with shape (num_variations, num_samples, num_nn_output_nodes)"

    # set some arbitrary scale factors
    # todo change
    sig_sf = scale_factors[0] if scale else 1
    bkg_sf = scale_factors[1] if scale else 1

    bkg_variations = jax.numpy.asarray(
        [jax.numpy.sum(jax.numpy.exp(nn(params, b)), axis=0) * bkg_sf for b in bkg]
    )

    sighist = jax.numpy.sum(jax.numpy.exp(nn(params, sig)), axis=0) * sig_sf
    bkghist = jax.numpy.mean(bkg_variations, axis=0)
    bkguncert = jax.numpy.std(bkg_variations, axis=0)

    return sighist, bkghist, bkguncert

# Cell
def simple_nn_logpdf(nn_pars, nn, pars, data, sig_data, bkg_data, bkg_uncerts):
    """Return pyhf.Model.logpdf for a simple two-bin model, containing a signal and background histogram created using hists_from_nn. Mostly for demo purposes."""
    tensorlib, _ = pyhf.get_backend()

    sig_hist, bkg_hist = hists_from_nn(nn, nn_pars, sig_data, bkg_data)

    spec = {
        "channels": [
            {
                "name": "singlechannel",
                "samples": [
                    {
                        "name": "signal",
                        "data": sig_hist,
                        "modifiers": [
                            {"name": "mu", "type": "normfactor", "data": None}
                        ],
                    },
                    {
                        "name": "background",
                        "data": bkg_hist,
                        "modifiers": [
                            {
                                "name": "uncorr_bkguncrt",
                                "type": "shapesys",
                                "data": bkg_hist,
                            }
                        ],
                    },
                ],
            }
        ]
    }
    model = pyhf.Model(spec)

    data += model.config.auxdata
    data = tensorlib.astensor(data)
    pars = tensorlib.astensor(pars)

    # grad only defined for scalar output functions, not [scalar]
    return model.logpdf(pars, data)[0]