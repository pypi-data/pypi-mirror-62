# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2020.02.27
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus.configuration import Configuration


class EnvironmentConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'maintenance_org_id': 'str',
        'config_type': 'str',
        'mount_path': 'str',
        'file_store_uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'maintenance_org_id': 'maintenance_org_id',
        'config_type': 'config_type',
        'mount_path': 'mount_path',
        'file_store_uri': 'file_store_uri'
    }

    def __init__(self, id=None, maintenance_org_id=None, config_type=None, mount_path=None, file_store_uri=None, local_vars_configuration=None):  # noqa: E501
        """EnvironmentConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._maintenance_org_id = None
        self._config_type = None
        self._mount_path = None
        self._file_store_uri = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.maintenance_org_id = maintenance_org_id
        self.config_type = config_type
        if mount_path is not None:
            self.mount_path = mount_path
        self.file_store_uri = file_store_uri

    @property
    def id(self):
        """Gets the id of this EnvironmentConfig.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The id of this EnvironmentConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentConfig.

        Unique identifier  # noqa: E501

        :param id: The id of this EnvironmentConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def maintenance_org_id(self):
        """Gets the maintenance_org_id of this EnvironmentConfig.  # noqa: E501

        The Organisation which is responsibile for maintaining this Environment.   # noqa: E501

        :return: The maintenance_org_id of this EnvironmentConfig.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_org_id

    @maintenance_org_id.setter
    def maintenance_org_id(self, maintenance_org_id):
        """Sets the maintenance_org_id of this EnvironmentConfig.

        The Organisation which is responsibile for maintaining this Environment.   # noqa: E501

        :param maintenance_org_id: The maintenance_org_id of this EnvironmentConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and maintenance_org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `maintenance_org_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                maintenance_org_id is not None and len(maintenance_org_id) > 40):
            raise ValueError("Invalid value for `maintenance_org_id`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                maintenance_org_id is not None and len(maintenance_org_id) < 1):
            raise ValueError("Invalid value for `maintenance_org_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._maintenance_org_id = maintenance_org_id

    @property
    def config_type(self):
        """Gets the config_type of this EnvironmentConfig.  # noqa: E501

        configuration type  # noqa: E501

        :return: The config_type of this EnvironmentConfig.  # noqa: E501
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this EnvironmentConfig.

        configuration type  # noqa: E501

        :param config_type: The config_type of this EnvironmentConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and config_type is None:  # noqa: E501
            raise ValueError("Invalid value for `config_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CONFIGMAP_MOUNT", "CONFIGMAP_ENV", "SECRET_MOUNT", "SECRET_ENV", "FILE_MOUNT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and config_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"  # noqa: E501
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    @property
    def mount_path(self):
        """Gets the mount_path of this EnvironmentConfig.  # noqa: E501

        file mount path for configuration  # noqa: E501

        :return: The mount_path of this EnvironmentConfig.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this EnvironmentConfig.

        file mount path for configuration  # noqa: E501

        :param mount_path: The mount_path of this EnvironmentConfig.  # noqa: E501
        :type: str
        """

        self._mount_path = mount_path

    @property
    def file_store_uri(self):
        """Gets the file_store_uri of this EnvironmentConfig.  # noqa: E501

        files API URI where configuration is located  # noqa: E501

        :return: The file_store_uri of this EnvironmentConfig.  # noqa: E501
        :rtype: str
        """
        return self._file_store_uri

    @file_store_uri.setter
    def file_store_uri(self, file_store_uri):
        """Sets the file_store_uri of this EnvironmentConfig.

        files API URI where configuration is located  # noqa: E501

        :param file_store_uri: The file_store_uri of this EnvironmentConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_store_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `file_store_uri`, must not be `None`")  # noqa: E501

        self._file_store_uri = file_store_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvironmentConfig):
            return True

        return self.to_dict() != other.to_dict()
