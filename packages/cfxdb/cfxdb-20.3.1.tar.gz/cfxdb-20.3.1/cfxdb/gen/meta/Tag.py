# automatically generated by the FlatBuffers compiler, do not modify

# namespace: meta

import flatbuffers

# /// Tags are created and centrally managed, and can be attached to any object.
class Tag(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTag(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tag()
        x.Init(buf, n + offset)
        return x

    # Tag
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// OID of the tag.
    # Tag
    def Oid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

# /// When the documentation (version) was created or modified.
    # Tag
    def Modified(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

# /// Slot of the object being documented.
    # Tag
    def ObjectSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

# /// OID of the object being documented.
    # Tag
    def ObjectOid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TagStart(builder): builder.StartObject(4)
def TagAddOid(builder, oid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(oid), 0)
def TagAddModified(builder, modified): builder.PrependUint64Slot(1, modified, 0)
def TagAddObjectSlot(builder, objectSlot): builder.PrependUint16Slot(2, objectSlot, 0)
def TagAddObjectOid(builder, objectOid): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(objectOid), 0)
def TagEnd(builder): return builder.EndObject()
