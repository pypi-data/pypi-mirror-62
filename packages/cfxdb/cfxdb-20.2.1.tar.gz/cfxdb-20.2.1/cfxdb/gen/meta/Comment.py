# automatically generated by the FlatBuffers compiler, do not modify

# namespace: meta

import flatbuffers

class Comment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsComment(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Comment()
        x.Init(buf, n + offset)
        return x

    # Comment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// OID of the comment.
    # Comment
    def Oid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

# /// If this comment
    # Comment
    def ReplyTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comment
    def Author(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comment
    def Created(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Comment
    def Modified(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Comment
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comment
    def Reactions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Reaction import Reaction
            obj = Reaction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Comment
    def ReactionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def CommentStart(builder): builder.StartObject(7)
def CommentAddOid(builder, oid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(oid), 0)
def CommentAddReplyTo(builder, replyTo): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(replyTo), 0)
def CommentAddAuthor(builder, author): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(author), 0)
def CommentAddCreated(builder, created): builder.PrependUint64Slot(3, created, 0)
def CommentAddModified(builder, modified): builder.PrependUint64Slot(4, modified, 0)
def CommentAddText(builder, text): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def CommentAddReactions(builder, reactions): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(reactions), 0)
def CommentStartReactionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CommentEnd(builder): return builder.EndObject()
