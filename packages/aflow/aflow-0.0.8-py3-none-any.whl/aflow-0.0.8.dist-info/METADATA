Metadata-Version: 2.1
Name: aflow
Version: 0.0.8
Summary: Python API for searching AFLOW database.
Home-page: https://github.com/rosenbrockc/aflow
Author: Conrad W Rosenbrock
Author-email: rosenbrockc@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Requires-Dist: termcolor
Requires-Dist: numpy
Requires-Dist: six
Requires-Dist: jinja2
Requires-Dist: beautifulsoup4
Requires-Dist: ase

|Build Status| |Coverage Status|

``AFLOW`` Python API
====================

Python API wrapping the AFLUX API language for AFLOW library. *Note:*
This is not an official repo of the AFLOW consortium and is not
maintained by them. `API
Documentation <https://rosenbrockc.github.io/aflow/>`__.

If you use this package, please cite it:

::

   @ARTICLE{2017arXiv171000813R,
      author = {{Rosenbrock}, C.~W.},
       title = "{A Practical Python API for Querying AFLOWLIB}",
     journal = {ArXiv e-prints},
   archivePrefix = "arXiv",
      eprint = {1710.00813},
    primaryClass = "cs.DB",
    keywords = {Computer Science - Databases},
        year = 2017,
       month = sep,
      adsurl = {http://adsabs.harvard.edu/abs/2017arXiv171000813R},
     adsnote = {Provided by the SAO/NASA Astrophysics Data System}
   }

Quickstart
----------

Install ``aflow`` from the python package index:

::

   pip install aflow

Or alternatively install ``aflow`` from conda using:

::

   conda install -c conda-forge aflow

Open an ipython notebook or terminal and execute the query from the
paper:

.. code:: python

   from aflow import *

   result = search(batch_size=20
           ).select(K.agl_thermal_conductivity_300K
           ).filter(K.Egap > 6).orderby(K.agl_thermal_conductivity_300K, True)

   # Now, you can just iterate over the results.
   for entry in result:
       print(entry.Egap)

``aflow`` supports lazy evaluation. This means that if you didnâ€™t ask
for a particular property during the initial query, you can just ask for
it later and the request will happen transparently in the background.

.. |Build Status| image:: https://travis-ci.org/rosenbrockc/aflow.svg?branch=master
   :target: https://travis-ci.org/rosenbrockc/aflow
.. |Coverage Status| image:: https://coveralls.io/repos/github/rosenbrockc/aflow/badge.svg?branch=master
   :target: https://coveralls.io/github/rosenbrockc/aflow?branch=master


