# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from dm_env_rpc.v1 import dm_env_rpc_pb2 as dm__env__rpc_dot_v1_dot_dm__env__rpc__pb2


class EnvironmentStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Process = channel.stream_stream(
        '/dm_env_rpc.v1.Environment/Process',
        request_serializer=dm__env__rpc_dot_v1_dot_dm__env__rpc__pb2.EnvironmentRequest.SerializeToString,
        response_deserializer=dm__env__rpc_dot_v1_dot_dm__env__rpc__pb2.EnvironmentResponse.FromString,
        )


class EnvironmentServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Process(self, request_iterator, context):
    """Process incoming environment requests.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EnvironmentServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Process': grpc.stream_stream_rpc_method_handler(
          servicer.Process,
          request_deserializer=dm__env__rpc_dot_v1_dot_dm__env__rpc__pb2.EnvironmentRequest.FromString,
          response_serializer=dm__env__rpc_dot_v1_dot_dm__env__rpc__pb2.EnvironmentResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dm_env_rpc.v1.Environment', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
